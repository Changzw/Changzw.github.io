<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>SnapKit 分析</title>
      <link href="/2020/04/10/source-code/SnapKit-%E5%88%86%E6%9E%90/"/>
      <url>/2020/04/10/source-code/SnapKit-%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Jun 02 2020 17:35:52 GMT+0800 (CST) --><a id="more"></a><p>对应 <a href="https://changzw.github.io/2017/06/01/source-code/Masonry-%E5%88%86%E6%9E%90/">Masonry 源码分析</a>, 看这篇文章前最好先看看这篇</p><p>（DSL 其实是 Domain Specific Language 的缩写，中文翻译为领域特定语言）</p><p>分析源码：</p><ol><li>这个第三方库，他设计的目标是什么？</li><li>需要哪些基础知识</li><li>整体结构是什么样的</li><li>由外而内逐层分析层次结构</li><li>每个层次结构的意图是什么，为了实现这个意图他使用了什么方式，这么做有什么优点</li><li>为了让用户使用方便，实现了什么样的接口，为了实现这样的接口底层又是如何实践的呢？</li></ol><h2 id="snapkit-是什么"><a class="markdownIt-Anchor" href="#snapkit-是什么"></a> <code>SnapKit</code> 是什么</h2><p><a href="https://github.com/SnapKit/SnapKit" target="_blank" rel="noopener">SnapKit 源码地址</a></p><h2 id="为什么要设计-snapkit"><a class="markdownIt-Anchor" href="#为什么要设计-snapkit"></a> 为什么要设计 <code>SnapKit</code></h2><p>首先和系统提供接口对比下</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">label.translatesAutoresizingMaskIntoConstraints = <span class="literal">false</span></span><br><span class="line"><span class="keyword">let</span> constraint1 = <span class="type">NSLayoutConstraint</span>.<span class="keyword">init</span>(item: label,</span><br><span class="line">                                          attribute: .<span class="keyword">left</span>,</span><br><span class="line">                                          relatedBy: .<span class="built_in">equal</span>,</span><br><span class="line">                                          toItem: view,</span><br><span class="line">                                          attribute: .<span class="keyword">left</span>,</span><br><span class="line">                                          multiplier: <span class="number">1</span>,</span><br><span class="line">                                          constant: <span class="number">150</span>);</span><br><span class="line">constraint1.isActive = <span class="literal">true</span></span><br><span class="line">... top, width</span><br><span class="line"><span class="keyword">let</span> constraint4 = <span class="type">NSLayoutConstraint</span>.<span class="keyword">init</span>(item: label,</span><br><span class="line">                                          attribute: .height,</span><br><span class="line">                                          relatedBy: .<span class="built_in">equal</span>,</span><br><span class="line">                                          toItem: view,</span><br><span class="line">                                          attribute: .notAnAttribute,</span><br><span class="line">                                          multiplier: <span class="number">1</span>,</span><br><span class="line">                                          constant: <span class="number">20</span>);</span><br><span class="line">constraint4.isActive = <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>Anchor: 只支持 ios &gt;= 9</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">label.translatesAutoresizingMaskIntoConstraints = <span class="literal">false</span></span><br><span class="line"><span class="type">NSLayoutConstraint</span>.activate([</span><br><span class="line">  label.leftAnchor.constraint(equalTo: view.leftAnchor, constant: <span class="number">150</span>),</span><br><span class="line">  label.topAnchor.constraint(equalTo: view.topAnchor, constant: <span class="number">200</span>),</span><br><span class="line">  label.widthAnchor.constraint(equalToConstant: <span class="number">200</span>),</span><br><span class="line">  label.heightAnchor.constraint(equalToConstant: <span class="number">200</span>),</span><br><span class="line">])</span><br></pre></td></tr></table></figure><p><span id="code1"></span></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">label.snp.makeConstraints &#123; (make) <span class="keyword">in</span></span><br><span class="line">  make.<span class="keyword">left</span>.equalTo(view).offset(<span class="number">150</span>)</span><br><span class="line">  make.top.equalToSuperview().offset(<span class="number">200</span>)</span><br><span class="line">  make.size.equalTo(<span class="type">CGSize</span>(width: <span class="number">200</span>, height: <span class="number">20</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>P.S. SnapKit 内部会帮你调用 view.translatesAutoresizingMaskIntoConstraints = true</p><p>SnapKit 设计的目的，就是以链式编程手段封装 <code>NSLayoutConstraint</code> 冗余代码！</p><ol><li>如何处理原来繁杂接口</li><li>如何实现链式</li><li>如何封装 <code>NSLayoutConstraint</code> 的</li><li>如何把多个 <code>NSLayoutConstraint</code> 封装成简单的一句搞定的</li><li>使用了何种编程手段</li></ol><hr><h2 id="snapkit-代码结构分析"><a class="markdownIt-Anchor" href="#snapkit-代码结构分析"></a> <code>SnapKit</code> 代码结构分析</h2><h3 id="从调用层次分析"><a class="markdownIt-Anchor" href="#从调用层次分析"></a> 从调用层次分析</h3><p>这里我要像洋葱一样一层一层的拨开</p><ol><li>最外层接口<br>根据这段代码分析</li></ol><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">label.snp.makeConstraints &#123; (make) <span class="keyword">in</span></span><br><span class="line">  make.<span class="keyword">left</span>.equalTo(view).offset(<span class="number">150</span>)</span><br><span class="line">  make.size.equalTo(<span class="type">CGSize</span>(width: <span class="number">200</span>, height: <span class="number">20</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ConstraintMaker.swift</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConstraintMaker</span> </span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">var</span> <span class="keyword">left</span>: <span class="type">ConstraintMakerExtendable</span> &#123; <span class="keyword">get</span> &#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">var</span> top: <span class="type">ConstraintMakerExtendable</span> &#123; <span class="keyword">get</span> &#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">var</span> bottom: <span class="type">ConstraintMakerExtendable</span> &#123; <span class="keyword">get</span> &#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">var</span> <span class="keyword">right</span>: <span class="type">ConstraintMakerExtendable</span> &#123; <span class="keyword">get</span> &#125;</span><br><span class="line">  ......</span><br><span class="line">  <span class="keyword">internal</span> <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">prepareConstraints</span><span class="params">(item: LayoutConstraintItem, closure: <span class="params">(<span class="number">_</span> make: ConstraintMaker)</span></span></span> -&gt; <span class="type">Void</span>) -&gt; [<span class="type">Constraint</span>]</span><br><span class="line">  <span class="keyword">internal</span> <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">makeConstraints</span><span class="params">(item: LayoutConstraintItem, closure: <span class="params">(<span class="number">_</span> make: ConstraintMaker)</span></span></span> -&gt; <span class="type">Void</span>)</span><br><span class="line">  <span class="keyword">internal</span> <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">remakeConstraints</span><span class="params">(item: LayoutConstraintItem, closure: <span class="params">(<span class="number">_</span> make: ConstraintMaker)</span></span></span> -&gt; <span class="type">Void</span>)</span><br><span class="line">  <span class="keyword">internal</span> <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">updateConstraints</span><span class="params">(item: LayoutConstraintItem, closure: <span class="params">(<span class="number">_</span> make: ConstraintMaker)</span></span></span> -&gt; <span class="type">Void</span>)</span><br><span class="line">  ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从👆源码可以看到</p><ul><li>三个见名知意的方法</li><li>方法参数 <code>ConstraintMaker</code> 这个就是 make</li><li>属性 <code>ConstraintMakerExtendable</code> 这个就是 make 后面的 make.left</li></ul><p>我想知道，他的链式是怎么实现的，如何封装 autolayout 相关的数据的，目前看到的只是平常使用的接口<br>我还要找到 下图的这些信息<br><img src="/img/view_formula.jpeg" alt="view formula"></p><ol start="2"><li>接着往里面看</li></ol><ul><li><code>ConstraintMakerExtendable</code> 继承自 <code>ConstraintMakerRelatable</code></li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConstraintMakerExtendable</span> : <span class="title">ConstraintMakerRelatable</span>  </span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">var</span> <span class="keyword">left</span>: <span class="type">ConstraintMakerExtendable</span> &#123;</span><br><span class="line">    <span class="keyword">self</span>.description.attributes += .<span class="keyword">left</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span></span><br><span class="line">  &#125; </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">var</span> top: <span class="type">ConstraintMakerExtendable</span> &#123;</span><br><span class="line">    <span class="keyword">self</span>.description.attributes += .top</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span></span><br><span class="line">  &#125; </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">var</span> bottom: <span class="type">ConstraintMakerExtendable</span> &#123;</span><br><span class="line">    <span class="keyword">self</span>.description.attributes += .bottom</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span></span><br><span class="line">  &#125; </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">var</span> <span class="keyword">right</span>: <span class="type">ConstraintMakerExtendable</span> &#123;</span><br><span class="line">    <span class="keyword">self</span>.description.attributes += .<span class="keyword">right</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span></span><br><span class="line">  &#125;</span><br><span class="line">  ......</span><br></pre></td></tr></table></figure><ul><li><p>问题&amp;猜测：</p><ul><li><code>description</code> 是啥？不知道</li><li>不过他有 <code>attributes</code> 属性，看样子对应 <code>NSLayoutConstraint.Attribute</code></li><li>left, top …… 这些都返回 <code>ConstraintMakerExtendable</code> ，猜测他是链的节点对象</li></ul></li><li><p>继续看 <code>ConstraintMakerRelatable</code></p></li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConstraintMakerRelatable</span> </span>&#123;</span><br><span class="line">  <span class="keyword">internal</span> <span class="keyword">let</span> description: <span class="type">ConstraintDescription</span></span><br><span class="line">  <span class="keyword">internal</span> <span class="keyword">init</span>(<span class="number">_</span> description: <span class="type">ConstraintDescription</span>) &#123;</span><br><span class="line">    <span class="keyword">self</span>.description = description</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">internal</span> <span class="function"><span class="keyword">func</span> <span class="title">relatedTo</span><span class="params">(<span class="number">_</span> other: ConstraintRelatableTarget, relation: ConstraintRelation, file: String, line: UInt)</span></span> -&gt; <span class="type">ConstraintMakerEditable</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> related: <span class="type">ConstraintItem</span></span><br><span class="line">    <span class="keyword">let</span> constant: <span class="type">ConstraintConstantTarget</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> other = other <span class="keyword">as</span>? <span class="type">ConstraintItem</span> &#123;</span><br><span class="line">      <span class="keyword">guard</span> other.attributes == <span class="type">ConstraintAttributes</span>.<span class="keyword">none</span> ||</span><br><span class="line">          other.attributes.layoutAttributes.<span class="built_in">count</span> &lt;= <span class="number">1</span> ||</span><br><span class="line">          other.attributes.layoutAttributes == <span class="keyword">self</span>.description.attributes.layoutAttributes ||</span><br><span class="line">          other.attributes == .edges &amp;&amp; <span class="keyword">self</span>.description.attributes == .margins ||</span><br><span class="line">          other.attributes == .margins &amp;&amp; <span class="keyword">self</span>.description.attributes == .edges ||</span><br><span class="line">          other.attributes == .directionalEdges &amp;&amp; <span class="keyword">self</span>.description.attributes == .directionalMargins ||</span><br><span class="line">          other.attributes == .directionalMargins &amp;&amp; <span class="keyword">self</span>.description.attributes == .directionalEdges <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">fatalError</span>(<span class="string">"Cannot constraint to multiple non identical attributes. (\(file), \(line))"</span>);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      related = other</span><br><span class="line">      constant = <span class="number">0.0</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> <span class="keyword">let</span> other = other <span class="keyword">as</span>? <span class="type">ConstraintView</span> &#123;</span><br><span class="line">      related = <span class="type">ConstraintItem</span>(target: other, attributes: <span class="type">ConstraintAttributes</span>.<span class="keyword">none</span>)</span><br><span class="line">      constant = <span class="number">0.0</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> <span class="keyword">let</span> other = other <span class="keyword">as</span>? <span class="type">ConstraintConstantTarget</span> &#123;</span><br><span class="line">      related = <span class="type">ConstraintItem</span>(target: <span class="literal">nil</span>, attributes: <span class="type">ConstraintAttributes</span>.<span class="keyword">none</span>)</span><br><span class="line">      constant = other</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> #available(iOS <span class="number">9.0</span>, <span class="type">OSX</span> <span class="number">10.11</span>, *), <span class="keyword">let</span> other = other <span class="keyword">as</span>? <span class="type">ConstraintLayoutGuide</span> &#123;</span><br><span class="line">      related = <span class="type">ConstraintItem</span>(target: other, attributes: <span class="type">ConstraintAttributes</span>.<span class="keyword">none</span>)</span><br><span class="line">      constant = <span class="number">0.0</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">fatalError</span>(<span class="string">"Invalid constraint. (\(file), \(line))"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> editable = <span class="type">ConstraintMakerEditable</span>(<span class="keyword">self</span>.description)</span><br><span class="line">    editable.description.sourceLocation = (file, line)</span><br><span class="line">    editable.description.relation = relation</span><br><span class="line">    editable.description.related = related</span><br><span class="line">    editable.description.constant = constant</span><br><span class="line">    <span class="keyword">return</span> editable</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@discardableResult</span></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">equalTo</span><span class="params">(<span class="number">_</span> other: ConstraintRelatableTarget, <span class="number">_</span> file: String = #file, <span class="number">_</span> line: UInt = #line)</span></span> -&gt; <span class="type">ConstraintMakerEditable</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>.relatedTo(other, relation: .<span class="built_in">equal</span>, file: file, line: line)</span><br><span class="line">  &#125;</span><br><span class="line">  ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>找到了</p><ul><li>ConstraintConstantTarget(struct)</li><li>ConstraintRelation(struct)</li><li>ConstraintAttributes(struct)</li><li>ConstraintDescription(class)</li><li>ConstraintItem(class)</li><li>ConstraintMakerEditable(class)</li></ul><h3 id="model-层数据分析"><a class="markdownIt-Anchor" href="#model-层数据分析"></a> model 层数据分析</h3><h4 id="constraintconstanttarget"><a class="markdownIt-Anchor" href="#constraintconstanttarget"></a> ConstraintConstantTarget</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typealias</span> <span class="type">LayoutAttribute</span> = <span class="type">NSLayoutConstraint</span>.<span class="type">Attribute</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">protocol</span> <span class="title">ConstraintConstantTarget</span> </span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">CGPoint</span>: <span class="title">ConstraintConstantTarget</span> </span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">CGSize</span>: <span class="title">ConstraintConstantTarget</span> </span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">ConstraintInsets</span>: <span class="title">ConstraintConstantTarget</span> </span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">NSDirectionalEdgeInsets</span> : <span class="title">ConstraintConstantTarget</span> </span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">ConstraintConstantTarget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">internal</span> <span class="function"><span class="keyword">func</span> <span class="title">constraintConstantTargetValueFor</span><span class="params">(layoutAttribute: LayoutAttribute)</span></span> -&gt; <span class="type">CGFloat</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看源码知道 <code>ConstraintConstantTarget</code> 是 autolayout 方程式中的 constant，他是这个 constant 扩展封装</p><h4 id="constraintrelation"><a class="markdownIt-Anchor" href="#constraintrelation"></a> ConstraintRelation</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">internal</span> <span class="class"><span class="keyword">enum</span> <span class="title">ConstraintRelation</span> : <span class="title">Int</span> </span>&#123; </span><br><span class="line">  <span class="keyword">case</span> <span class="built_in">equal</span> </span><br><span class="line">  <span class="keyword">case</span> lessThanOrEqual </span><br><span class="line">  <span class="keyword">case</span> greaterThanOrEqual </span><br><span class="line">  <span class="keyword">internal</span> <span class="keyword">var</span> layoutRelation: <span class="type">LayoutRelation</span> &#123; <span class="keyword">get</span> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>ConstraintRelation</code> 是 方程式中的 关系符号</p><h4 id="constraintattributes"><a class="markdownIt-Anchor" href="#constraintattributes"></a> ConstraintAttributes</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">internal</span> <span class="class"><span class="keyword">struct</span> <span class="title">ConstraintAttributes</span> : <span class="title">OptionSet</span>, <span class="title">ExpressibleByIntegerLiteral</span> </span>&#123;</span><br><span class="line">...</span><br><span class="line">  <span class="keyword">internal</span> <span class="keyword">static</span> <span class="keyword">var</span> <span class="keyword">none</span>: <span class="type">ConstraintAttributes</span> &#123; <span class="keyword">return</span> <span class="number">0</span> &#125;</span><br><span class="line">  <span class="keyword">internal</span> <span class="keyword">static</span> <span class="keyword">var</span> <span class="keyword">left</span>: <span class="type">ConstraintAttributes</span> &#123; <span class="keyword">return</span> <span class="number">1</span> &#125;</span><br><span class="line">  <span class="keyword">internal</span> <span class="keyword">static</span> <span class="keyword">var</span> top: <span class="type">ConstraintAttributes</span> &#123;  <span class="keyword">return</span> <span class="number">2</span> &#125;</span><br><span class="line">  <span class="keyword">internal</span> <span class="keyword">static</span> <span class="keyword">var</span> <span class="keyword">right</span>: <span class="type">ConstraintAttributes</span> &#123; <span class="keyword">return</span> <span class="number">4</span> &#125;</span><br><span class="line">  <span class="keyword">internal</span> <span class="keyword">static</span> <span class="keyword">var</span> bottom: <span class="type">ConstraintAttributes</span> &#123; <span class="keyword">return</span> <span class="number">8</span> &#125;</span><br><span class="line">  <span class="keyword">internal</span> <span class="keyword">static</span> <span class="keyword">var</span> leading: <span class="type">ConstraintAttributes</span> &#123; <span class="keyword">return</span> <span class="number">16</span> &#125;</span><br><span class="line">  <span class="keyword">internal</span> <span class="keyword">static</span> <span class="keyword">var</span> trailing: <span class="type">ConstraintAttributes</span> &#123; <span class="keyword">return</span> <span class="number">32</span> &#125;</span><br><span class="line">  <span class="keyword">internal</span> <span class="keyword">static</span> <span class="keyword">var</span> width: <span class="type">ConstraintAttributes</span> &#123; <span class="keyword">return</span> <span class="number">64</span> &#125;</span><br><span class="line">...</span><br><span class="line">  <span class="keyword">internal</span> <span class="keyword">var</span> layoutAttributes:[<span class="type">LayoutAttribute</span>] &#123;</span><br><span class="line">    <span class="keyword">var</span> attrs = [<span class="type">LayoutAttribute</span>]()</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.<span class="built_in">contains</span>(<span class="type">ConstraintAttributes</span>.<span class="keyword">left</span>)) &#123;</span><br><span class="line">      attrs.append(.<span class="keyword">left</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.<span class="built_in">contains</span>(<span class="type">ConstraintAttributes</span>.top)) &#123;</span><br><span class="line">      attrs.append(.top)</span><br><span class="line">    &#125;</span><br><span class="line">    ....</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> attrs</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">internal</span> <span class="function"><span class="keyword">func</span> + <span class="params">(<span class="keyword">left</span>: ConstraintAttributes, <span class="keyword">right</span>: ConstraintAttributes)</span></span> -&gt; <span class="type">ConstraintAttributes</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">left</span>.union(<span class="keyword">right</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">internal</span> <span class="function"><span class="keyword">func</span> +=<span class="params">(<span class="keyword">left</span>: <span class="keyword">inout</span> ConstraintAttributes, <span class="keyword">right</span>: ConstraintAttributes)</span></span> &#123;</span><br><span class="line">  <span class="keyword">left</span>.formUnion(<span class="keyword">right</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>ConstraintAttributes 使用了swift 的选择集(可选枚举)</li><li>重载了运算符</li><li>依然猜测 它对应 <code>NSLayoutConstraint.Attribute</code></li></ol><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ConstraintItem.swift</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ConstraintItem</span> </span>&#123;</span><br><span class="line">  <span class="keyword">internal</span> <span class="keyword">weak</span> <span class="keyword">var</span> target: <span class="type">AnyObject?</span></span><br><span class="line">  <span class="keyword">internal</span> <span class="keyword">let</span> attributes: <span class="type">ConstraintAttributes</span></span><br><span class="line">  <span class="keyword">internal</span> <span class="keyword">init</span>(target: <span class="type">AnyObject?</span>, attributes: <span class="type">ConstraintAttributes</span>)</span><br><span class="line">  <span class="keyword">internal</span> <span class="keyword">var</span> layoutConstraintItem: <span class="type">LayoutConstraintItem?</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>.target <span class="keyword">as</span>? <span class="type">LayoutConstraintItem</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> == <span class="params">(lhs: ConstraintItem, rhs: ConstraintItem)</span></span> -&gt; <span class="type">Bool</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// LayoutConstraintItem.swift</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">protocol</span> <span class="title">LayoutConstraintItem</span>: <span class="title">class</span> </span>&#123;&#125;</span><br><span class="line"><span class="meta">@available</span>(iOS <span class="number">9.0</span>, <span class="type">OSX</span> <span class="number">10.11</span>, *)</span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">ConstraintLayoutGuide</span> : <span class="title">LayoutConstraintItem</span> </span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">ConstraintView</span> : <span class="title">LayoutConstraintItem</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">typealias</span> <span class="type">ConstraintLayoutGuide</span> = <span class="type">UILayoutGuide</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">typealias</span> <span class="type">ConstraintView</span> = <span class="type">UIView</span></span><br></pre></td></tr></table></figure><p>nice~<br>ConstraintItem 就是 view 和 他对应布局属性的元组 (view, attr)</p><h4 id="constraintdescription"><a class="markdownIt-Anchor" href="#constraintdescription"></a> ConstraintDescription</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConstraintDescription</span> </span>&#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">let</span> item: <span class="type">LayoutConstraintItem</span></span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">var</span> attributes: <span class="type">ConstraintAttributes</span></span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">var</span> relation: <span class="type">ConstraintRelation?</span></span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">var</span> sourceLocation: (<span class="type">String</span>, <span class="type">UInt</span>)?</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">var</span> label: <span class="type">String?</span></span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">var</span> related: <span class="type">ConstraintItem?</span></span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">var</span> multiplier: <span class="type">ConstraintMultiplierTarget</span></span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">var</span> constant: <span class="type">ConstraintConstantTarget</span></span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">var</span> priority: <span class="type">ConstraintPriorityTarget</span></span><br><span class="line">    <span class="keyword">internal</span> <span class="built_in">lazy</span> <span class="keyword">var</span> constraint: <span class="type">SnapKit</span>.<span class="type">Constraint?</span> &#123; <span class="keyword">get</span> <span class="keyword">set</span> &#125; <span class="comment">// main</span></span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">init</span>(item: <span class="type">LayoutConstraintItem</span>, attributes: <span class="type">ConstraintAttributes</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>ConstraintDescription</code> 包含了 autolayout 布局方程式中所有信息，可是不知道为啥不在这里调用 NSLayoutConstraint 添加属性，非要搞一个 SnapKit.Constraint来做这些事</p><ul><li>ConstraintMakerEditable 是链式编程技巧里面的往后看</li></ul><h3 id="分析-snapkit-链式封装"><a class="markdownIt-Anchor" href="#分析-snapkit-链式封装"></a> 分析 <code>SnapKit</code> 链式封装</h3><h4 id="主要组件结"><a class="markdownIt-Anchor" href="#主要组件结"></a> 主要组件结</h4><ul><li>文件分组<br><img src="/img/snapkit_files.jpeg" alt="snapkit_files"></li></ul><h4 id="使用函数调用栈分析"><a class="markdownIt-Anchor" href="#使用函数调用栈分析"></a> 使用函数调用栈分析</h4><details><summary>SnapKit 主流程</summary><pres><p><img src="/img/snapKit_main_flow.jpeg" alt="snapKit main flow"><br></p></pres><p></p></details><details><summary>SnapKit 链式流程</summary><pres><p><img src="/img/snapKit_chain.jpeg" alt="snapKit chain"><br></p></pres><p></p></details><p>maker 创建一个其实节点 ContraintExtentable，他维护自己的 description<br>maker 保存 descriptions[] 数组</p><p>传递 description 来延续链节点</p><p>to be continued</p><h3 id="代码组件分析"><a class="markdownIt-Anchor" href="#代码组件分析"></a> 代码组件分析</h3><blockquote><p><a href="https://developer.apple.com/library/archive/documentation/UserExperience/Conceptual/AutolayoutPG/index.html#//apple_ref/doc/uid/TP40010853-CH7-SW1" target="_blank" rel="noopener">Auto Layout Guide</a></p></blockquote><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> 第三方框架 </category>
          
          <category> UI 布局 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> swift </tag>
            
            <tag> iOS </tag>
            
            <tag> 源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 closures 代替 Gesture Recognizers 选择器</title>
      <link href="/2020/03/08/%E4%BD%BF%E7%94%A8-closures-%E6%B7%BB%E5%8A%A0-Gesture-Recognizers/"/>
      <url>/2020/03/08/%E4%BD%BF%E7%94%A8-closures-%E6%B7%BB%E5%8A%A0-Gesture-Recognizers/</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Jun 02 2020 17:35:51 GMT+0800 (CST) --><a id="more"></a><p><a href="https://medium.com/@sdrzn/adding-gesture-recognizers-with-closures-instead-of-selectors-9fb3e09a8f0b" target="_blank" rel="noopener">原文 Adding Gesture Recognizers with Closures Instead of Selectors<br></a></p><p>添加UITapGestureRecognizer或任何 recognizer/target action 的最糟糕的部分是仅针对选择器参数实现新功能。今天，我想分享一个巧妙的技巧，让你添加不带选择器的手势识别器。</p><p>假设我们在View Controller中有一个UIImageView，我们想向其中添加一个UITapGestureRecognizer，以便在点击它时打印出一条语句.</p><p>通常，我们会创建一个 UITapGestureRecognizer 的实例，并将其目标设置为视图控制器及其选择器，因为我们会快速将它们组合在一起(myImageViewTapped(sender：UITapGestureRecognizer))。</p><p>这可能会有点多余，并且可能导致要添加交互性的每个子视图的函数的代码混乱。</p><p>我以为我可以快速扩展一下，以便为我的图像视图添加敲击手势识别器，但是然后我必须为每个识别器创建一个新功能，对吗？错误！利用关联对象的功能，我们实际上可以将闭包存储为扩展中的计算属性！</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> UIKit</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">UIView</span> </span>&#123;</span><br><span class="line">  <span class="comment">// In order to create computed properties for extensions, we need a key to </span></span><br><span class="line">  <span class="comment">// store and access the stored property</span></span><br><span class="line">  <span class="keyword">fileprivate</span> <span class="class"><span class="keyword">struct</span> <span class="title">AssociatedObjectKeys</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">var</span> tapGestureRecognizer = <span class="string">"MediaViewerAssociatedObjectKey_mediaViewer"</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">fileprivate</span> <span class="keyword">typealias</span> <span class="type">Action</span> = (() -&gt; <span class="type">Void</span>)?</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// Set our computed property type to a closure</span></span><br><span class="line">  <span class="keyword">fileprivate</span> <span class="keyword">var</span> tapGestureRecognizerAction: <span class="type">Action?</span> &#123;</span><br><span class="line">    <span class="keyword">set</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> <span class="keyword">let</span> newValue = newValue &#123;</span><br><span class="line">        <span class="comment">// Computed properties get stored as associated objects</span></span><br><span class="line">        objc_setAssociatedObject(<span class="keyword">self</span>, &amp;<span class="type">AssociatedObjectKeys</span>.tapGestureRecognizer, newValue, objc_AssociationPolicy.<span class="type">OBJC_ASSOCIATION_RETAIN</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">get</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> tapGestureRecognizerActionInstance = objc_getAssociatedObject(<span class="keyword">self</span>, &amp;<span class="type">AssociatedObjectKeys</span>.tapGestureRecognizer) <span class="keyword">as</span>? <span class="type">Action</span></span><br><span class="line">      <span class="keyword">return</span> tapGestureRecognizerActionInstance</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// This is the meat of the sauce, here we create the tap gesture recognizer and</span></span><br><span class="line">  <span class="comment">// store the closure the user passed to us in the associated object we declared above</span></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">addTapGestureRecognizer</span><span class="params">(action: <span class="params">(<span class="params">()</span></span></span></span> -&gt; <span class="type">Void</span>)?) &#123;</span><br><span class="line">    <span class="keyword">self</span>.isUserInteractionEnabled = <span class="literal">true</span></span><br><span class="line">    <span class="keyword">self</span>.tapGestureRecognizerAction = action</span><br><span class="line">    <span class="keyword">let</span> tapGestureRecognizer = <span class="type">UITapGestureRecognizer</span>(target: <span class="keyword">self</span>, action: #selector(handleTapGesture))</span><br><span class="line">    <span class="keyword">self</span>.addGestureRecognizer(tapGestureRecognizer)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// Every time the user taps on the UIImageView, this function gets called,</span></span><br><span class="line">  <span class="comment">// which triggers the closure we stored</span></span><br><span class="line">  <span class="meta">@objc</span> <span class="keyword">fileprivate</span> <span class="function"><span class="keyword">func</span> <span class="title">handleTapGesture</span><span class="params">(sender: UITapGestureRecognizer)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> action = <span class="keyword">self</span>.tapGestureRecognizerAction &#123;</span><br><span class="line">      action?()</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">"no action"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在，每当我们要将UITapGestureRecognizer添加到UIView或UIView子类（如UIImageView）时，都可以这样做，而无需为选择器创建关联的功能！这是一个例子：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sampleImageView.addTapGestureRecognizer &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"image tapped"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>没有UITapGestureRecognizers实例，没有targets，没有selectors，没有不必要的functions！</p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> iOS Programming </category>
          
          <category> objc </category>
          
          <category> runtime </category>
          
      </categories>
      
      
        <tags>
            
            <tag> swift </tag>
            
            <tag> iOS </tag>
            
            <tag> 翻译 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自定义 keyboard</title>
      <link href="/2020/02/17/%E8%87%AA%E5%AE%9A%E4%B9%89-keyboard/"/>
      <url>/2020/02/17/%E8%87%AA%E5%AE%9A%E4%B9%89-keyboard/</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Jun 02 2020 17:35:51 GMT+0800 (CST) --><a id="more"></a><p>原文：<a href="https://developer.apple.com/library/content/documentation/General/Conceptual/ExtensibilityPG/CustomKeyboard.html" target="_blank" rel="noopener">CustomKeyboard</a></p><h3 id="自定义键盘api"><a class="markdownIt-Anchor" href="#自定义键盘api"></a> 自定义键盘API</h3><p>开发自定义键盘的快速入门,如下图，它展示了键盘运行过程中一些重要的对象，以及它们在开发流程中的的位置：</p><p><img src="https://developer.apple.com/library/archive/documentation/General/Conceptual/ExtensibilityPG/Art/keyboard_architecture_2x.png" alt="keyboard"></p><p>自定义键盘模板（在iOS“Application Extension”目标模板组）包含一个UIInputViewController的子类，它是你开发的键盘的主视图控制器。该模板包含</p><p>键盘所必需的“下一个键盘”按钮的实现，它调用了UIInputViewController类的advanceToNextInputMode方法。如上图所示，可以在输入视图控制器的主视图（在其inputView属性）中添加子视图、控制器以及手势识别器等。对于其它类型的扩展应用，在目标上并不存在窗体，因此也就没有根视图控制器了。</p><p>在模板的Info.plist文件中有预先配置好的键盘所需要的最基本的值。参见其中的NSExtensionAttributes字典关键字，配置一个键盘的关键字在<a href="https://developer.apple.com/library/content/documentation/General/Conceptual/ExtensibilityPG/CustomKeyboard.html#//apple_ref/doc/uid/TP40014214-CH16-SW18" target="_blank" rel="noopener">《配置自定义键盘的Info.plist文件》</a>中有介绍。</p><p>默认，键盘不能访问网络，不能和它的app共享容器。如果要具备这种能力，必须要将Info.plist文件中RequestsOpenAccess的值置为YES。这需要扩展键盘的沙盒，在<a href="https://developer.apple.com/library/content/documentation/General/Conceptual/ExtensibilityPG/CustomKeyboard.html#//apple_ref/doc/uid/TP40014214-CH16-SW3" target="_blank" rel="noopener">《设计用户信任》</a>中有介绍相关内容。</p><p>一个输入视图控制器遵从各种与文本输入对象内容交互的协议：</p><ul><li>响应触摸消息时如果要插入或删除文本，可以使用<a href="https://developer.apple.com/reference/uikit/uikeyinput" target="_blank" rel="noopener">UIKeyInput</a>协议的insertText:和deleteBackward方法。可以在视图控制器的<a href="https://developer.apple.com/reference/uikit/uiinputviewcontroller/1618193-textdocumentproxy" target="_blank" rel="noopener">textDocumentProxy</a>属性中调用这些方法，该属性代表当前文本输入对象，它遵从<a href="https://developer.apple.com/reference/uikit/uitextdocumentproxy" target="_blank" rel="noopener">UITextDocumentProxy</a>协议。如下：</li></ul><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">self</span>.textDocumentProxy insertText:<span class="string">@"hello "</span>]; <span class="comment">// Inserts the string "hello " at the insertion point</span></span><br><span class="line">[<span class="keyword">self</span>.textDocumentProxy deleteBackward];       <span class="comment">// Deletes the character to the left of the insertion point</span></span><br><span class="line">[<span class="keyword">self</span>.textDocumentProxy insertText:<span class="string">@"\n"</span>];     <span class="comment">// In a text view, inserts a newline character at the insertion point</span></span><br></pre></td></tr></table></figure><ul><li>在调用deleteBackward之前要先决定删除的字符数。可以通过textDocumentProxy的<a href="https://developer.apple.com/reference/uikit/uitextdocumentproxy/1618190-documentcontextbeforeinput" target="_blank" rel="noopener">documentContextBeforeInput</a>属性，来获得光标附近的文本上下文信息。如下：</li></ul><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSString</span> *precedingContext = <span class="keyword">self</span>.textDocumentProxy.documentContextBeforeInput;</span><br></pre></td></tr></table></figure><ul><li>为了控制光标所在位置的操作，比如支持向前删除文字，需要调用UITextDocumentProxy协议中的<a href="https://developer.apple.com/reference/uikit/uitextdocumentproxy/1618194-adjusttextposition" target="_blank" rel="noopener">adjustTextPositionByCharacterOffset:</a>方法。比如向前删除一个字符，代码如下：</li></ul><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>) deleteForward &#123;</span><br><span class="line">    [<span class="keyword">self</span>.textDocumentProxy adjustTextPositionByCharacterOffset: <span class="number">1</span>];</span><br><span class="line">    [<span class="keyword">self</span>.textDocumentProxy deleteBackward];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>通过实现<a href="https://developer.apple.com/reference/uikit/uitextinputdelegate" target="_blank" rel="noopener">UITextInputDelegate</a>协议中的方法，可以响应当前输入文本对象的一些变化，比如内容变化以及用户触发的光标位置的变化。</li></ul><p>为了展现与当前文本输入对象适配的键盘布局，需要参照该对象的<a href="https://developer.apple.com/reference/uikit/uikeyboardtype" target="_blank" rel="noopener">UIKeyboardType</a>属性，根据每种你的键盘所能支持的属性，变化布局内容。</p><p><strong>在自定义键盘中，有两种方式来支持多语言：</strong></p><ul><li>为每个语言创建一个键盘，每个键盘都作为向容器app添加的独立的Target</li><li>创建一个多语言键盘，动态切换当前语言。可以使用UIInputViewController类的primaryLanguage属性来动态切换语言。</li></ul><p>根据你要支持的语言数量以及你想提供的用户体验，你可以从上面选择最合适的方案。</p><p>每种自定义键盘（需要RequestsOpenAccess）都可以通过UILexicon类访问自动纠错的词典。通过使用该类，并结合你自己的词典设计，可以在用户输入过程中为他提供输入建议和自动纠错。UILexicon对象包含来自如下源的单词：</p><ul><li>来自用户通讯录的人名和姓</li><li>在 设置 &gt; 通用 &gt; 键盘 &gt; 快捷方式（文本替换） 列表</li><li>通用词典</li></ul><p>你可以使用自动布局来调整你的自定义键盘主视图的高度。默认情况下，自定义键盘会根据屏幕尺寸以及设备方向，和系统键盘的尺寸保持一致。自定义键盘的宽度通常与屏幕当前宽度一致。修改自定义键盘主视图的高度约束即可修改其高度。</p><p>下面的代码展示如何定义和添加约束：</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">CGFloat</span> _expandedHeight = <span class="number">500</span>;</span><br><span class="line"><span class="built_in">NSLayoutConstraint</span> *_heightConstraint = </span><br><span class="line">    [<span class="built_in">NSLayoutConstraint</span> constraintWithItem: <span class="keyword">self</span>.view </span><br><span class="line">                                 attribute: <span class="built_in">NSLayoutAttributeHeight</span> </span><br><span class="line">                                 relatedBy: <span class="built_in">NSLayoutRelationEqual</span> </span><br><span class="line">                                    toItem: <span class="literal">nil</span> </span><br><span class="line">                                 attribute: <span class="built_in">NSLayoutAttributeNotAnAttribute</span></span><br><span class="line">                                multiplier: <span class="number">0.0</span> </span><br><span class="line">                                  constant: _expandedHeight];</span><br><span class="line">[<span class="keyword">self</span>.view addConstraint: _heightConstraint];</span><br></pre></td></tr></table></figure><h2 id="自定义键盘的开发关键"><a class="markdownIt-Anchor" href="#自定义键盘的开发关键"></a> 自定义键盘的开发关键</h2><p>自定义键盘开发有两个关键点：</p><ul><li>信任。 自定义键盘能访问用户输入的内容 ，因此在键盘和用户间建立信任非常关键。</li><li>“下一个键盘”键。 通过键盘界面必须能让用户能切换到下一个键盘。</li></ul><h3 id="为用户信任所做的设计"><a class="markdownIt-Anchor" href="#为用户信任所做的设计"></a> 为用户信任所做的设计</h3><p>作为自定义键盘的开发者，你首先应当考虑的是如何建立和维护用户信任。你要理解隐私策略的最佳实践并知道如何实现它才能很好地践行。</p><blockquote><p>注意<br>本节为你创建自定义键盘提供相关的开发手册，该手册要求尊重用户隐私。了解iOS编程要求，请阅读应用商店审核手册，iOS人机交互手册，iOS开发许可协议，请参见苹果的<a href="https://developer.apple.com/support/appstore/app-review/" target="_blank" rel="noopener">《应用审核支持》</a>，<a href="https://developer.apple.com/library/content/documentation/iPhone/Conceptual/iPhoneOSProgrammingGuide/ExpectedAppBehaviors/ExpectedAppBehaviors.html#//apple_ref/doc/uid/TP40007072-CH3-SW6" target="_blank" rel="noopener">《支持用户隐私》</a>，<a href="https://developer.apple.com/library/content/documentation/iPhone/Conceptual/iPhoneOSProgrammingGuide/Introduction/Introduction.html#//apple_ref/doc/uid/TP40007072" target="_blank" rel="noopener">《iOS应用编程指南》</a>。</p></blockquote><p>对于键盘，如下三个方面对于建立和维护用户信任至关重要：</p><ul><li>按键数据的安全。 用户希望他们的敲键会落在文档以及输入区域内，而不是上传到服务器或者用于其他不明目的。</li><li>最小化合理利用其它用户数据。 如果你的键盘还需要使用其他用户数据，例如定位服务或者通讯录，你有义务解释这给用户带来的好处是什么。</li><li>准确。 把输入事件转换成文本要求精准，这本身虽然不是一个隐私话题，但他会影响到信任：每次文字转换需要体现出你的代码的精准。</li></ul><p>在信任的开发设计过程中，首先考虑的是是否要获取open access权限。尽管开启了open access权限能给自定义键盘开发带来极大便利，但这也增加了你作为开发者的责任。下面是标准的open access的能力和隐私考虑：</p><table><thead><tr><th>Open Access</th><th>能力和限制</th><th>隐私考虑</th></tr></thead><tbody><tr><td>Off(default)</td><td>·键盘可以执行所有基本键盘的职责<br>·可以访问通用词典以支持自动纠错和输入建议<br>·访问设置里的快捷短语<br>·不与containing应用共享容器<br>·不访问键盘容器以外的文件系统<br>·不访问键盘容器以外的文件系统<br>·不能直接或间接访问iCloud或游戏中心或应用内购买</td><td>用户了解按键仅仅被发送到当前使用键盘的应用里</td></tr><tr><td>On</td><td>·具备非联网自定义键盘的所有能力<br>·在用户许可情况下可以访问位置服务和通讯录<br>·键盘和containing app可以访问共享容器<br>·键盘可以为服务器侧处理过程发送按键或其他输入事件<br>·containing app自动纠错字典提供编辑界面<br>·通过containing app键盘可以使用iCloud来保证自动纠错词典和设置的更新<br>·通过containing app，键盘可以参与到游戏中心和应用内购买<br>·如果键盘支持移动设备管理(MDM)，它可与被管理的应用共同工作</td><td>·用户了解键盘开发者会利用按键数据<br>·你必须遵守有联网能力的键盘开发手册和iOS开发许可协议，可参见《应用审核支持》</td></tr></tbody></table><p>如果你的自定义键盘不需要open access权限，系统确保敲键信息不会被发送给你的键盘以及别的地方。如果只想提供一般的键盘功能，请不要给键盘配备联网能力。由于有沙盒限制，不联网的键盘一定是满足苹果的数据隐私手册并能获得用户信任的。</p><p>开启open access权限（如上所述，可以在Info.plist文件中配置），能给你的开发带来更多可能性，同时也带来更多的责任。</p><blockquote><p>注意<br>向应用商店提交一个open-access的键盘必须遵守苹果《应用审核支持》中的相关条款。</p></blockquote><p>每一个与open access相关的功能都需要你履行相应的责任，应当最大限度地尊重用户数据，不得用于与用户输入无关的其他任何目的。下表列出了open access带来的好处以及开发者需承担的责任：</p><table><thead><tr><th>能力</th><th>用户利益示例</th><th>开发者责任</th></tr></thead><tbody><tr><td>与containing app共享容器</td><td>为键盘的自动纠错词典管理UI界面</td><td>要考虑到自动纠错数据属于用户隐私。不要把他发到你的服务器，用作与输入无关的用途。</td></tr><tr><td>把按键数据发到你的服务器</td><td>通过开发者的计算资源可以提供更好的按键处理结果和输入预测</td><td>只有为用户提供更好的输入体验之用时，才能保存按键和语音数据</td></tr><tr><td>基于云的自动纠错词典</td><td>把人名、地名、热点新闻加入到自动纠错词典中</td><td>不要把用户身份与输入数据关联起来，不得将用户信息用作与输入体验无关的其他目的</td></tr><tr><td>通讯录</td><td>把人名、地名、电话号码添加到自动纠错词典中</td><td>不得讲通讯录用作与输入体验无关的其他目的</td></tr><tr><td>位置服务</td><td>将附近的地名添加到自动纠错词典中</td><td>不要在后台使用位置服务，不得将位置信息发送到你的服务器并用于与输入体验无关的其他目的</td></tr></tbody></table><p>一个具有open-access权限的键盘和其containing app能将按键数据发送到服务器端，通过这些数据可以为用户提供更好的输入体验。如果你使用了这些能力，当不需要这些数据的时候，请及时在服务器端删除。参见上面的表格来履行你使用open-access权限中的义务。</p><h3 id="提供切换到其他键盘的方法"><a class="markdownIt-Anchor" href="#提供切换到其他键盘的方法"></a> 提供切换到其他键盘的方法</h3><p>系统键盘的小地球按键用于切换到其他键盘：<br><img src="https://developer.apple.com/library/archive/documentation/General/Conceptual/ExtensibilityPG/Art/globe_key_2x.png" alt="The system keyboard’s Globe key"></p><p>你的自定义键盘必须提供类似的机制能切换到其他键盘。</p><p>调用UIInputViewController类的<a href="https://developer.apple.com/reference/uikit/uiinputviewcontroller/1618191-advancetonextinputmode" target="_blank" rel="noopener">advanceToNextInputMode</a>方法可以切换到其他键盘。系统会选择下一个键盘，没有能获得键盘列表的API，也没有切换到指定键盘的API。</p><p>Xcode自定义键盘模板中就已经在下一个键盘按钮上具备了advanceToNextInputMode的功能。为了提供最好的用户体验，应当把你的下一个键盘按键放在靠近系统键盘的小地球键的位置。</p><blockquote><p>注意<br>要通过应用审核，必须在你的键盘上提供明显允许用户切换键盘的UI标识。</p></blockquote><h2 id="开始自定义键盘的开发"><a class="markdownIt-Anchor" href="#开始自定义键盘的开发"></a> 开始自定义键盘的开发</h2><h3 id="使用xcode自定义键盘模板"><a class="markdownIt-Anchor" href="#使用xcode自定义键盘模板"></a> 使用Xcode自定义键盘模板</h3><p>创建键盘及其containing app与其他扩展应用略有不同。本节将带你领略基本键盘的开发和运行。</p><p><strong>在一个容器app中创建键盘，步骤如下</strong></p><ol><li>在Xcode中选择File &gt; New &gt; Project &gt; iOS &gt; Application选择Single View Application模板。</li><li>点击Next。</li><li>填写Project Name（如CKIme），点击Next。</li><li>选择要保存的位置，点击Create。这样，你就有了一个空app，该app只能完成一个简单的操作，接下来它将承载键盘。在你提交到应用商店之前，你需要完成一些有用的功能。请到应用审核支持参考应用商店审核指南。</li><li>选择File &gt; New &gt; Target &gt; iOS &gt; Application Extension选择Custom Keyboard Extension，点击Next。</li><li>填写Product Name（如CKbd），点击Finish。</li><li>确认Project和Embed in Application中都显示的是容器app的名字（CKIme），点击Finish。如果弹出Activate “CKbd” scheme提示让激活键盘工程，点击Activate。</li></ol><p><strong>定义键盘group name，步骤如下：</strong></p><ol><li>在Xcode工程导航视图中，选择容器app的Info.plist文件，</li><li>在右侧plist编辑器中，鼠标hover到Bundle name上，点“+”按钮创建一行空属性。</li><li>在Key中填写Bundle display name，回车</li><li>双击该行的Value，填写你要自定义的键盘group name。</li><li>选择File &gt; Save保存设置。</li></ol><p>下表汇总了在容器app和键盘app的Info.plist文件中你可以配置的UI字符串：</p><table><thead><tr><th>iOS UI字符串</th><th>Info.plist关键字</th></tr></thead><tbody><tr><td>· 在系统设置的已购键盘列表中的键盘group name</td><td>在容器app的Info.plist文件中的Bundle display name</td></tr><tr><td>· 系统设置中的键盘名称<br>· 键盘换列表中的键盘名称</td><td>在键盘app的Info.plist文件中的Bundle display name</td></tr></tbody></table><p><strong>运行自定义键盘并将Xcode调试器attach到它上面</strong></p><ol><li>在Xcode，你的view controller实现中设置一个断点（比如可以断在viewDidLoad上）。</li><li>在Xcode工具栏确保当前活动的项目为键盘项目，并对应iOS模拟器或设备。</li><li>选择菜单Project &gt; Run，或点击Build and then run the current scheme按钮（即播放按钮）。Xcode会提示选择host app。选择一个带有输入框的，比如通讯录或Safari。</li><li>点击Run。Xcode将运行起你指定的host app。如果这是你第一次使用键盘扩展应用，需要现在设置中添加并启用键盘：<ol><li>Settings &gt; General &gt; Keyboard &gt; Keyboards</li><li>点击Add New Keyboard…</li><li>在OTHER IPHONE KEYBOARDS中点击你刚刚创建的键盘</li></ol></li><li>在iOS模拟器或真机上，调出你的自定义键盘。<br>点击任意可输入区域，将显示出系统键盘。按住小地球，选择你的自定义键盘。<br>此时你将看到自定义键盘，但是调试器尚未attach上来。一个从模板构建而来的极简键盘仅有一个Next Keyboard按钮，点击后切换回前一个键盘。</li><li>取消你的键盘（以便在第8步中你可以再次调出键盘以命中viewDidLoad断点）</li><li>在Xcode中，选择Debug &gt; Attach to Process &gt; By Process Identifier(PID) or Name 在弹出对话框中，输入你的键盘扩展应用的名字（包含空格）.默认就是该扩展应用在工程导航窗口里的group name。</li><li>点击Attach。Xcode将显示出等待attach的调试器。</li><li>在任意能输入文字的app中调出键盘。<br>当你的键盘主视图开始加载时，Xcode调试器将attache到你的键盘，并命中断点。</li></ol><h3 id="为自定义键盘配置infoplist文件"><a class="markdownIt-Anchor" href="#为自定义键盘配置infoplist文件"></a> 为自定义键盘配置Info.plist文件</h3><p>自定义键盘的Info.plist文件允许静态定义键盘的现式特征，包括主要语言，以及是否需要open access权限。</p><p>打开Xcode并切换到自定义键盘的 target。在工程导航栏选择Info.plist文件，按文本格式呈现如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>NSExtension<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dict</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>NSExtensionAttributes<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dict</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">key</span>&gt;</span>IsASCIICapable<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">false</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">key</span>&gt;</span>PrefersRightToLeft<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">false</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">key</span>&gt;</span>PrimaryLanguage<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>en-US<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">key</span>&gt;</span>RequestsOpenAccess<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">false</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dict</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>NSExtensionPointIdentifier<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span>&gt;</span>com.apple.keyboard-service<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>NSExtensionPrincipalClass<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span>&gt;</span>KeyboardViewController<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dict</span>&gt;</span></span><br></pre></td></tr></table></figure><p>每个关键字在App Extension Keys中都有解释。可以使用字典NSExtensionAttributes中的关键字来描述你的自定义键盘的特征和需求，如下：</p><p><code>IsASCIICapable</code> - 默认为NO的布尔值。用户键盘是否可以向文档中插入ASCII字串。如果要为<code>UIKeyboardTypeASCIICapable</code>属性的输入对象展现单独类型的键盘，需要将该值置为YES。</p><p><code>PrefersRightToLeft</code> - 默认为NO的布尔值。是否为从右到左的语种设计的的自定义键盘。</p><p><code>PrimaryLanguage</code> - 默认为en-US的字串。以&lt;语种&gt;-&lt;区域&gt;的形式描述键盘的主语言。可以到http://www.opensource.apple.com/source/CF/CF-476.14/CFLocaleIdentifier.c找到对应的语种和区域。</p><p><code>RequestsOpenAccess</code> - 默认为NO的布尔值。是否需要比基础键盘更大的沙盒范围。把该值置为YES将需要完全访问权限，你的键盘将获得如下能力，每个能力都伴随有相应的权限：</p><ul><li>访问定位服务，通讯录数据库，相机，每个都需要用户允许</li><li>与键盘的容器app共享容器数据，以便完成比如在容器app中管理用户词库的界面的功能</li><li>通过网络发送按键、输入事件之类的数据供云端处理</li><li>使用UIPasteboard类</li><li>播放音频，包括使用playInputClick方法播放按键音</li><li>访问iCloud，可以用来根据用户身份同步比如键盘设置、自定义自动纠错词典</li><li>通过容器app访问游戏中心和应用内购买</li><li>如果你的键盘支持移动设备管理（MDM），可以与被管理的app无缝合作</li></ul><p>当考虑是否将这些关键字设置为YES之前，一定要先阅读<a href="https://developer.apple.com/library/content/documentation/General/Conceptual/ExtensibilityPG/CustomKeyboard.html#//apple_ref/doc/uid/TP40014214-CH16-SW3" target="_blank" rel="noopener">《用户信任设计》</a>，这里描述了如何尊重和保护用户数据。</p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> iOS Programming </category>
          
          <category> AppExtensions </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> 翻译 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>runloop 实践相关</title>
      <link href="/2019/12/29/runloop/runloop-%E5%AE%9E%E8%B7%B5%E7%9B%B8%E5%85%B3/"/>
      <url>/2019/12/29/runloop/runloop-%E5%AE%9E%E8%B7%B5%E7%9B%B8%E5%85%B3/</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Jun 02 2020 17:35:52 GMT+0800 (CST) --><a id="more"></a><p>RunLoop 是系统层级上的设计，用来给管理系统消息队列派发，那我们都可以用 runLoop 做什么呢？<br>简单来说，RunLoop 是用来监听输入源，进行调度处理的。</p><p>RunLoop 输入源可以是：</p><ul><li>输入设备</li><li>网络</li><li>周期性或者延迟时间</li><li>异步回调</li></ul><p><img src="/img/runloop_core.jpeg" alt="runloop activities"></p><p>runloop 的 observer 可以监听的 7中状态</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">CF_OPTIONS</span><span class="params">(CFOptionFlags, CFRunLoopActivity)</span> </span>&#123;</span><br><span class="line">  kCFRunLoopEntry ,         <span class="comment">// 进入 loop</span></span><br><span class="line">  kCFRunLoopBeforeTimers ,  <span class="comment">// 触发 Timer 之前</span></span><br><span class="line">  kCFRunLoopBeforeSources , <span class="comment">// 触发 Source0 之前</span></span><br><span class="line">  kCFRunLoopBeforeWaiting , <span class="comment">// 等待 mach_port 消息（等待源Source和计时器Timer之前，进入睡眠）</span></span><br><span class="line">  <span class="comment">// 在这两个状态中真正处理事件</span></span><br><span class="line">  kCFRunLoopAfterWaiting ), <span class="comment">// 接收 mach_port 消息（等待源Source和计时器Timer后，同时在被唤醒之前）</span></span><br><span class="line">  kCFRunLoopExit , <span class="comment">// 退出 loop</span></span><br><span class="line">  kCFRunLoopAllActivities  <span class="comment">// loop 所有状态改变</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="检测-ios-app-卡顿"><a class="markdownIt-Anchor" href="#检测-ios-app-卡顿"></a> 检测 iOS App 卡顿</h2><h3 id="思路分析"><a class="markdownIt-Anchor" href="#思路分析"></a> 思路分析</h3><h4 id="卡顿如何造成的"><a class="markdownIt-Anchor" href="#卡顿如何造成的"></a> 卡顿如何造成的</h4><p>iOS系统页面刷新频率：60 FPS，60次/s, <code>let refresh_time_per = 1s/60 &lt; 0.02</code><br>如果在 <code>refresh_time_per</code> 时间内没有完成图片绘制，那么就会出现卡顿现象！<br>而系统页面刷新事件处理…… 事件几乎都是由 runloop 调用执行的。<br>那么如果 runloop 一次循环时间 &gt; <code>refresh_time_per</code> 就说明图片没有渲染完成，导致卡顿。</p><p>问题来了，如何判断 runloop 一次循环时间 &gt; <code>refresh_time_per</code> 呢？</p><p>RunLoop 的线程，进入睡眠前方法的执行时间过长而导致无法进入睡眠，或者线程唤醒后接收消息时间过长而无法进入下一步的话，就可以认为是线程受阻了。如果这个线程是主线程的话，表现出来的就是出现了卡顿。</p><p>所以要利用 RunLoop 原理来监控卡顿的话，就是要关注这两个阶段。<br>RunLoop 的两个 loop 状态<br>在进入睡眠之前: kCFRunLoopBeforeSources<br>在进入唤醒之后: kCFRunLoopAfterWaiting<br>也就是要触发 Source0 回调和接收 mach_port 消息两个状态。</p><details><summary>runloop 核心源码</summary><pre><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// while</span></span><br><span class="line"><span class="comment">// 2. 通知 Observers: RunLoop 即将触发 Timer 回调。</span></span><br><span class="line">__CFRunLoopDoObservers(runloop, currentMode, kCFRunLoopBeforeTimers);</span><br><span class="line"><span class="comment">// 3. 通知 Observers: RunLoop 即将触发 Source0 (非port) 回调。</span></span><br><span class="line">__CFRunLoopDoObservers(runloop, currentMode, kCFRunLoopBeforeSources);</span><br><span class="line"><span class="comment">// 执行被加入的block</span></span><br><span class="line">__CFRunLoopDoBlocks(runloop, currentMode);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. RunLoop 触发 Source0 (非port) 回调。</span></span><br><span class="line">sourceHandledThisLoop = __CFRunLoopDoSources0(runloop, currentMode, stopAfterHandle);</span><br><span class="line"><span class="comment">// 执行被加入的block</span></span><br><span class="line">__CFRunLoopDoBlocks(runloop, currentMode);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5. 如果有 Source1 (基于port) 处于 ready 状态，直接处理这个 Source1 然后跳转去处理消息。</span></span><br><span class="line"><span class="keyword">if</span> (__Source0DidDispatchPortLastTime) &#123;</span><br><span class="line">  Boolean hasMsg = __CFRunLoopServiceMachPort(dispatchPort, &amp;msg)</span><br><span class="line">  <span class="keyword">if</span> (hasMsg) <span class="keyword">goto</span> handle_msg;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通知 Observers: RunLoop 的线程即将进入休眠(sleep)。</span></span><br><span class="line"><span class="keyword">if</span> (!sourceHandledThisLoop) &#123;</span><br><span class="line">  __CFRunLoopDoObservers(runloop, currentMode, kCFRunLoopBeforeWaiting);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 7. 调用 mach_msg 等待接受 mach_port 的消息。线程将进入休眠, 直到被下面某一个事件唤醒。</span></span><br><span class="line"><span class="comment">// • 一个基于 port 的Source 的事件。</span></span><br><span class="line"><span class="comment">// • 一个 Timer 到时间了</span></span><br><span class="line"><span class="comment">// • RunLoop 自身的超时时间到了</span></span><br><span class="line"><span class="comment">// • 被其他什么调用者手动唤醒</span></span><br><span class="line">__CFRunLoopServiceMachPort(waitSet, &amp;msg, <span class="keyword">sizeof</span>(msg_buffer), &amp;livePort) &#123;</span><br><span class="line">  mach_msg(msg, MACH_RCV_MSG, port); <span class="comment">// thread wait for receive msg</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 8. 通知 Observers: RunLoop 的线程刚刚被唤醒了。</span></span><br><span class="line">__CFRunLoopDoObservers(runloop, currentMode, kCFRunLoopAfterWaiting);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 收到消息，处理消息。</span></span><br><span class="line">handle_msg:</span><br><span class="line">      <span class="comment">// 9.1 如果一个 Timer 到时间了，触发这个Timer的回调。</span></span><br><span class="line"><span class="keyword">if</span> (msg_is_timer) &#123;</span><br><span class="line">  __CFRunLoopDoTimers(runloop, currentMode, mach_absolute_time())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 9.2 如果有dispatch到main_queue的block，执行block。</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (msg_is_dispatch) &#123;</span><br><span class="line">  __CFRUNLOOP_IS_SERVICING_THE_MAIN_DISPATCH_QUEUE__(msg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 9.3 如果一个 Source1 (基于port) 发出事件了，处理这个事件</span></span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">  CFRunLoopSourceRef source1 = __CFRunLoopModeFindSourceForMachPort(runloop, currentMode, livePort);</span><br><span class="line">  sourceHandledThisLoop = __CFRunLoopDoSource1(runloop, currentMode, source1, msg);</span><br><span class="line">  <span class="keyword">if</span> (sourceHandledThisLoop) &#123;</span><br><span class="line">    mach_msg(reply, MACH_SEND_MSG, reply);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  退出 runloop 逻辑 retVal != 0 exit</span></span><br><span class="line"><span class="keyword">if</span> (sourceHandledThisLoop &amp;&amp; stopAfterHandle) &#123;</span><br><span class="line">  <span class="comment">// 进入loop时参数说处理完事件就返回。</span></span><br><span class="line">  retVal = kCFRunLoopRunHandledSource;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (timeout) &#123;</span><br><span class="line">  <span class="comment">// 超出传入参数标记的超时时间了</span></span><br><span class="line">  retVal = kCFRunLoopRunTimedOut;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (__CFRunLoopIsStopped(runloop)) &#123;</span><br><span class="line">  <span class="comment">// 被外部调用者强制停止了</span></span><br><span class="line">  retVal = kCFRunLoopRunStopped;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (__CFRunLoopModeIsEmpty(runloop, currentMode)) &#123;</span><br><span class="line">  <span class="comment">// source/timer/observer一个都没有了</span></span><br><span class="line">  retVal = kCFRunLoopRunFinished;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></pre></details><h3 id="卡顿监听实践"><a class="markdownIt-Anchor" href="#卡顿监听实践"></a> 卡顿监听实践</h3><ol><li>创建 runloop 的observer对象:</li></ol><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> weakSelf = <span class="type">Unmanaged</span>&lt;<span class="type">Monitor</span>&gt;.passUnretained(<span class="keyword">self</span>).toOpaque()</span><br><span class="line"><span class="keyword">var</span> ctx: <span class="type">CFRunLoopObserverContext</span> = <span class="type">CFRunLoopObserverContext</span>(version: <span class="number">0</span>, weakSelf: info, retain: <span class="literal">nil</span>, release: <span class="literal">nil</span>, copyDescription: <span class="literal">nil</span>)</span><br><span class="line"><span class="keyword">self</span>.runLoopObserver = <span class="type">CFRunLoopObserverCreate</span>(kCFAllocatorDefault, <span class="type">CFRunLoopActivity</span>.allActivities.rawValue, <span class="literal">true</span>, <span class="number">0</span>, runLoopCallBack(), &amp;ctx)</span><br></pre></td></tr></table></figure><ol start="2"><li>将 observer 添加到 runloop 的 commonModes 中</li></ol><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">CFRunLoopAddObserver</span>(<span class="type">CFRunLoopGetCurrent</span>(), <span class="keyword">self</span>.runLoopObserver, <span class="type">CFRunLoopMode</span>.commonModes)</span><br></pre></td></tr></table></figure><ol start="3"><li>创建子线程，监听runloop的状态<ul><li>beforeSources: 进入睡眠前</li><li>afterWaiting: 唤醒后的状态</li><li>设置卡顿阀值</li><li>打印堆栈信息</li></ul></li></ol><p>为什么要监听 beforeSources 和 afterWaiting 这两个状态呢？<br>因为只有这两个状态 runloop 触发事件回调，如果runloop 长时间处于这两个状态中说明卡顿！</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">DispatchQueue</span>.global().async &#123;</span><br><span class="line">  <span class="keyword">while</span> <span class="literal">true</span> &#123;</span><br><span class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> sem = <span class="keyword">self</span>.dispatchSemaphore?.wait(timeout: <span class="type">DispatchTime</span>.now() + <span class="number">1</span> / <span class="number">50</span>) <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">case</span> <span class="type">DispatchTimeoutResult</span>.timedOut = sem &#123;</span><br><span class="line">      <span class="keyword">guard</span> <span class="keyword">let</span> <span class="number">_</span> = <span class="keyword">self</span>.runLoopObserver <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">self</span>.dispatchSemaphore = <span class="literal">nil</span></span><br><span class="line">        <span class="keyword">self</span>.runLoopActivity = <span class="literal">nil</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">self</span>.runLoopActivity == <span class="type">CFRunLoopActivity</span>.beforeSources || <span class="keyword">self</span>.runLoopActivity == <span class="type">CFRunLoopActivity</span>.afterWaiting) &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"symbo: \(Thread.callStackSymbols)"</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"打印卡顿堆栈..."</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="如何获取卡顿的方法堆栈信息"><a class="markdownIt-Anchor" href="#如何获取卡顿的方法堆栈信息"></a> 如何获取卡顿的方法堆栈信息？</h3><h4 id="直接调用系统函数获取"><a class="markdownIt-Anchor" href="#直接调用系统函数获取"></a> 直接调用系统函数获取</h4><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> s_fatal_signals[] = &#123;</span><br><span class="line">  SIGABRT,</span><br><span class="line">  SIGBUS,</span><br><span class="line">  SIGFPE,</span><br><span class="line">  SIGILL,</span><br><span class="line">  SIGSEGV,</span><br><span class="line">  SIGTRAP,</span><br><span class="line">  SIGTERM,</span><br><span class="line">  SIGKILL,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> s_fatal_signal_num = <span class="keyword">sizeof</span>(s_fatal_signals) / <span class="keyword">sizeof</span>(s_fatal_signals[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> UncaughtExceptionHandler(<span class="built_in">NSException</span> *exception) &#123;</span><br><span class="line">  <span class="built_in">NSArray</span> *exceptionArray = [exception callStackSymbols]; <span class="comment">// 得到当前调用栈信息</span></span><br><span class="line">  <span class="built_in">NSString</span> *exceptionReason = [exception reason];     <span class="comment">// 非常重要，就是崩溃的原因</span></span><br><span class="line">  <span class="built_in">NSString</span> *exceptionName = [exception name];       <span class="comment">// 异常类型</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">void</span> SignalHandler(<span class="keyword">int</span> code) &#123;</span><br><span class="line">  <span class="built_in">NSLog</span>(<span class="string">@"signal handler = %d"</span>,code);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">void</span> InitCrashReport() &#123;</span><br><span class="line">  <span class="comment">// 系统错误信号捕获</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s_fatal_signal_num; ++i) &#123;</span><br><span class="line">    signal(s_fatal_signals[i], SignalHandler);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//oc 未捕获异常的捕获</span></span><br><span class="line">  <span class="built_in">NSSetUncaughtExceptionHandler</span>(&amp;UncaughtExceptionHandler);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> main(<span class="keyword">int</span> argc, <span class="keyword">char</span> * argv[]) &#123;</span><br><span class="line">  <span class="keyword">@autoreleasepool</span> &#123;</span><br><span class="line">    InitCrashReport();</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">UIApplicationMain</span>(argc, argv, <span class="literal">nil</span>, <span class="built_in">NSStringFromClass</span>([AppDelegate <span class="keyword">class</span>]));</span><br></pre></td></tr></table></figure><h4 id="第三方库来获取堆栈信息"><a class="markdownIt-Anchor" href="#第三方库来获取堆栈信息"></a> 第三方库来获取堆栈信息</h4><p><a href="https://opensource.plausible.coop/src/projects/PLCR/repos/plcrashreporter/browse" target="_blank" rel="noopener">PLCrashReporter</a></p><h2 id="利用runloop空闲时间"><a class="markdownIt-Anchor" href="#利用runloop空闲时间"></a> 利用RunLoop空闲时间</h2><p>卡顿是因为 runloop 一次时间 &gt; 1/60s<br>那么如果 runloop 一次运行时间 &lt; 1/60s 呢？<br>譬如你把手机放在那看着 app，runloop 在那睡觉(<code>kCFRunLoopBeforeWaiting</code>)</p><p>这个时候往 runloop 里面放个 source or timer，runloop 就会醒来 进入 <code>kCFRunLoopAfterWaiting</code> 状态</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typealias</span> <span class="type">BeforeWaitingDo</span> = () -&gt; ()</span><br><span class="line"><span class="keyword">var</span> tasks: [<span class="type">BeforeWaitingDo</span>] = []</span><br><span class="line"></span><br><span class="line"><span class="meta">@objc</span> <span class="function"><span class="keyword">func</span> <span class="title">exec</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="keyword">let</span> t = <span class="keyword">self</span>.tasks.remove(at: <span class="number">0</span>)</span><br><span class="line">  t()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">registerObserver</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="keyword">let</span> rl = <span class="type">CFRunLoopGetCurrent</span>()</span><br><span class="line">  <span class="keyword">let</span> observer = <span class="type">CFRunLoopObserverCreateWithHandler</span>(kCFAllocatorDefault, <span class="type">CFRunLoopActivity</span>.beforeWaiting.rawValue, <span class="literal">true</span>, <span class="number">0</span>) &#123;[<span class="keyword">weak</span> <span class="keyword">self</span>] (observer, actives) <span class="keyword">in</span></span><br><span class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> <span class="keyword">self</span> = <span class="keyword">self</span>,</span><br><span class="line">    <span class="keyword">let</span> <span class="number">_</span> = <span class="keyword">self</span>.tasks.first <span class="keyword">else</span> &#123;<span class="keyword">return</span>&#125;</span><br><span class="line">    <span class="comment">// 创建一个 source0 把 runloop 被叫醒</span></span><br><span class="line">    <span class="keyword">self</span>.perform(#selector(<span class="type">ChatEmojiViewController</span>.exec), on: <span class="type">Thread</span>.current, with: <span class="literal">nil</span>, waitUntilDone: <span class="literal">false</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="type">CFRunLoopAddObserver</span>(rl, observer, <span class="type">CFRunLoopMode</span>.commonModes)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><a href="https://links.jianshu.com/go?to=https%3A%2F%2Ftime.geekbang.org%2Fcolumn%2Fintro%2F161%3Fcode%3DQjb1JtJcvAPISj9QjxdKrAmeXmURMroQbkOcLNm0jeY%253D%26from%3Dsinglemessage%26isappinstalled%3D0" target="_blank" rel="noopener">《iOS开发高手课》</a><br><a href="https://www.jianshu.com/p/632d7a1526e9" target="_blank" rel="noopener">iOS 性能监控（二）—— 主线程卡顿监控</a><br><a href="https://blog.sunnyxx.com/2015/05/17/cell-height-calculation/" target="_blank" rel="noopener">优化UITableViewCell高度计算的那些事</a></p></blockquote><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> iOS Programming </category>
          
          <category> runloop </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> 底层 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>调试内存不足问题：使用运行时魔法捕获布局反馈循环</title>
      <link href="/2019/12/01/performance/%E8%B0%83%E8%AF%95%E5%86%85%E5%AD%98%E4%B8%8D%E8%B6%B3%E9%97%AE%E9%A2%98%EF%BC%9A%E4%BD%BF%E7%94%A8%E8%BF%90%E8%A1%8C%E6%97%B6%E9%AD%94%E6%B3%95%E6%8D%95%E8%8E%B7%E5%B8%83%E5%B1%80%E5%8F%8D%E9%A6%88%E5%BE%AA%E7%8E%AF/"/>
      <url>/2019/12/01/performance/%E8%B0%83%E8%AF%95%E5%86%85%E5%AD%98%E4%B8%8D%E8%B6%B3%E9%97%AE%E9%A2%98%EF%BC%9A%E4%BD%BF%E7%94%A8%E8%BF%90%E8%A1%8C%E6%97%B6%E9%AD%94%E6%B3%95%E6%8D%95%E8%8E%B7%E5%B8%83%E5%B1%80%E5%8F%8D%E9%A6%88%E5%BE%AA%E7%8E%AF/</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Jun 02 2020 17:35:52 GMT+0800 (CST) --><a id="more"></a><p>目标：<br>使用代码替代 <code>UIViewLayoutFeedbackLoopDebuggingThreshold</code> 符号调试，来捕获 Autolayout反馈循环所导致的内存不足问题。</p><h2 id="导致内存不足的原因"><a class="markdownIt-Anchor" href="#导致内存不足的原因"></a> 导致内存不足的原因</h2><p>如果 App，开始有大量日活用户并且崩溃率很低，但是过段时间，总会出现崩溃问题，检查 Fabric 也没啥用。</p><p>出现这种情况很可能是因为，内存不足，导致应用被系统终止。</p><p>导致内存不足的原因：</p><ul><li>循环引用;</li><li>竞争条件;</li><li>废弃的线程;</li><li>死锁;</li><li>布局反馈循环。</li></ul><p>Apple 提供了很多方法来解决这类问题：</p><ul><li>Instruments 里的 Allocations 和 Leaks 工具用于解决循环引用和 <a href="https://developer.apple.com/videos/play/wwdc2015/230/" target="_blank" rel="noopener">其他类型的泄漏</a></li><li>在 Xcode 8 中引入的 <a href="https://developer.apple.com/videos/play/wwdc2016/410/" target="_blank" rel="noopener">Memory Debugger</a> 代替了 Allocations 和 Leaks 的一部分功能</li><li><a href="https://developer.apple.com/videos/play/wwdc2016/412/" target="_blank" rel="noopener">Thread Sanitizer</a> 帮助你找到竞争条件、废弃的线程或者死锁</li></ul><h2 id="布局反馈循环"><a class="markdownIt-Anchor" href="#布局反馈循环"></a> 布局反馈循环</h2><blockquote><p>当视图正在运行它们的布局代码，但某种方法导致它们再一次开始布局传递，此时布局反馈循环就会出现。这可能是因为某个视图正在改变某个父视图的大小，或者因为你有一个模棱两可的布局。无论哪种原因，这个问题的表现是你的 CPU 使用被占满和 RAM 使用量稳步上升，因为你的视图正在一次又一次地运行它们的布局代码，却没有返回。<br>-来自<a href="https://www.hackingwithswift.com/articles/59/debugging-auto-layout-feedback-loops" target="_blank" rel="noopener">HackingWithSwift 的 Paul Hudson</a></p></blockquote><p>在 WWDC 16 中 Apple 介绍了“布局反馈循环调试器”。这个调试器有助于识别在调试过程中发生循环的时间点。这就是一个符号断点，它的工作方式非常简单：它会计算在单个 run loop 迭代中调用每个视图上的 <font color="red">layoutSubviews()</font> 方法的次数。一旦这个计数值超过某个临界值（比如，100），这个应用程序将会停在这个断点并打印出日志。<a href="https://www.hackingwithswift.com/articles/59/debugging-auto-layout-feedback-loops" target="_blank" rel="noopener">这篇文章</a> 快速地介绍如何使用这个调试器。</p><p>这个方法在可以重现问题的情况下十分有效。但是在线上出现就不用容易调试。但是你可以尝试把 <font color="red">UIViewLayoutFeedbackLoopDebuggingThreshold</font> 的代码复制到生产代码中。</p><h3 id="如何用代码实现-uiviewlayoutfeedbackloopdebuggingthreshold-的功能呢"><a class="markdownIt-Anchor" href="#如何用代码实现-uiviewlayoutfeedbackloopdebuggingthreshold-的功能呢"></a> 如何用代码实现 UIViewLayoutFeedbackLoopDebuggingThreshold 的功能呢</h3><p>符号断点是如何工作的：它会计算 layoutSubviews() 的调用次数并在单个 run loop 迭代中超过某个临界值时发送一个事件。听起来很简单，对吧？</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TrackableView</span>: <span class="title">UIView</span> </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> counter: <span class="type">Int</span> = <span class="number">0</span></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">layoutSubviews</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">super</span>.layoutSubviews()</span><br><span class="line">    counter += <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (counter == <span class="number">100</span>) &#123;</span><br><span class="line">      <span class="type">YourAnalyticsFramework</span>.event(name: <span class="string">"loop"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>对于一个视图，这段代码运行正常。</li><li>但是现在你想要在另一个视图上实现它。当然，你可以创建一个 UIView 的子类，在这里实现它并使你项目中的所有视图都继承这个子类。</li><li>然后为 UITableView，UIScrollView，UIStackView 等做同样的事情。</li></ol><p>如果将此逻辑注入你想要的任何类，而无需编写大量重复的代码。这时候就可以 <code>借助运行时编程</code> 了。</p><h3 id="使用-runtime-实现子类"><a class="markdownIt-Anchor" href="#使用-runtime-实现子类"></a> 使用 runtime 实现子类</h3><p>我们会做同样的事情——创建一个子类，重写 layoutSubviews() 方法并计算其调用次数。唯一的区别是所有这些都使用 runtime 完成，而不是在项目中创建重复的类。</p><p><strong>创建自定义子类</strong>，并将原始视图的类更改为新的子类：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LayoutLoopHunter</span> </span>&#123;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">RuntimeConstants</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">let</span> <span class="type">Prefix</span> = “runtime”</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">setUp</span><span class="params">(<span class="keyword">for</span> view: UIView, threshold: Int = <span class="number">100</span>, onLoop: @escaping <span class="params">()</span></span></span> -&gt; ()) &#123;</span><br><span class="line">    <span class="comment">// 我们根据功能的前缀和原始类名为新类创建名称。</span></span><br><span class="line">    <span class="keyword">let</span> classFullName = “\(<span class="type">RuntimeConstants</span>.<span class="type">Prefix</span>)<span class="number">_</span>\(<span class="type">String</span>(describing: view.<span class="keyword">self</span>))”</span><br><span class="line">    <span class="keyword">let</span> originalClass = type(of: view)</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> trackableClass = objc_allocateClassPair(originalClass, classFullName, <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="comment">// 在当前运行时会话期间尚未创建此类。</span></span><br><span class="line">      <span class="comment">// 注册这个类，并且用原始视图的类来和它交换。</span></span><br><span class="line">      objc_registerClassPair(trackableClass)</span><br><span class="line">      object_setClass(view, trackableClass)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> <span class="keyword">let</span> trackableClass = <span class="type">NSClassFromString</span>(classFullName) &#123;</span><br><span class="line">      <span class="comment">// 我们之前在此运行时会话中分配了一个具有相同名称的类。</span></span><br><span class="line">      <span class="comment">// 我们可以从原始字符串中获取它，并以相同的方式与我们的视图交换。</span></span><br><span class="line">      object_setClass(view, trackableClass)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>objc_allocateClassPair() 方法的文档告诉我们这个方法何时失败：</li></ol><blockquote><p>新类，或者如果无法创建类，则为 Nil （例如，所需名称已被使用）。</p></blockquote><p>这就意味着不能拥有两个同名的类。我们的策略是为单个视图类创建一个单独的运行时类。这就是我们在原始类名前加上前缀来形成新类的名称的原因。</p><ol start="2"><li>现在添加一个计数器到子类中。理论上，有两种方法可以做到这一点。</li><li>添加一个保存计数器的属性。</li><li>为这个类创建一个关联对象（Associated object）。</li></ol><p>但是目前，只有一个方法奏效。你可以想象属性是存储在分配给类的内存里的东西，然而关联对象则储存在一个完全不同的地方。因为分配给已存在对象的内存是固定的，所以我们<font color="red">在自定义类上新添加的属性将会从其他资源里“窃取”内存</font>。它可能导致意料之外的行为和难以调试的程序崩溃（点击 <a href="https://stackoverflow.com/questions/3346427/object-setclass-to-bigger-class" target="_blank" rel="noopener">这里</a> 查看更多信息）。但是在使用关联对象的情况下，它们将会存储在运行时创建的一个哈希表里，这是完全安全的。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">var</span> <span class="type">CounterKey</span> = <span class="string">"_counter"</span></span><br><span class="line">...</span><br><span class="line">objc_setAssociatedObject(trackableClass, &amp;<span class="type">RuntimeConstants</span>.<span class="type">CounterKey</span>, <span class="number">0</span>, .<span class="type">OBJC_ASSOCIATION_RETAIN_NONATOMIC</span>)</span><br></pre></td></tr></table></figure><p>当新的子类被创建时，计数器初值设置为 0。</p><p><strong>实现这个新的layoutSubviews() 方法，并将它添加到我们的类中</strong>：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> layoutSubviews: <span class="meta">@convention</span>(block) (<span class="type">Any?</span>) -&gt; () = &#123; nullableSelf <span class="keyword">in</span></span><br><span class="line">  <span class="keyword">guard</span> <span class="keyword">let</span> _self = nullableSelf <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</span><br><span class="line">  <span class="keyword">if</span> <span class="keyword">let</span> counter = objc_getAssociatedObject(_self, &amp;<span class="type">RuntimeConstants</span>.<span class="type">CounterKey</span>) <span class="keyword">as</span>? <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> counter == threshold &#123;</span><br><span class="line">      onLoop()</span><br><span class="line">    &#125;</span><br><span class="line">    objc_setAssociatedObject(trackableClass, &amp;<span class="type">RuntimeConstants</span>.<span class="type">CounterKey</span>, counter+<span class="number">1</span>, .<span class="type">OBJC_ASSOCIATION_RETAIN_NONATOMIC</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> implementation = imp_implementationWithBlock(layoutSubviews)</span><br><span class="line">class_addMethod(trackableClass, #selector(originalClass.layoutSubviews), implementation, <span class="string">"v@:"</span>)</span><br></pre></td></tr></table></figure><p>为了理解上面这段代码实际上在干什么，让我们看一下这个来自 &lt;objc/runtime.h&gt; 的结构体：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">objc_method</span> </span>&#123;</span><br><span class="line">  <span class="type">SEL</span> method_name;</span><br><span class="line">  char *method_types;</span><br><span class="line">  <span class="type">IMP</span> method_imp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法实际上是由什么组成的：</p><ul><li>方法的实现 method_imp，这是调用方法时要执行的实际函数。它的前两个形参总是方法接收者和消息选择器。</li><li>包含方法签名的方法类型字符串 method_types。你可以在 <a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Articles/ocrtTypeEncodings.html" target="_blank" rel="noopener">这里</a> 详细了解其格式。但是在现在的情况下，需要明确说明的字符串是 “v@:”。作为返回类型，v 代表 void，而 @ 和 : 分别代表接收者和消息选择器。</li><li>选择器 method_name 作为键，用于在运行时查找方法的实现。</li></ul><p>你可以把 Witness Table（在其他编程语言中，它也被称作方法派发表）想象成一个简单的字典数据结构。那么选择器为键，且实现部分则为对应的值。<br>在下面这行代码中:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">class_addMethod(trackableClass,#selector(originalClass.layoutSubviews), implementation, <span class="string">"v@:"</span>)</span><br></pre></td></tr></table></figure><p>我们所做的是给 layoutSubviews() 方法对应的键分配新值。</p><p>这个方法直截了当。我们获得这个计数器，使它的计数值加一。如果计数值超过临界值，我们会发送分析事件，其中包含类名和想要的任何数据体。</p><p>让我们回顾一下如何对关联对象实现和使用键：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">var</span> <span class="type">CounterKey</span> = “_counter”</span><br><span class="line">...</span><br><span class="line"> </span><br><span class="line">objc_setAssociatedObject(trackableClass, &amp;<span class="type">RuntimeConstants</span>.<span class="type">CounterKey</span>, counter+<span class="number">1</span>, .<span class="type">OBJC_ASSOCIATION_RETAIN_NONATOMIC</span>)</span><br></pre></td></tr></table></figure><p>为什么我们使用 var 来修饰计数器的键这个静态属性并在传递到其他地方时使用引用？答案隐藏在 Swift 语言基础——字符串之中。字符串像其他所有的值类型一样，是按值传递的。那么，当你把它传入这个闭包时，这个字符串将会被复制到一个不同的地址，这会导致在关联对象表中产生一个完全不同的键。&amp; 符号总是保证将相同的地址作为键参数的值。你可以尝试以下代码：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printAddress</span><span class="params">(<span class="number">_</span> string: UnsafeRawPointer)</span></span> &#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">"\(string)"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">"test"</span></span><br><span class="line"></span><br><span class="line">printAddress(str)</span><br><span class="line">printAddress(str)</span><br><span class="line"><span class="keyword">let</span> closure = &#123;</span><br><span class="line">  printAddress(str)</span><br><span class="line">  printAddress(str)</span><br><span class="line">&#125;</span><br><span class="line">closure()</span><br><span class="line"><span class="comment">// 最后两个函数调用的地址将始终不同</span></span><br></pre></td></tr></table></figure><p>用引用的方式来传递键的主意总是好的，因为有时，即使你没有使用闭包，变量的地址仍可能因内存管理而更改。在我们例子中，如果你把上面的代码运行多次，即使是前两个 printAddress() 的调用也可能会输出不同的地址。</p><p>让我们回到运行时的魔法里来。在新 layoutSubviews() 的实现里，还有一件很重要的事情没有完成。这件事是每次重写父类的方法时通常都会做的事情——调用父类实现。layoutSubviews() 的文档里提到：</p><blockquote><p>在 iOS 5.1 及更早版本中，这个方法的默认实现不执行任何操作。而之后的默认实现会使用你设置的任何约束来确定任何子视图的大小和位置。</p></blockquote><p>为了避免发生一些难以预料的布局行为，我们得调用父类的实现，但这不像平常那样简单明了：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> selector = #selector(originalClass.layoutSubviews)</span><br><span class="line"><span class="keyword">let</span> originalImpl = class_getMethodImplementation(originalClass, selector)</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="comment">// @convention(c) 告知 Swift 这是一个裸函数指针（没有上下文对象）</span></span><br><span class="line"><span class="comment">// 所有的 Obj-C 方法函数把接收者和消息当作前两个参数</span></span><br><span class="line"><span class="comment">// 所以这意味着一个类型为 `() -&gt; Void` 的方法，这与 `layoutSubview` 方法相符</span></span><br><span class="line"><span class="keyword">typealias</span> <span class="type">ObjCVoidVoidFn</span> = <span class="meta">@convention</span>(<span class="built_in">c</span>) (<span class="type">Any</span>, <span class="type">Selector</span>) -&gt; <span class="type">Void</span></span><br><span class="line"><span class="keyword">let</span> originalLayoutSubviews = <span class="built_in">unsafeBitCast</span>(originalImpl, to: <span class="type">ObjCVoidVoidFn</span>.<span class="keyword">self</span>)</span><br><span class="line">originalLayoutSubviews(view, selector)</span><br></pre></td></tr></table></figure><p>这里实际发生的是：我们检索方法所需的实现部分，并直接从代码中调用它，而不是用常见的方式来调用方法（即执行一个会在 Witness Table 中寻找对应实现的选择器）。</p><p>目前为止，让我们看看实现部分：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">setUp</span><span class="params">(<span class="keyword">for</span> view: UIView, threshold: Int = <span class="number">100</span>, onLoop: @escaping <span class="params">()</span></span></span> -&gt; ()) &#123;</span><br><span class="line">  <span class="comment">// 我们根据功能的前缀和原始类名为新类创建名称</span></span><br><span class="line">  <span class="keyword">let</span> classFullName = “\(<span class="type">RuntimeConstants</span>.<span class="type">Prefix</span>)<span class="number">_</span>\(<span class="type">String</span>(describing: view.<span class="keyword">self</span>))”</span><br><span class="line">  <span class="keyword">let</span> originalClass = type(of: view)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> <span class="keyword">let</span> trackableClass = objc_allocateClassPair(originalClass, classFullName, <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">// 在当前运行时会话期间尚未创建此类</span></span><br><span class="line">    <span class="comment">// 注册这个类并将其与原始视图的类交换</span></span><br><span class="line">    objc_registerClassPair(trackableClass)</span><br><span class="line">    object_setClass(view, trackableClass)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 现在可以创建关联对象</span></span><br><span class="line">    objc_setAssociatedObject(view, &amp;<span class="type">RuntimeConstants</span>.<span class="type">CounterKey</span>, <span class="number">0</span>, .<span class="type">OBJC_ASSOCIATION_RETAIN_NONATOMIC</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加我们自己 layoutSubviews 的实现</span></span><br><span class="line">    <span class="keyword">let</span> layoutSubviews: <span class="meta">@convention</span>(block) (<span class="type">Any?</span>) -&gt; () = &#123; nullableSelf <span class="keyword">in</span></span><br><span class="line">      <span class="keyword">guard</span> <span class="keyword">let</span> _self = nullableSelf <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">let</span> selector = #selector(originalClass.layoutSubviews)</span><br><span class="line">      <span class="keyword">let</span> originalImpl = class_getMethodImplementation(originalClass, selector)</span><br><span class="line"></span><br><span class="line">      <span class="comment">// @convention(c) 告知 Swift 这是一个裸函数指针（没有上下文对象）</span></span><br><span class="line">      <span class="comment">// 所有的 Obj-C 方法函数把接收者和消息当作前两个参数</span></span><br><span class="line">      <span class="comment">// 所以这意味着一个类型为 `() -&gt; Void` 的方法，这与 `layoutSubview` 方法相符</span></span><br><span class="line">      <span class="keyword">typealias</span> <span class="type">ObjCVoidVoidFn</span> = <span class="meta">@convention</span>(<span class="built_in">c</span>) (<span class="type">Any</span>, <span class="type">Selector</span>) -&gt; <span class="type">Void</span></span><br><span class="line">      <span class="keyword">let</span> originalLayoutSubviews = <span class="built_in">unsafeBitCast</span>(originalImpl, to: <span class="type">ObjCVoidVoidFn</span>.<span class="keyword">self</span>)</span><br><span class="line">      originalLayoutSubviews(view, selector)</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> <span class="keyword">let</span> counter = objc_getAssociatedObject(_self, &amp;<span class="type">RuntimeConstants</span>.<span class="type">CounterKey</span>) <span class="keyword">as</span>? <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> counter == threshold &#123;</span><br><span class="line">          onLoop()</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        objc_setAssociatedObject(view, &amp;<span class="type">RuntimeConstants</span>.<span class="type">CounterKey</span>, counter+<span class="number">1</span>, .<span class="type">OBJC_ASSOCIATION_RETAIN_NONATOMIC</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> implementation = imp_implementationWithBlock(layoutSubviews)</span><br><span class="line">    class_addMethod(trackableClass, #selector(originalClass.layoutSubviews), implementation, “v@:“)</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> <span class="keyword">let</span> trackableClass = <span class="type">NSClassFromString</span>(classFullName) &#123;</span><br><span class="line">    <span class="comment">// 我们之前在此运行时会话中分配了一个具有相同名称的类</span></span><br><span class="line">    <span class="comment">// 我们可以从原始字符串中获取它，并以相同的方式与我们的视图交换</span></span><br><span class="line">    object_setClass(view, trackableClass)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>让我们为视图创建模拟布局循环，并为其设置计数器来进行测试：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span> </span>&#123;</span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">super</span>.viewDidLoad()</span><br><span class="line"> </span><br><span class="line">    <span class="type">LayoutLoopHunter</span>.setUp(<span class="keyword">for</span>: view) &#123;</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">"Hello, world"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLayoutSubviews</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">super</span>.viewDidLayoutSubviews()</span><br><span class="line">    view.setNeedsLayout() <span class="comment">// loop creation</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>是不是忘记了什么事情？让我们再次回顾一下 UIViewLayoutFeedbackLoopDebuggingThreshold 断点的工作原理：</p><blockquote><p>在确认为反馈循环之前，定义某个视图的子视图在单个 run loop 里必须布局的次数</p></blockquote><p>我们从未把“单个 run loop ”这一条件考虑进来。如果视图在屏幕上停留了相当长的时间，并经常被反复布局，计数器迟早会超过临界值。但这可不是因为内存的问题。</p><p>我们该怎么解决这个问题呢？只需在每次 run loop 迭代时重置计数器。为了做到这一点，我们可以创建一个 <a href="https://www.appcoda.com/grand-central-dispatch/" target="_blank" rel="noopener">DispatchWorkItem</a>，它重置计数器，并在主队列上异步传递它。通过这种方式，它会在 run loop 下一次进入主线程时被调用：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">var</span> <span class="type">ResetWorkItemKey</span> = “_resetWorkItem”</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> previousResetWorkItem = objc_getAssociatedObject(view, &amp;<span class="type">RuntimeConstants</span>.<span class="type">ResetWorkItemKey</span>) <span class="keyword">as</span>? <span class="type">DispatchWorkItem</span> &#123;</span><br><span class="line">  previousResetWorkItem.cancel()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> currentResetWorkItem = <span class="type">DispatchWorkItem</span> &#123; [<span class="keyword">weak</span> view] <span class="keyword">in</span></span><br><span class="line">  <span class="keyword">guard</span> <span class="keyword">let</span> strongView = view <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</span><br><span class="line">  objc_setAssociatedObject(strongView, &amp;<span class="type">RuntimeConstants</span>.<span class="type">CounterKey</span>, <span class="number">0</span>, .<span class="type">OBJC_ASSOCIATION_RETAIN_NONATOMIC</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">DispatchQueue</span>.main.async(execute: currentResetWorkItem)</span><br><span class="line">objc_setAssociatedObject(view, &amp;<span class="type">RuntimeConstants</span>.<span class="type">ResetWorkItemKey</span>, currentResetWorkItem, .<span class="type">OBJC_ASSOCIATION_RETAIN_NONATOMIC</span>)</span><br></pre></td></tr></table></figure><p>最终的代码：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LayoutLoopHunter</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">RuntimeConstants</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">let</span> <span class="type">Prefix</span> = “runtime”</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// Associated objects keys</span></span><br><span class="line">    <span class="comment">// 关联对象键</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">var</span> <span class="type">CounterKey</span> = “_counter”</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">var</span> <span class="type">ResetWorkItemKey</span> = “_resetWorkItem”</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">setUp</span><span class="params">(<span class="keyword">for</span> view: UIView, threshold: Int = <span class="number">100</span>, onLoop: @escaping <span class="params">()</span></span></span> -&gt; ()) &#123;</span><br><span class="line">    <span class="comment">// 我们根据功能的前缀和原始类名为新类创建名称。</span></span><br><span class="line">    <span class="keyword">let</span> classFullName = “\(<span class="type">RuntimeConstants</span>.<span class="type">Prefix</span>)<span class="number">_</span>\(<span class="type">String</span>(describing: view.<span class="keyword">self</span>))”</span><br><span class="line">    <span class="keyword">let</span> originalClass = type(of: view)</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> trackableClass = objc_allocateClassPair(originalClass, classFullName, <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="comment">// 在当前运行时会话期间尚未创建此类。</span></span><br><span class="line">      <span class="comment">// 注册这个类，并且用原始视图的类来和它交换。</span></span><br><span class="line">      objc_registerClassPair(trackableClass)</span><br><span class="line">      object_setClass(view, trackableClass)</span><br><span class="line"> </span><br><span class="line">      <span class="comment">// 现在可以创建关联对象</span></span><br><span class="line">      objc_setAssociatedObject(view, &amp;<span class="type">RuntimeConstants</span>.<span class="type">CounterKey</span>, <span class="number">0</span>, .<span class="type">OBJC_ASSOCIATION_RETAIN_NONATOMIC</span>)</span><br><span class="line"> </span><br><span class="line">      <span class="comment">// 添加我们自己 layoutSubviews 的实现</span></span><br><span class="line">      <span class="keyword">let</span> layoutSubviews: <span class="meta">@convention</span>(block) (<span class="type">Any?</span>) -&gt; () = &#123; nullableSelf <span class="keyword">in</span></span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> _self = nullableSelf <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">let</span> selector = #selector(originalClass.layoutSubviews)</span><br><span class="line">        <span class="keyword">let</span> originalImpl = class_getMethodImplementation(originalClass, selector)</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// @convention(c) 告知 Swift 这是一个裸函数指针（没有上下文对象）</span></span><br><span class="line">        <span class="comment">// 所有的 Obj-C 方法函数把接收者和消息当作前两个参数</span></span><br><span class="line">        <span class="comment">// 所以这意味着一个类型为 `() -&gt; Void` 的方法，这与 `layoutSubview` 方法相符</span></span><br><span class="line">        <span class="keyword">typealias</span> <span class="type">ObjCVoidVoidFn</span> = <span class="meta">@convention</span>(<span class="built_in">c</span>) (<span class="type">Any</span>, <span class="type">Selector</span>) -&gt; <span class="type">Void</span></span><br><span class="line">        <span class="keyword">let</span> originalLayoutSubviews = <span class="built_in">unsafeBitCast</span>(originalImpl, to: <span class="type">ObjCVoidVoidFn</span>.<span class="keyword">self</span>)</span><br><span class="line">        originalLayoutSubviews(view, selector)</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> counter = objc_getAssociatedObject(_self, &amp;<span class="type">RuntimeConstants</span>.<span class="type">CounterKey</span>) <span class="keyword">as</span>? <span class="type">Int</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> counter == threshold &#123;</span><br><span class="line">            onLoop()</span><br><span class="line">          &#125;</span><br><span class="line"> </span><br><span class="line">          objc_setAssociatedObject(view, &amp;<span class="type">RuntimeConstants</span>.<span class="type">CounterKey</span>, counter+<span class="number">1</span>, .<span class="type">OBJC_ASSOCIATION_RETAIN_NONATOMIC</span>)</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 为重置计数器，在每个新的 run loop 遍历中分发 work item</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> previousResetWorkItem = objc_getAssociatedObject(view, &amp;<span class="type">RuntimeConstants</span>.<span class="type">ResetWorkItemKey</span>) <span class="keyword">as</span>? <span class="type">DispatchWorkItem</span> &#123;</span><br><span class="line">          previousResetWorkItem.cancel()</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> counterResetWorkItem = <span class="type">DispatchWorkItem</span> &#123; [<span class="keyword">weak</span> view] <span class="keyword">in</span></span><br><span class="line">          <span class="keyword">guard</span> <span class="keyword">let</span> strongView = view <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</span><br><span class="line">          objc_setAssociatedObject(strongView, &amp;<span class="type">RuntimeConstants</span>.<span class="type">CounterKey</span>, <span class="number">0</span>, .<span class="type">OBJC_ASSOCIATION_RETAIN_NONATOMIC</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">DispatchQueue</span>.main.async(execute: counterResetWorkItem)</span><br><span class="line">        objc_setAssociatedObject(view, &amp;<span class="type">RuntimeConstants</span>.<span class="type">ResetWorkItemKey</span>, counterResetWorkItem, .<span class="type">OBJC_ASSOCIATION_RETAIN_NONATOMIC</span>)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">let</span> implementation = imp_implementationWithBlock(layoutSubviews)</span><br><span class="line">      class_addMethod(trackableClass, #selector(originalClass.layoutSubviews), implementation, “v@:“)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> <span class="keyword">let</span> trackableClass = <span class="type">NSClassFromString</span>(classFullName) &#123;</span><br><span class="line">      <span class="comment">// 我们之前在此运行时会话中分配了一个具有相同名称的类。</span></span><br><span class="line">      <span class="comment">// 我们可以从原始字符串中获取它，并以相同的方式与我们的视图交换。</span></span><br><span class="line">      object_setClass(view, trackableClass)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="结论"><a class="markdownIt-Anchor" href="#结论"></a> 结论</h2><p>是的！现在你可以为所有可疑的视图设置分析事件了，发布应用程序，并找到这个问题的确切出处。你可以把这个问题的范围缩小到某个特定的视图，并在用户不知情的情况下借助于他们来解决这个问题。</p><p>最后要提到的一件事是：能力越大责任越大。运行时编程非常容易出错，因此很容易在不知情的情况下为应用程序引入另一个严重的问题。这就是为什么总是建议将应用程序中的所有危险代码包装在某种可停止开关中，因为你可以在发现代码导致问题时从后端触发开关禁用该功能。这有一篇介绍 Firebase 的 Feature Flags 的 <a href="https://medium.com/@rwbutler/feature-flags-a-b-testing-mvt-on-ios-718339ac7aa1" target="_blank" rel="noopener">(好文章</a></p><p>完整代码可以从这个 <a href="https://github.com/rsrbk/LayoutLoopHunter" target="_blank" rel="noopener">GitHub 仓库</a> 里获取，并且也将会发布到 CocoPods 上，以跟踪项目中的布局循环。</p><blockquote><p><a href="https://swift.gg/2019/11/11/layout-feedback-loop/" target="_blank" rel="noopener">大量引用</a><br>原文读起来费劲，只是想让自己读的容易写的这篇文章</p></blockquote><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> iOS Programming </category>
          
          <category> objc </category>
          
          <category> runtime </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> 性能优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AlamoFire 分析</title>
      <link href="/2019/08/23/source-code/AlamoFire-%E5%88%86%E6%9E%90/"/>
      <url>/2019/08/23/source-code/AlamoFire-%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Jun 02 2020 17:35:52 GMT+0800 (CST) --><a id="more"></a><p>分析源码：</p><ol><li>这个第三方库，他设计的目标是什么？</li><li>需要哪些基础知识</li><li>整体结构是什么样的</li><li>由外而内逐层分析层次结构</li><li>每个层次结构的意图是什么，为了实现这个意图他使用了什么方式，这么做有什么优点</li><li>为了让用户使用方便，实现了什么样的接口，为了实现这样的接口底层又是如何实践的呢？</li></ol><p>为什么要分析 AlamoFire</p><ul><li>分析它的接口设计</li><li>分析他是如何封装 URL Loading System 的</li><li>分析网络层次思考数据传输过程</li></ul><p>AlamoFire 都做了什么？</p><ul><li>Chainable Request / Response Methods</li><li>URL / JSON Parameter Encoding</li><li>Upload File / Data / Stream / MultipartFormData</li><li>Download File using Request or Resume Data</li><li>Authentication with URLCredential</li><li>HTTP Response Validation</li><li>Upload and Download Progress Closures with Progress</li><li>cURL Command Output</li><li>Dynamically Adapt and Retry Requests</li><li>TLS Certificate and Public Key Pinning</li><li>Network Reachability</li></ul><h2 id="foundation-中提供的网络相关接口"><a class="markdownIt-Anchor" href="#foundation-中提供的网络相关接口"></a> Foundation 中提供的网络相关接口</h2><p><code>AlamoFire</code> 是一个网络请求库，底层封装的事 Apple 提供的 <code>URL Loading System</code></p><h3 id="后台-session下载流程注意事项"><a class="markdownIt-Anchor" href="#后台-session下载流程注意事项"></a> 后台 session下载流程&amp;注意事项</h3><p>后台 sessionConfiguration 下载文件保存 到本地沙盒</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 开启后台 请求 task</span></span><br><span class="line"><span class="keyword">let</span> configuration = <span class="type">URLSessionConfiguration</span>.background(withIdentifier: <span class="string">"com.czw.backgroundDownload"</span>)</span><br><span class="line"><span class="keyword">let</span> session = <span class="type">URLSession</span>.<span class="keyword">init</span>(configuration: configuration, delegate: <span class="keyword">self</span>, delegateQueue: <span class="type">OperationQueue</span>.main)</span><br><span class="line">session.downloadTask(with: <span class="type">URL</span>(string: urlDownloadStr)!).resume()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">ViewController</span>: <span class="title">URLSessionDownloadDelegate</span> </span>&#123;</span><br><span class="line"><span class="comment">// 下载完成后代理回调方法，将文件移动到沙盒指定位置</span></span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">urlSession</span><span class="params">(<span class="number">_</span> session: URLSession, downloadTask: URLSessionDownloadTask, didFinishDownloadingTo location: URL)</span></span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"下载完成 - \(location)"</span>)</span><br><span class="line">    <span class="keyword">let</span> locationPath = location.path</span><br><span class="line">    <span class="keyword">let</span> documnets = <span class="type">NSHomeDirectory</span>() + <span class="string">"/Documents/xxxx"</span> + <span class="string">".zip"</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"移动地址:\(documnets)"</span>)</span><br><span class="line">    <span class="keyword">let</span> fileManager = <span class="type">FileManager</span>.<span class="keyword">default</span></span><br><span class="line">    <span class="keyword">try</span>! fileManager.moveItem(atPath: locationPath, toPath: documnets)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// http 分段传输，会不断调用这个方法直到，全部下载完成</span></span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">urlSession</span><span class="params">(<span class="number">_</span> session: URLSession, downloadTask: URLSessionDownloadTask, didWriteData bytesWritten: Int64, totalBytesWritten: Int64, totalBytesExpectedToWrite: Int64)</span></span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">" bytesWritten \(bytesWritten)\n totalBytesWritten \(totalBytesWritten)\n totalBytesExpectedToWrite \(totalBytesExpectedToWrite)"</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"下载进度: \(Double(totalBytesWritten)/Double(totalBytesExpectedToWrite))\n"</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>后台请求，需要申请后台权限，这样 app 进入 background 的时候才可以继续下载</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//用于保存后台下载的completionHandler</span></span><br><span class="line"><span class="keyword">var</span> backgroundSessionCompletionHandler: (() -&gt; <span class="type">Void</span>)? </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">application</span><span class="params">(<span class="number">_</span> application: UIApplication, handleEventsForBackgroundURLSession identifier: String, completionHandler: @escaping <span class="params">()</span></span></span> -&gt; <span class="type">Void</span>) &#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">"background: \(identifier)"</span>)</span><br><span class="line">  <span class="keyword">self</span>.backgroundSessionCompletionHandler = completionHandler</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用-alamofire"><a class="markdownIt-Anchor" href="#使用-alamofire"></a> 使用 AlamoFire</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Alamofire</span>.request(urlString)</span><br><span class="line">  .responseJSON &#123; (data) <span class="keyword">in</span></span><br><span class="line">    <span class="built_in">print</span>(data)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>跟上面对比[原生的方法(#code1), 思考 <code>AlamoFire</code> 都封装了什么，如何实现链式调用的，内部如何使用 oop，pop 的, 思考 <code>AlamoFire</code> 接口设计</p><p>下面这些都是怎么实现的？</p><ul><li>链式语法</li><li>直接传 string</li><li>封装调用 session，resume</li><li>Response 回调的返回的是 json 数据</li><li><code>Alamofire</code> 模块导入调用</li></ul><p>调用的第一层：<br>Alamofire.swift</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Alamofire Model</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">request</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">  <span class="number">_</span> url: URLConvertible,</span></span></span><br><span class="line"><span class="function"><span class="params">  method: HTTPMethod = .<span class="keyword">get</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">  parameters: Parameters? = <span class="literal">nil</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">  encoding: ParameterEncoding = URLEncoding.<span class="keyword">default</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">  headers: HTTPHeaders? = <span class="literal">nil</span>)</span></span></span><br><span class="line">  -&gt; <span class="type">DataRequest</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="type">SessionManager</span>.<span class="keyword">default</span>.request(</span><br><span class="line">    url,</span><br><span class="line">    method: method,</span><br><span class="line">    parameters: parameters,</span><br><span class="line">    encoding: encoding,</span><br><span class="line">    headers: headers</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SessionManager.swift</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//SessionManager</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/// A default instance of `SessionManager`, used by top-level Alamofire request methods, and suitable for use</span></span><br><span class="line"><span class="comment">/// directly for any ad hoc requests.</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">let</span> `<span class="keyword">default</span>`: <span class="type">SessionManager</span> = &#123;</span><br><span class="line">  <span class="keyword">let</span> configuration = <span class="type">URLSessionConfiguration</span>.<span class="keyword">default</span></span><br><span class="line">  configuration.httpAdditionalHeaders = <span class="type">SessionManager</span>.defaultHTTPHeaders </span><br><span class="line">  <span class="keyword">return</span> <span class="type">SessionManager</span>(configuration: configuration)</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">init</span>(</span><br><span class="line">  configuration: <span class="type">URLSessionConfiguration</span> = <span class="type">URLSessionConfiguration</span>.<span class="keyword">default</span>,</span><br><span class="line">  delegate: <span class="type">SessionDelegate</span> = <span class="type">SessionDelegate</span>(),</span><br><span class="line">  serverTrustPolicyManager: <span class="type">ServerTrustPolicyManager?</span> = <span class="literal">nil</span>)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">self</span>.delegate = delegate</span><br><span class="line">  <span class="keyword">self</span>.session = <span class="type">URLSession</span>(configuration: configuration, delegate: delegate, delegateQueue: <span class="literal">nil</span>)</span><br><span class="line"></span><br><span class="line">  commonInit(serverTrustPolicyManager: serverTrustPolicyManager)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">init</span>?(</span><br><span class="line">  session: <span class="type">URLSession</span>,</span><br><span class="line">  delegate: <span class="type">SessionDelegate</span>,</span><br><span class="line">  serverTrustPolicyManager: <span class="type">ServerTrustPolicyManager?</span> = <span class="literal">nil</span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">guard</span> delegate === session.delegate <span class="keyword">else</span> &#123; <span class="keyword">return</span> <span class="literal">nil</span> &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">self</span>.delegate = delegate</span><br><span class="line">  <span class="keyword">self</span>.session = session</span><br><span class="line"></span><br><span class="line">  commonInit(serverTrustPolicyManager: serverTrustPolicyManager)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>SessionDelegate()</code> 代理移交 <code>SessionDelegate</code> 是个 class, 处理 <code>URLSession</code> 的事件回调代理方法。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">SessionDelegate</span>: <span class="title">URLSessionDataDelegate</span> </span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">SessionDelegate</span>: <span class="title">URLSessionTaskDelegate</span> </span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">SessionDelegate</span>: <span class="title">URLSessionStreamDelegate</span> </span>&#123;</span><br></pre></td></tr></table></figure><p>为什么 Manager 不处理 <code>URLSession</code> 的代理回调方法，要搞一个 <code>SessionDelegate</code> 处理，因为 Manager 是一个中介者，用于管理各个 class 之间的联系，处理回调的那些方法应该归属于 xxxClass 来处理</p><p><img src="/img/AlamoFire-Manager.jpg" alt="AlamoFire 基本核心框架"></p><p>使用 Manager 主要作用是把代码模块之间的 频繁调用关系化简。划分业务层，管理层<br>Manager 统一管理调度<br>各个模块处理完成后，回调给 Manager</p><h3 id="处理后台下载"><a class="markdownIt-Anchor" href="#处理后台下载"></a> 处理后台下载</h3><h2 id="request"><a class="markdownIt-Anchor" href="#request"></a> request</h2><h3 id="编码"><a class="markdownIt-Anchor" href="#编码"></a> 编码</h3><p><img src="/img/requst_encode.jpeg" alt="提供的3种编码方式"></p><ul><li>url</li><li>json</li><li>propertyList</li></ul><p>url 是ASCII码编码的，他不是 Unicode，ASCII 码中的外文无法识别，所以要百分号编码——将 ACSII -&gt; Unicode 这样可以被识别</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">encode</span><span class="params">(<span class="number">_</span> urlRequest: URLRequestConvertible, with parameters: Parameters?)</span></span> <span class="keyword">throws</span> -&gt; <span class="type">URLRequest</span> &#123;</span><br><span class="line">  <span class="keyword">var</span> urlRequest = <span class="keyword">try</span> urlRequest.asURLRequest()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">guard</span> <span class="keyword">let</span> parameters = parameters <span class="keyword">else</span> &#123; <span class="keyword">return</span> urlRequest &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// header</span></span><br><span class="line">  <span class="keyword">if</span> <span class="keyword">let</span> method = <span class="type">HTTPMethod</span>(rawValue: urlRequest.httpMethod ?? <span class="string">"GET"</span>), encodesParametersInURL(with: method) &#123;</span><br><span class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> url = urlRequest.url <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="type">AFError</span>.parameterEncodingFailed(reason: .missingURL)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">var</span> urlComponents = <span class="type">URLComponents</span>(url: url, resolvingAgainstBaseURL: <span class="literal">false</span>), !parameters.isEmpty &#123;</span><br><span class="line">      <span class="keyword">let</span> percentEncodedQuery = (urlComponents.percentEncodedQuery.<span class="built_in">map</span> &#123; $<span class="number">0</span> + <span class="string">"&amp;"</span> &#125; ?? <span class="string">""</span>) + query(parameters)</span><br><span class="line">      urlComponents.percentEncodedQuery = percentEncodedQuery</span><br><span class="line">      urlRequest.url = urlComponents.url</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> urlRequest.value(forHTTPHeaderField: <span class="string">"Content-Type"</span>) == <span class="literal">nil</span> &#123;</span><br><span class="line">      urlRequest.setValue(<span class="string">"application/x-www-form-urlencoded; charset=utf-8"</span>, forHTTPHeaderField: <span class="string">"Content-Type"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// body</span></span><br><span class="line">    urlRequest.httpBody = query(parameters).data(using: .utf8, allowLossyConversion: <span class="literal">false</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> urlRequest</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>p.s. 传输组的时候一定要传 json 字符串！</p><p><a href="https://github.com/Alamofire/Alamofire/issues/1920" target="_blank" rel="noopener">iOS 10: Background Session won’t inform when downloads have failed #1920</a></p><blockquote><p><a href="https://developer.apple.com/documentation/foundation/url_loading_system" target="_blank" rel="noopener">URL Loading System</a></p></blockquote><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> 第三方框架 </category>
          
          <category> Net </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> 源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>URL Loading System</title>
      <link href="/2019/08/19/URL-Loading-System/"/>
      <url>/2019/08/19/URL-Loading-System/</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Jun 02 2020 17:35:51 GMT+0800 (CST) --><a id="more"></a><h2 id="简介"><a class="markdownIt-Anchor" href="#简介"></a> 简介</h2><ul><li>在 Foundation 框架中</li><li>支持协议：<ul><li>FTP协议（ftp://）</li><li>超文本传输协议（http://）</li><li>加密超文本传输协议(https://)</li><li>本地资源(file://)</li><li>数据URLs(data://)</li></ul></li><li>关键类：URLSession，URL，URLRequest，Tasks，Data</li><li>支持：Authorization credentials，cache 和cookies， 配置管理</li><li>使用 closure 和 delegate 处理 Response</li></ul><p><img src="/img/url_loading_system.jpg" alt="url_loading_system 核心类 分 6 个部分"></p><h2 id="核心-urlsession-urlsessiontask"><a class="markdownIt-Anchor" href="#核心-urlsession-urlsessiontask"></a> 核心 URLSession &amp; URLSessionTask</h2><p>一个 session 请求网络数据需要的核心内容</p><p><img src="/img/urlsession.jpg" alt="urlsession"></p><h3 id="session-configuration"><a class="markdownIt-Anchor" href="#session-configuration"></a> Session Configuration</h3><p>每个配置属性都值得研究<br><img src="/img/urlsession_configuration.jpg" alt="configuration"><br><a href="https://juejin.im/post/5d5f5bcbe51d4561c02a2547" target="_blank" rel="noopener">这篇文章有各个参数翻译</a></p><p>总共有三种 configuration</p><ul><li><code>Default</code>: 使用本地沙盒缓存，用户credential保存在 keychain 中</li><li><code>Ephemeral</code>: 不使用沙盒，所有缓存credential 等数据存在 与 session 绑定的 RAM 中，session 失效后内存自动清理</li><li><code>Background</code>: 跟 default session 相似，但是使用的是另外一个 进程(process) 处理数据传输，因为是跨进程，所以 background session 有些限制操作。（嗯后台session 使用了进程间通信）</li></ul><p>为什么要有 configuration？<br>session 相当一个 manager，用来管理组织 task，网络事件处理的枢纽，configuration是这个枢纽的参数信息！相当于 一个 app 他都有 自己 preference</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> configuration = <span class="type">URLSessionConfiguration</span>.background(withIdentifier: <span class="string">"com.czw.backgroundDownload"</span>)</span><br><span class="line"><span class="keyword">let</span> configuration1 = <span class="type">URLSessionConfiguration</span>.<span class="keyword">default</span><span class="comment">// 允许用户拥有沙盒缓存器，当session 释放的时候，数据依然存在</span></span><br><span class="line"><span class="keyword">let</span> configuration2 = <span class="type">URLSessionConfiguration</span>.ephemeral<span class="comment">// session 无效时，东西就会消失</span></span><br><span class="line"></span><br><span class="line"><span class="type">URLSession</span>.<span class="keyword">init</span>(configuration: configuration).dataTask(with: <span class="type">URL</span>(string: urlDownloadStr)!)</span><br><span class="line">  .resume()<span class="comment">// 后台 sessionConfiguration 不能设置 completeHandler，需要自己设置代理</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"background-内存大小：\(String(describing: configuration.urlCache.memoryCapacity))"</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"background-沙盒大小：\(String(describing: configuration.urlCache.diskCapacity))"</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"default-内存大小：\(String(describing: configuration1.urlCache.memoryCapacity))"</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"default-沙盒大小：\(String(describing: configuration1.urlCache.diskCapacity))"</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"ephemeral-内存大小：\(String(describing: configuration2.urlCache.memoryCapacity))"</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"ephemeral-沙盒大小：\(String(describing: configuration2.urlCache.diskCapacity))"</span>)</span><br></pre></td></tr></table></figure><p>打印结果：<br>background-内存大小：nil<br>background-沙盒大小：nil<br>default-内存大小：512000<br>default-沙盒大小：10000000<br>ephemeral-内存大小：512000<br>ephemeral-沙盒大小：0</p><p>就像文档说的，当session 失效以后 ephemeral 的 cache 会消失，因为他没有沙盒空间</p><h3 id="session-网络请求"><a class="markdownIt-Anchor" href="#session-网络请求"></a> session 网络请求</h3><p><img src="/img/urlsession_flow.jpg" alt="urlsession request flow"></p><p>我们要做的</p><ol><li>配置需要的 session configuration，</li><li>配置 session<ol><li>系统提供的 shared 单例，系统自己配置 configuration，sessionDelegate，delegateQueue</li><li>自定义 session，自己设置 configuration，sessionDelegate，delegateQueue(是 serial queue)</li></ol></li><li>提供 request &amp; url 给 session</li><li>生成 task<ol><li>URLSessionTask<ul><li>URLSessionDataTask</li><li>URLSessionUploadTask</li><li>URLSessionDownloadTask</li><li>URLSessionStreamTask</li><li>URLSessionWebSocketTask（iOS 13.0）</li></ul></li></ol></li><li>配置SessionDelegate, SessionTaskDelegate 对网络事件处理 (URLSessionTaskDelegate: URLSessionDelegate<ul><li>URLSessionDataDelegate</li><li>URLSessionDownloadDelegate</li><li>URLSessionStreamDelegate</li><li>URLSessionWebSocketDelegate（iOS 13.0）</li></ul></li></ol><p>SessionDelegate 只有3个接口</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@available</span>(iOS <span class="number">7.0</span>, *)</span><br><span class="line"><span class="keyword">optional</span> <span class="function"><span class="keyword">func</span> <span class="title">urlSession</span><span class="params">(<span class="number">_</span> session: URLSession, didBecomeInvalidWithError error: Error?)</span></span> </span><br><span class="line"></span><br><span class="line"><span class="meta">@available</span>(iOS <span class="number">7.0</span>, *)</span><br><span class="line"><span class="keyword">optional</span> <span class="function"><span class="keyword">func</span> <span class="title">urlSession</span><span class="params">(<span class="number">_</span> session: URLSession, didReceive challenge: URLAuthenticationChallenge, completionHandler: @escaping <span class="params">(URLSession.AuthChallengeDisposition, URLCredential?)</span></span></span> -&gt; <span class="type">Void</span>) </span><br><span class="line"></span><br><span class="line"><span class="meta">@available</span>(iOS <span class="number">7.0</span>, *)</span><br><span class="line"><span class="keyword">optional</span> <span class="function"><span class="keyword">func</span> <span class="title">urlSessionDidFinishEvents</span><span class="params">(forBackgroundURLSession session: URLSession)</span></span></span><br></pre></td></tr></table></figure><p>至于各个 taskDelegate，对应不同的task 类型有个字不同协议接口<br>这里主要看 SessionTaskDelegate</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">protocol</span> <span class="title">URLSessionTaskDelegate</span> : <span class="title">URLSessionDelegate</span> </span>&#123; </span><br><span class="line">  <span class="meta">@available</span>(iOS <span class="number">11.0</span>, *)</span><br><span class="line">  <span class="keyword">optional</span> <span class="function"><span class="keyword">func</span> <span class="title">urlSession</span><span class="params">(<span class="number">_</span> session: URLSession, task: URLSessionTask, willBeginDelayedRequest request: URLRequest, completionHandler: @escaping <span class="params">(URLSession.DelayedRequestDisposition, URLRequest?)</span></span></span> -&gt; <span class="type">Void</span>)</span><br><span class="line"></span><br><span class="line">  <span class="meta">@available</span>(iOS <span class="number">11.0</span>, *)</span><br><span class="line">  <span class="keyword">optional</span> <span class="function"><span class="keyword">func</span> <span class="title">urlSession</span><span class="params">(<span class="number">_</span> session: URLSession, taskIsWaitingForConnectivity task: URLSessionTask)</span></span></span><br><span class="line"></span><br><span class="line">  <span class="meta">@available</span>(iOS <span class="number">7.0</span>, *)</span><br><span class="line">  <span class="keyword">optional</span> <span class="function"><span class="keyword">func</span> <span class="title">urlSession</span><span class="params">(<span class="number">_</span> session: URLSession, task: URLSessionTask, willPerformHTTPRedirection response: HTTPURLResponse, newRequest request: URLRequest, completionHandler: @escaping <span class="params">(URLRequest?)</span></span></span> -&gt; <span class="type">Void</span>)</span><br><span class="line"></span><br><span class="line">  <span class="meta">@available</span>(iOS <span class="number">7.0</span>, *)</span><br><span class="line">  <span class="keyword">optional</span> <span class="function"><span class="keyword">func</span> <span class="title">urlSession</span><span class="params">(<span class="number">_</span> session: URLSession, task: URLSessionTask, didReceive challenge: URLAuthenticationChallenge, completionHandler: @escaping <span class="params">(URLSession.AuthChallengeDisposition, URLCredential?)</span></span></span> -&gt; <span class="type">Void</span>)</span><br><span class="line"></span><br><span class="line">  <span class="meta">@available</span>(iOS <span class="number">7.0</span>, *)</span><br><span class="line">  <span class="keyword">optional</span> <span class="function"><span class="keyword">func</span> <span class="title">urlSession</span><span class="params">(<span class="number">_</span> session: URLSession, task: URLSessionTask, needNewBodyStream completionHandler: @escaping <span class="params">(InputStream?)</span></span></span> -&gt; <span class="type">Void</span>)</span><br><span class="line"></span><br><span class="line">  <span class="meta">@available</span>(iOS <span class="number">7.0</span>, *)</span><br><span class="line">  <span class="keyword">optional</span> <span class="function"><span class="keyword">func</span> <span class="title">urlSession</span><span class="params">(<span class="number">_</span> session: URLSession, task: URLSessionTask, didSendBodyData bytesSent: Int64, totalBytesSent: Int64, totalBytesExpectedToSend: Int64)</span></span></span><br><span class="line"></span><br><span class="line">  <span class="meta">@available</span>(iOS <span class="number">10.0</span>, *)</span><br><span class="line">  <span class="keyword">optional</span> <span class="function"><span class="keyword">func</span> <span class="title">urlSession</span><span class="params">(<span class="number">_</span> session: URLSession, task: URLSessionTask, didFinishCollecting metrics: URLSessionTaskMetrics)</span></span></span><br><span class="line"></span><br><span class="line">  <span class="meta">@available</span>(iOS <span class="number">7.0</span>, *)</span><br><span class="line">  <span class="keyword">optional</span> <span class="function"><span class="keyword">func</span> <span class="title">urlSession</span><span class="params">(<span class="number">_</span> session: URLSession, task: URLSessionTask, didCompleteWithError error: Error?)</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>常用的是 dataTask，downloadTask，uploadTask</p><h2 id="实际使用"><a class="markdownIt-Anchor" href="#实际使用"></a> 实际使用</h2><h3 id="从网站获取数据到内存"><a class="markdownIt-Anchor" href="#从网站获取数据到内存"></a> 从网站获取数据到内存</h3><h4 id="使用回调处理接受结果使用closure-回调得到-data"><a class="markdownIt-Anchor" href="#使用回调处理接受结果使用closure-回调得到-data"></a> 使用回调处理接受结果：使用closure 回调得到 data</h4><p><img src="https://docs-assets.developer.apple.com/published/c7124fb5d7/bf4501ff-82b2-4dd4-9ec3-243ef0e70d21.png" alt=""></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// task 的状态</span></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">URLSessionTask</span> </span>&#123; </span><br><span class="line">  <span class="meta">@available</span>(iOS <span class="number">7.0</span>, *)</span><br><span class="line">  <span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">State</span> : <span class="title">Int</span> </span>&#123; </span><br><span class="line">    <span class="keyword">case</span> running </span><br><span class="line">    <span class="keyword">case</span> suspended <span class="comment">// 初试状态</span></span><br><span class="line">    <span class="keyword">case</span> canceling </span><br><span class="line">    <span class="keyword">case</span> completed</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">startLoad</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="keyword">let</span> url = <span class="type">URL</span>(string: <span class="string">"https://www.example.com/"</span>)!</span><br><span class="line">  <span class="keyword">let</span> task = <span class="type">URLSession</span>.shared.dataTask(with: url) &#123; data, response, error <span class="keyword">in</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> error = error &#123;</span><br><span class="line">      <span class="keyword">self</span>.handleClientError(error)</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> httpResponse = response <span class="keyword">as</span>? <span class="type">HTTPURLResponse</span>,</span><br><span class="line">      (<span class="number">200</span>...<span class="number">299</span>).<span class="built_in">contains</span>(httpResponse.statusCode) <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">self</span>.handleServerError(response)</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> mimeType = httpResponse.mimeType, mimeType == <span class="string">"text/html"</span>,</span><br><span class="line">      <span class="keyword">let</span> data = data,</span><br><span class="line">      <span class="keyword">let</span> string = <span class="type">String</span>(data: data, encoding: .utf8) &#123;</span><br><span class="line">      <span class="type">DispatchQueue</span>.main.async &#123;</span><br><span class="line">        <span class="keyword">self</span>.webView.loadHTMLString(string, baseURL: url)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// session create 出来的 task 是 suspend 的状态</span></span><br><span class="line">  task.resume()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意点：</p><ol><li>session create 出来的 task 初始状态是 suspend</li><li>回调处理是在 serial queue 任务放到子线程处理的，通知 UI 变化应切换主线程</li></ol><h4 id="接受请求详情结果使用-delegate"><a class="markdownIt-Anchor" href="#接受请求详情结果使用-delegate"></a> 接受请求详情&amp;结果：使用 Delegate</h4><p><img src="https://docs-assets.developer.apple.com/published/8b22355c7f/730c8e1b-654f-4eb9-9c63-d439a69ac5d2.png" alt=""></p><p>这个时候 session 不应该使用 <code>shared</code>，而是要自己配置</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="built_in">lazy</span> <span class="keyword">var</span> session: <span class="type">URLSession</span> = &#123;</span><br><span class="line">  <span class="keyword">let</span> configuration = <span class="type">URLSessionConfiguration</span>.<span class="keyword">default</span></span><br><span class="line">  configuration.waitsForConnectivity = <span class="literal">true</span></span><br><span class="line">  <span class="keyword">return</span> <span class="type">URLSession</span>(configuration: configuration,</span><br><span class="line">                    delegate: <span class="keyword">self</span>,</span><br><span class="line">                    delegateQueue: <span class="literal">nil</span>)</span><br><span class="line">&#125;()</span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> receivedData: <span class="type">Data?</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">startLoad</span><span class="params">()</span></span> &#123;</span><br><span class="line">  loadButton.isEnabled = <span class="literal">false</span></span><br><span class="line">  <span class="keyword">let</span> url = <span class="type">URL</span>(string: <span class="string">"https://www.example.com/"</span>)!</span><br><span class="line">  receivedData = <span class="type">Data</span>()</span><br><span class="line">  <span class="keyword">let</span> task = session.dataTask(with: url)</span><br><span class="line">  task.resume()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// delegate methods</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">urlSession</span><span class="params">(<span class="number">_</span> session: URLSession, dataTask: URLSessionDataTask, didReceive response: URLResponse,</span></span></span><br><span class="line"><span class="function"><span class="params">        completionHandler: @escaping <span class="params">(URLSession.ResponseDisposition)</span></span></span> -&gt; <span class="type">Void</span>) &#123;</span><br><span class="line">  <span class="keyword">guard</span> <span class="keyword">let</span> response = response <span class="keyword">as</span>? <span class="type">HTTPURLResponse</span>,</span><br><span class="line">    (<span class="number">200</span>...<span class="number">299</span>).<span class="built_in">contains</span>(response.statusCode),</span><br><span class="line">    <span class="keyword">let</span> mimeType = response.mimeType,</span><br><span class="line">    mimeType == <span class="string">"text/html"</span> <span class="keyword">else</span> &#123;</span><br><span class="line">    completionHandler(.cancel)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  completionHandler(.allow)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">urlSession</span><span class="params">(<span class="number">_</span> session: URLSession, dataTask: URLSessionDataTask, didReceive data: Data)</span></span> &#123;</span><br><span class="line">  <span class="keyword">self</span>.receivedData?.append(data)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">urlSession</span><span class="params">(<span class="number">_</span> session: URLSession, task: URLSessionTask, didCompleteWithError error: Error?)</span></span> &#123;</span><br><span class="line">  <span class="type">DispatchQueue</span>.main.async &#123;</span><br><span class="line">    <span class="keyword">self</span>.loadButton.isEnabled = <span class="literal">true</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> error = error &#123;</span><br><span class="line">      handleClientError(error)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> <span class="keyword">let</span> receivedData = <span class="keyword">self</span>.receivedData,</span><br><span class="line">      <span class="keyword">let</span> string = <span class="type">String</span>(data: receivedData, encoding: .utf8) &#123;</span><br><span class="line">      <span class="keyword">self</span>.webView.loadHTMLString(string, baseURL: task.currentRequest?.url)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用代理的方式，可以处理很多特殊的情况：</p><ul><li>authentication challenges</li><li>following redirects</li></ul><blockquote><p><a href="https://developer.apple.com/documentation/foundation/url_loading_system" target="_blank" rel="noopener">URL Loading System</a></p></blockquote><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> iOS Programming </category>
          
          <category> Guide </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>load和initialize</title>
      <link href="/2019/07/12/load%E5%92%8Cinitialize/"/>
      <url>/2019/07/12/load%E5%92%8Cinitialize/</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Jun 02 2020 17:35:52 GMT+0800 (CST) --><a id="more"></a><h2 id="load"><a class="markdownIt-Anchor" href="#load"></a> + load</h2><ol><li>load 是通过 c 函数调用的</li><li>load 调用在 main 函数之前，动态链接器通知调用 load_images，执行load 方法</li><li>load 加载顺序：父类-&gt; 类-&gt; 分类</li></ol><h3 id="load-方法的调用栈"><a class="markdownIt-Anchor" href="#load-方法的调用栈"></a> load 方法的调用栈</h3><p>在 <code>+ load</code> 方法出打断点，查看 load 调用栈</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span>  +[XXObject load]</span><br><span class="line"><span class="number">1</span>  call_class_loads()</span><br><span class="line"><span class="number">2</span>  call_load_methods</span><br><span class="line"><span class="number">3</span>  load_images</span><br><span class="line"><span class="number">4</span>  dyld::notifySingle(dyld_image_states, ImageLoader <span class="keyword">const</span>*)</span><br><span class="line"><span class="number">11</span> _dyld_start</span><br></pre></td></tr></table></figure><blockquote><p>dyld(dynamic link editor)，它是苹果的动态链接器。<br>在系统内核做好程序准备工作之后，交由 dyld 负责余下的工作</p></blockquote><p>在 runtime 时调用 <code>load_images</code> 方法,那么就看下他的源码(objc4-756.2)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***********************************************************************</span></span><br><span class="line"><span class="comment">* load_images</span></span><br><span class="line"><span class="comment">* Process +load in the given images which are being mapped in by dyld.</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* Locking: write-locks runtimeLock and loadMethodLock</span></span><br><span class="line"><span class="comment">**********************************************************************/</span></span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">bool</span> <span class="title">hasLoadMethods</span><span class="params">(<span class="keyword">const</span> headerType *mhdr)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">void</span> <span class="title">prepare_load_methods</span><span class="params">(<span class="keyword">const</span> headerType *mhdr)</span></span>; </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">load_images</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *path __unused, <span class="keyword">const</span> struct mach_header *mh)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!hasLoadMethods((<span class="keyword">const</span> headerType *)mh)) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">recursive_mutex_locker_t</span> lock(loadMethodLock);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Discover load methods</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">mutex_locker_t</span> lock2(runtimeLock);</span><br><span class="line">    prepare_load_methods((<span class="keyword">const</span> headerType *)mh);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Call +load methods (without runtimeLock - re-entrant)</span></span><br><span class="line">  call_load_methods();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">prepare_load_methods</span><span class="params">(<span class="keyword">const</span> headerType *mhdr)</span></span>&#123;</span><br><span class="line">  <span class="keyword">size_t</span> count, i;</span><br><span class="line"></span><br><span class="line">  runtimeLock.assertLocked();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">classref_t</span> *classlist = </span><br><span class="line">    _getObjc2NonlazyClassList(mhdr, &amp;count);</span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">    schedule_class_load(remapClass(classlist[i]));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">category_t</span> **categorylist = _getObjc2NonlazyCategoryList(mhdr, &amp;count);</span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">    <span class="keyword">category_t</span> *cat = categorylist[i];</span><br><span class="line">    Class cls = remapClass(cat-&gt;cls);</span><br><span class="line">    <span class="keyword">if</span> (!cls) <span class="keyword">continue</span>;  <span class="comment">// category for ignored weak-linked class</span></span><br><span class="line">    <span class="keyword">if</span> (cls-&gt;isSwiftStable()) &#123;</span><br><span class="line">      _objc_fatal(<span class="string">"Swift class extensions and categories on Swift "</span></span><br><span class="line">            <span class="string">"classes are not allowed to have +load methods"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    realizeClassWithoutSwift(cls);</span><br><span class="line">    assert(cls-&gt;ISA()-&gt;isRealized());</span><br><span class="line">    add_category_to_loadable_list(cat);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/***********************************************************************</span></span><br><span class="line"><span class="comment">* prepare_load_methods</span></span><br><span class="line"><span class="comment">* Schedule +load for classes in this image, any un-+load-ed </span></span><br><span class="line"><span class="comment">* superclasses in other images, and any categories in this image.</span></span><br><span class="line"><span class="comment">**********************************************************************/</span></span><br><span class="line"><span class="comment">// Recursively schedule +load for cls and any un-+load-ed superclasses.</span></span><br><span class="line"><span class="comment">// cls must already be connected.</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">schedule_class_load</span><span class="params">(Class cls)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!cls) <span class="keyword">return</span>;</span><br><span class="line">  assert(cls-&gt;isRealized());  <span class="comment">// _read_images should realize</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (cls-&gt;data()-&gt;flags &amp; RW_LOADED) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Ensure superclass-first ordering</span></span><br><span class="line">  schedule_class_load(cls-&gt;superclass); </span><br><span class="line">  add_class_to_loadable_list(cls);</span><br><span class="line">  cls-&gt;setInfo(RW_LOADED); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/***********************************************************************</span></span><br><span class="line"><span class="comment">* add_class_to_loadable_list</span></span><br><span class="line"><span class="comment">* Class cls has just become connected. Schedule it for +load if</span></span><br><span class="line"><span class="comment">* it implements a +load method.</span></span><br><span class="line"><span class="comment">**********************************************************************/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_class_to_loadable_list</span><span class="params">(Class cls)</span> </span>&#123;</span><br><span class="line">  IMP method;</span><br><span class="line"></span><br><span class="line">  method = cls-&gt;getLoadMethod();</span><br><span class="line">  <span class="keyword">if</span> (!method) <span class="keyword">return</span>;  <span class="comment">// Don't bother if cls has no +load method</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (loadable_classes_used == loadable_classes_allocated) &#123;</span><br><span class="line">    loadable_classes_allocated = loadable_classes_allocated*<span class="number">2</span> + <span class="number">16</span>;</span><br><span class="line">    <span class="comment">// 分配类对象空间，加载类</span></span><br><span class="line">    loadable_classes = (struct loadable_class *)</span><br><span class="line">      <span class="built_in">realloc</span>(loadable_classes,</span><br><span class="line">                loadable_classes_allocated *</span><br><span class="line">                <span class="keyword">sizeof</span>(struct loadable_class));</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  loadable_classes[loadable_classes_used].cls = cls;</span><br><span class="line">  loadable_classes[loadable_classes_used].method = method;</span><br><span class="line">  loadable_classes_used++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/***********************************************************************</span></span><br><span class="line"><span class="comment">* call_load_methods</span></span><br><span class="line"><span class="comment">* Call all pending class and category +load methods.</span></span><br><span class="line"><span class="comment">* Class +load methods are called superclass-first. </span></span><br><span class="line"><span class="comment">* Category +load methods are not called until after the parent class's +load.</span></span><br><span class="line"><span class="comment">* </span></span><br><span class="line"><span class="comment">* This method must be RE-ENTRANT, because a +load could trigger </span></span><br><span class="line"><span class="comment">* more image mapping. In addition, the superclass-first ordering </span></span><br><span class="line"><span class="comment">* must be preserved in the face of re-entrant calls. Therefore, </span></span><br><span class="line"><span class="comment">* only the OUTERMOST call of this function will do anything, and </span></span><br><span class="line"><span class="comment">* that call will handle all loadable classes, even those generated </span></span><br><span class="line"><span class="comment">* while it was running.</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* The sequence below preserves +load ordering in the face of </span></span><br><span class="line"><span class="comment">* image loading during a +load, and make sure that no </span></span><br><span class="line"><span class="comment">* +load method is forgotten because it was added during </span></span><br><span class="line"><span class="comment">* a +load call.</span></span><br><span class="line"><span class="comment">* Sequence:</span></span><br><span class="line"><span class="comment">* 1. Repeatedly call class +loads until there aren't any more</span></span><br><span class="line"><span class="comment">* 2. Call category +loads ONCE.</span></span><br><span class="line"><span class="comment">* 3. Run more +loads if:</span></span><br><span class="line"><span class="comment">*  (a) there are more classes to load, OR</span></span><br><span class="line"><span class="comment">*  (b) there are some potential category +loads that have </span></span><br><span class="line"><span class="comment">*    still never been attempted.</span></span><br><span class="line"><span class="comment">* Category +loads are only run once to ensure "parent class first" </span></span><br><span class="line"><span class="comment">* ordering, even if a category +load triggers a new loadable class </span></span><br><span class="line"><span class="comment">* and a new loadable category attached to that class. </span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* Locking: loadMethodLock must be held by the caller </span></span><br><span class="line"><span class="comment">*   All other locks must not be held.</span></span><br><span class="line"><span class="comment">**********************************************************************/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">call_load_methods</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">bool</span> loading = NO;</span><br><span class="line">  <span class="keyword">bool</span> more_categories; </span><br><span class="line"><span class="comment">// Re-entrant calls do nothing; the outermost call will finish the job.</span></span><br><span class="line">  <span class="keyword">if</span> (loading) <span class="keyword">return</span>;</span><br><span class="line">  loading = YES; </span><br><span class="line">  <span class="keyword">void</span> *pool = objc_autoreleasePoolPush();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="comment">// 1. Repeatedly call class +loads until there aren't any more</span></span><br><span class="line">    <span class="keyword">while</span> (loadable_classes_used &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      call_class_loads();</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="comment">// 2. Call category +loads ONCE</span></span><br><span class="line">    more_categories = call_category_loads();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. Run more +loads if there are classes OR more untried categories</span></span><br><span class="line">  &#125; <span class="keyword">while</span> (loadable_classes_used &gt; <span class="number">0</span>  ||  more_categories); </span><br><span class="line">  objc_autoreleasePoolPop(pool); </span><br><span class="line">  loading = NO;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="initialize"><a class="markdownIt-Anchor" href="#initialize"></a> initialize</h2><ol><li>惰性方法，第一次初始化实例对象的时候会调用这个方法</li><li>正常情况，只会调用一次</li><li>不正常情况，调用多次，多个子类没有实现 initialize，那么会多次调用父类的 initialize</li></ol><h3 id="分析-initialize"><a class="markdownIt-Anchor" href="#分析-initialize"></a> 分析 initialize</h3><p>调用栈分析</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span> +[XXObject initialize]</span><br><span class="line"><span class="number">1</span> _class_initialize</span><br><span class="line"><span class="number">2</span> lookUpImpOrForward</span><br><span class="line"><span class="number">3</span> _class_lookupMethodAndLoadCache3</span><br><span class="line"><span class="number">4</span> objc_msgSend</span><br><span class="line"><span class="number">5</span> main</span><br><span class="line"><span class="number">6</span> start</span><br></pre></td></tr></table></figure><ol><li>使用 oc 消息机制发送的</li><li></li></ol><blockquote><p><a href="https://github.com/draveness/analyze/blob/master/contents/objc/%E4%BD%A0%E7%9C%9F%E7%9A%84%E4%BA%86%E8%A7%A3%20load%20%E6%96%B9%E6%B3%95%E4%B9%88%EF%BC%9F.md" target="_blank" rel="noopener">你真的了解 load 方法么？</a><br><a href="https://github.com/draveness/analyze/blob/master/contents/objc/%E6%87%92%E6%83%B0%E7%9A%84%20initialize%20%E6%96%B9%E6%B3%95.md" target="_blank" rel="noopener">懒惰的 initialize 方法</a></p></blockquote><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> iOS Programming </category>
          
          <category> objc </category>
          
          <category> runtime </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> 底层 </tag>
            
            <tag> objc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>读代码 Me</title>
      <link href="/2019/05/17/source-code/%E8%AF%BB%E4%BB%A3%E7%A0%81-Me/"/>
      <url>/2019/05/17/source-code/%E8%AF%BB%E4%BB%A3%E7%A0%81-Me/</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Jun 02 2020 17:35:52 GMT+0800 (CST) --><a id="more"></a><h2 id="为什么看"><a class="markdownIt-Anchor" href="#为什么看"></a> 为什么看</h2><p>抽空晚上睡不着看 <a href="https://github.com/vsouza/awesome-ios#gcd" target="_blank" rel="noopener">awesome-ios</a> 提供的优秀代码库<br>[Me](<a href="https://github.com/pascalbros/Me" target="_blank" rel="noopener">https://github.com/pascalbros/Me</a> 源码</p><h2 id="他是做什么的"><a class="markdownIt-Anchor" href="#他是做什么的"></a> 他是做什么的</h2><p>Me 是解决嵌套异步问题的一个轻量级库——就一个文件</p><h2 id="使用他以后的效果"><a class="markdownIt-Anchor" href="#使用他以后的效果"></a> 使用他以后的效果</h2><p>before</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">MyAPI</span>.login &#123;</span><br><span class="line">  <span class="comment">//Do your stuff and then request posts...</span></span><br><span class="line">  <span class="type">MyAPI</span>.posts &#123;</span><br><span class="line">   <span class="comment">//Do your stuff and then request comments...</span></span><br><span class="line">   <span class="type">MyAPI</span>.comments &#123;</span><br><span class="line">    <span class="comment">//Do your stuff and then request likes...</span></span><br><span class="line">    <span class="type">MyAPI</span>.likes &#123;</span><br><span class="line">      <span class="comment">//We are done here</span></span><br><span class="line">    &#125;</span><br><span class="line">   &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>after</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Me</span>.start &#123; (me) <span class="keyword">in</span></span><br><span class="line">  <span class="type">MyAPI</span>.login &#123;</span><br><span class="line">   <span class="comment">//Do your stuff and then request posts...</span></span><br><span class="line">   me.runNext()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;.next &#123; (caller, me) <span class="keyword">in</span></span><br><span class="line">  <span class="type">MyAPI</span>.posts &#123;</span><br><span class="line">   <span class="comment">//Do your stuff and then request comments...</span></span><br><span class="line">   me.runNext()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;.next &#123; (caller, me) <span class="keyword">in</span></span><br><span class="line">  <span class="type">MyAPI</span>.comments &#123;</span><br><span class="line">   <span class="comment">//Do your stuff and then request likes...</span></span><br><span class="line">   me.runNext()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;.next &#123; (caller, me) <span class="keyword">in</span></span><br><span class="line">  <span class="type">MyAPI</span>.likes &#123;</span><br><span class="line">   <span class="comment">//We are done here</span></span><br><span class="line">   me.end()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;.run()</span><br></pre></td></tr></table></figure><p>看效果：</p><ol><li>Me 把异步嵌套代码–&gt; 链式代码（想想他是怎么做的？）</li><li>Me 是链条型的，start，next，next(name:)，jump(toName:)，end<ol><li>他是如何做异步通知的？</li><li>如何开始，如何结束？</li><li>支持实现多链条并发执行吗？</li></ol></li><li>从提供的接口上可以看出<ol><li>Me开启结束要由用户控制</li><li>节点驱动需要用户触发</li><li>支持指定节点跳转</li></ol></li></ol><p>ok 使用demo&amp;基本特性分析完了，接下来看源码</p><hr><h2 id="源码"><a class="markdownIt-Anchor" href="#源码"></a> 源码</h2><h3 id="先看接口"><a class="markdownIt-Anchor" href="#先看接口"></a> 先看接口</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">typealias</span> <span class="type">MeInitClosure</span> = ((<span class="number">_</span> current: <span class="type">Me</span>) -&gt; ())</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">typealias</span> <span class="type">MeClosure</span> = ((<span class="number">_</span> previous: <span class="type">Me?</span>, <span class="number">_</span> current: <span class="type">Me</span>) -&gt; ())</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">var</span> first: <span class="type">Me</span> &#123; <span class="keyword">get</span> &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">var</span> index: <span class="type">UInt</span> &#123; <span class="keyword">get</span> &#125;</span><br><span class="line"><span class="keyword">internal</span> <span class="keyword">var</span> name: <span class="type">String</span> &#123; <span class="keyword">get</span> &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">var</span> parameters: [<span class="type">String</span> : <span class="type">Any</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 链式节点函数，static 是起点</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">start</span><span class="params">(name: String = <span class="string">""</span>, this: @escaping MeInitClosure)</span></span> -&gt; <span class="type">Me</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">run</span><span class="params">(this: @escaping MeClosure)</span></span> -&gt; <span class="type">Me</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">next</span><span class="params">(name: String = <span class="string">""</span>, next: @escaping MeClosure)</span></span> -&gt; <span class="type">Me</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">run</span><span class="params">()</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">end</span><span class="params">()</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">runNext</span><span class="params">(queue: DispatchQueue)</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">runNext</span><span class="params">()</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">runNextOnMain</span><span class="params">()</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">jump</span><span class="params">(toIndex jump: UInt = <span class="number">0</span>, queue: DispatchQueue)</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">jump</span><span class="params">(toIndex jump: UInt = <span class="number">0</span>)</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">jumpOnMain</span><span class="params">(toIndex jump: UInt = <span class="number">0</span>)</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">jump</span><span class="params">(toName jump: String, queue: DispatchQueue)</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">jump</span><span class="params">(toName jump: String)</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">jumpOnMain</span><span class="params">(toName jump: String)</span></span></span><br></pre></td></tr></table></figure><ol><li>提供 Me 节点 index，name，代码库内部维护</li><li>只提供其实节点 first</li><li>提供线程队列调度接口</li><li>parameters 是干什么的？像是 [name: MeClouse] 字典，每个 me 节点都有一个clouse</li></ol><h3 id="看代码实现"><a class="markdownIt-Anchor" href="#看代码实现"></a> 看代码实现</h3><ol><li>核心代码，这个地方封装了 GCD</li></ol><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">runNext</span><span class="params">(queue: DispatchQueue)</span></span> &#123;</span><br><span class="line">  <span class="keyword">if</span> <span class="keyword">let</span> next = <span class="keyword">self</span>.next &#123;</span><br><span class="line">    <span class="comment">//self.nextObj!.parameters = self.parameters //enable to pass parameters to the next object</span></span><br><span class="line">    queue.async &#123;</span><br><span class="line">      next(<span class="keyword">self</span>, <span class="keyword">self</span>.nextObj!)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">jump</span><span class="params">(toIndex jump: UInt = <span class="number">0</span>, queue: DispatchQueue)</span></span> &#123;</span><br><span class="line">  <span class="keyword">if</span> <span class="keyword">let</span> to = me(at: jump) &#123;</span><br><span class="line">    to.this(<span class="keyword">self</span>, to)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有个问题是：<code>jump</code> 的queue 没有用……（这个库的使用价值不大）只有 <code>runNext</code> 相关方法可以调度线程<br>parameters: 是 me 节点保存数据，用于用户自己传递数据使用</p><ol start="2"><li>内部数据结构使用的是链表</li></ol><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">var</span> nextObj: <span class="type">Me?</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">var</span> _first: <span class="type">Me?</span></span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> 读源码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RxSwift + MVVM:如何提供ViewModels</title>
      <link href="/2019/04/16/RxSwfit+RAC/RxSwift-MVVM-%E5%A6%82%E4%BD%95%E6%8F%90%E4%BE%9BViewModels/"/>
      <url>/2019/04/16/RxSwfit+RAC/RxSwift-MVVM-%E5%A6%82%E4%BD%95%E6%8F%90%E4%BE%9BViewModels/</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Jun 02 2020 17:35:52 GMT+0800 (CST) --><a id="more"></a><p><a href="https://medium.com/blablacar-tech/rxswift-mvvm-66827b8b3f10" target="_blank" rel="noopener">原文：RxSwift + MVVM: how to feed ViewModels</a></p><h2 id="介绍"><a class="markdownIt-Anchor" href="#介绍"></a> 介绍</h2><p>自从我们开始在BlaBlaCar的Model-View-ViewModel（MVVM）架构中使用RxSwift以来，已经快一年了。我们对结果感到兴奋。我们使用这种方法编写的代码更容易理解，维护，测试和扩展。但是，最初的几周并不是小菜一碟。我们必须在MVVM + RxSwift架构的某些方面进行迭代，以使事情变得正确。其中一个方式——给 ViewModels 提供 Inputs。</p><p>让我们通过两种不同方式给ViewModels 提供 Inputs（Rx Event）</p><p>但是首先，让我们简单谈一下 ViewModels</p><h2 id="viewmodels"><a class="markdownIt-Anchor" href="#viewmodels"></a> ViewModels</h2><p>ViewModel的职责，你必须正确理解它（不止一个）：</p><ul><li>它应该是可以插入到任何View上的。比如，不是先造一个View再去定义一个ViewModel。注意，是View拥有ViewModel。View知道ViewModel，而不是反过来。</li><li>它是可测试的。最终，MVVM架构最大的好处就是让业务逻辑可测。</li><li>MVVM使用绑定机制更加牛逼，所以让使用 RxSwift 来更好地利用 ViewModel</li></ul><p>to be continued…</p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> 第三方框架 </category>
          
          <category> RxSwift </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 翻译 </tag>
            
            <tag> RxSwift </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何读代码写代码</title>
      <link href="/2019/03/03/%E5%A6%82%E4%BD%95%E8%AF%BB%E4%BB%A3%E7%A0%81%E5%86%99%E4%BB%A3%E7%A0%81/"/>
      <url>/2019/03/03/%E5%A6%82%E4%BD%95%E8%AF%BB%E4%BB%A3%E7%A0%81%E5%86%99%E4%BB%A3%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Jun 02 2020 17:35:51 GMT+0800 (CST) --><a id="more"></a><h2 id="怎么读"><a class="markdownIt-Anchor" href="#怎么读"></a> 怎么读</h2><ol><li>这个库是用来干嘛？</li><li>看文件结构<ol><li>思考作者分了那些模块</li><li>每个模块都是干啥的</li><li>模块联系实际场景是啥，文件上用了哪些架构or设计模式（MVC，MVVM，ViewStateModel，Coordinate，Meditate……）</li><li>模块间是如何联系的——数据流</li><li>了解具体模块细节</li></ol></li><li>看具体协议&amp;类的接口<ol><li>作者想要给用户提供什么功能</li><li>类的数据出口&amp;入口是什么</li><li>类之间关系使用了什么设计模式，如何提高了复用性</li></ol></li><li>看数据流向<ol><li>对于文档少&amp;想更深入理解代码，借助 IDE 调试代码，跟踪数据输入输出，看函数调用栈</li><li>根据数据流向可以更清楚类之间的关系</li></ol></li><li>看具体实现<ol><li>想知道具体细节如何实现的时候，看文件，定位源码位置</li></ol></li></ol><h2 id="怎么写"><a class="markdownIt-Anchor" href="#怎么写"></a> 怎么写</h2><ol><li>确定功能</li><li>根据功能确定模块</li><li>根据模块分文件夹<ol><li>思考模块之间关系，出口入口，相互依赖关系</li></ol></li><li>每个模块写接口——API<ol><li>API 层级关系，抽象层级，高层及实现通用功能</li><li>接口出口入口，依赖注入</li><li>接口之间依赖关系，思考使用何种设计模式</li></ol></li><li>根据模块，实现协议<ol><li>class 开发</li><li>class 之间关系，使用什么设计模式，提高复用效率</li><li>class 的出口入口，依赖注入</li><li>私有成员内部逻辑</li></ol></li></ol><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> 思考 </category>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习感悟 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>雪球速读法--迭代树--整体&amp;细节</title>
      <link href="/2019/02/05/%E9%9B%AA%E7%90%83%E9%80%9F%E8%AF%BB%E6%B3%95/"/>
      <url>/2019/02/05/%E9%9B%AA%E7%90%83%E9%80%9F%E8%AF%BB%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Jun 02 2020 17:35:51 GMT+0800 (CST) --><a id="more"></a><h2 id="雪球速读法浅析"><a class="markdownIt-Anchor" href="#雪球速读法浅析"></a> 雪球速读法–浅析</h2><p>《雪球速读法》中说：</p><blockquote><p>速读的方式是：<br>速度技巧 * 资料库(大小) = 速读</p><ul><li>反复读 n 变</li><li>每次快速阅读，要求1.不求甚解，2.脑子里不要有读的声音</li></ul><p>具体：</p><ul><li>先话读目录，前言，后记 用 15~30，思考书的整体结构，作者写作意图</li><li>从框架的外层一层层向知识细节挖，每次处理一层，理解一层，构建自己对这本书的资料库（滚雪球的过程）</li></ul></blockquote><p>这样做的好处是：</p><ol><li>强调先掌握知识的框架！从整体的角度一层层学习知识。</li><li>有了框架就知道森林大概的样子！</li><li>如果单纯的按照目录一点点学习书本上的知识，会陷在局部细节中出不来浪费大量时间，读书时间过长，前面的知识会忘，后面不一定会认真读完，最后整本书都很难理解。</li><li>作者是以什么样的方式写书的呢？类似于《雪球速读法》先有中心思想，目录，段落，然后落实到细节，《雪球速读法》就是按照作者的写作的方式理解知识的过程。</li><li>速读不发出声音，更有利于读者跟作者产生共鸣！这个也是读书的一个目的</li></ol><h2 id="目标-vs-任务"><a class="markdownIt-Anchor" href="#目标-vs-任务"></a> 目标 vs 任务</h2><p>目标：一个你想要看见的好结果<br>任务：为实现目标你要做的事</p><p>在缺少动力的时候多思考目标带来那些美好的愿景，用 Deadline 给自己施加压力，对比人的承诺。</p><p>在执行的时候多看细节，任务，因为总是关注目标，会无从下手，很多细节上的困难乐观对待！导致目标最终搁浅。</p><h2 id="树状结构知识"><a class="markdownIt-Anchor" href="#树状结构知识"></a> 树状结构知识</h2><p>有关树状结构，知识迭代过程都是一层层包裹的知识，有历史气息的知识都是树状结构<br>这样的知识可以像《雪球速读法》一样层层学习</p><h2 id="计算机知识"><a class="markdownIt-Anchor" href="#计算机知识"></a> 计算机知识</h2><p>计算机知识就是一个大大的树，找到一个大树枝，然后一层层分解这个知识点<br><img src="/img/knowledge_tree.jpg" alt="-"></p><p>程序开发的时候也是，现有结构，然后再是细节！</p><p>有时间补充</p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> 思考 </category>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习感悟 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RxSwift 5.RxDataSources</title>
      <link href="/2019/01/31/RxSwfit+RAC/RxSwift-RxDataSources/"/>
      <url>/2019/01/31/RxSwfit+RAC/RxSwift-RxDataSources/</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Jun 02 2020 17:35:52 GMT+0800 (CST) --><a id="more"></a><p><a href="https://github.com/RxSwiftCommunity/RxDataSources/issues?q=is%3Aissue+is%3Aclosed" target="_blank" rel="noopener">原文: RxDataSources</a></p><h2 id="table-和-collection-view-data-sources"><a class="markdownIt-Anchor" href="#table-和-collection-view-data-sources"></a> Table 和 Collection View data sources</h2><h2 id="特性"><a class="markdownIt-Anchor" href="#特性"></a> 特性</h2><ul><li>[x] O(N)计算差异的算法<ul><li>该算法假设所有 sections 和 items 都是唯一的，因此没有二义性</li><li>如果有歧义，在非动画刷新时自动回退</li></ul></li><li>[x] 他使用其他启发式方法以将最少数量的命令发送到分段视图<ul><li>即使运行时间是线性的，发送命令的首选数量通常也比线性少</li><li>最好（并且有可能）将更改数量限制为较小的数量，并且如果更改数量朝线性方向增长，则只需进行正常的reload即可</li></ul></li><li>[x] 支持扩展你的 item 和 section 结构<ul><li>只需使用 <code>IdentifiableType</code> 和 <code>Equatable</code> 扩展你的 item，并使用 <code>AnimatableSectionModelType</code> 扩展 section</li></ul></li><li>[x] 支持 section 和 item 的两级分层动画的所有组合<ul><li>Section 动画: Insert, Delete, Mov</li><li>Item 动画: Insert, Delete, Move, Reload (如果旧值不等于新值)</li></ul></li><li>[x] 可配置动画类型对于 Insert, Reload and Delete (Automatic, Fade, …)</li><li>[x] 示例 app</li><li>[x] 随机压力测试（eg app）</li><li>[x] 支持开箱即用的编辑（eg app）</li><li>[x] 同 UITableView 和 UICollectionView 一起工作</li></ul><h2 id="为什么"><a class="markdownIt-Anchor" href="#为什么"></a> 为什么</h2><p>编写 table 和 collection View 数据源很繁琐。对于最简单的情况，需要实现大量的委托方法。</p><p>RxSwift 通过简单的数据绑定机制有助于减轻一些负担：</p><ol><li>把你的数据转化成可见听序列 Observable</li><li>使用下面方法把数据绑定到 tableView/collectionView 上<ul><li>rx.items(dataSource:protocol&lt;RxTableViewDataSourceType, UITableViewDataSource&gt;)</li><li>rx.items(cellIdentifier:String)</li><li>rx.items(cellIdentifier:String:Cell.Type:_: )</li><li>rx.items(<em>:</em>: )</li></ul></li></ol><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> data = <span class="type">Observable</span>&lt;[<span class="type">String</span>]&gt;.just([<span class="string">"first element"</span>, <span class="string">"second element"</span>, <span class="string">"third element"</span>])</span><br><span class="line"></span><br><span class="line">data.bind(to: tableView.rx.items(cellIdentifier: <span class="string">"Cell"</span>)) &#123; index, model, cell <span class="keyword">in</span></span><br><span class="line">  cell.textLabel?.text = model</span><br><span class="line">&#125;</span><br><span class="line">.disposed(by: disposeBag)</span><br></pre></td></tr></table></figure><p>这适用于简单数据集，但不适用于需要将复杂数据集与多个section 绑定或在添加/修改/删除item 时需要执行动画的情况。</p><p>这些正是RxDataSources帮助解决的用例。</p><p>使用RxDataSources，写起来非常容易</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> dataSource = <span class="type">RxTableViewSectionedReloadDataSource</span>&lt;<span class="type">SectionModel</span>&lt;<span class="type">String</span>, <span class="type">Int</span>&gt;&gt;(configureCell: configureCell)</span><br><span class="line"><span class="type">Observable</span>.just([<span class="type">SectionModel</span>(model: <span class="string">"title"</span>, items: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])])</span><br><span class="line">    .bind(to: tableView.rx.items(dataSource: dataSource))</span><br><span class="line">    .disposed(by: disposeBag)</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/kzaher/rxswiftcontent/rxdatasources/RxDataSources.gif" alt="-"></p><h2 id="怎么用"><a class="markdownIt-Anchor" href="#怎么用"></a> 怎么用</h2><p>给定以下自定义数据结构：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">CustomData</span> </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> anInt: <span class="type">Int</span></span><br><span class="line">  <span class="keyword">var</span> aString: <span class="type">String</span></span><br><span class="line">  <span class="keyword">var</span> aCGPoint: <span class="type">CGPoint</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>首先使用遵循 SectionModelType 协议的结构定义你的section：<ul><li>定义 item 类型别名：等于该 section 将包含的 item 类型</li><li>声明一个 items 属性：Item 类型数组</li></ul></li></ol><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SectionOfCustomData</span> </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> header: <span class="type">String</span>    </span><br><span class="line">  <span class="keyword">var</span> items: [<span class="type">Item</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">SectionOfCustomData</span>: <span class="title">SectionModelType</span> </span>&#123;</span><br><span class="line">  <span class="keyword">typealias</span> <span class="type">Item</span> = <span class="type">CustomData</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">init</span>(original: <span class="type">SectionOfCustomData</span>, items: [<span class="type">Item</span>]) &#123;</span><br><span class="line">    <span class="keyword">self</span> = original</span><br><span class="line">    <span class="keyword">self</span>.items = items</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>创建一个dataSource对象，并将其传递给 SectionOfCustomData 类型：</li></ol><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> dataSource = <span class="type">RxTableViewSectionedAnimatedDataSource</span>&lt;<span class="type">MySection</span>&gt;(</span><br><span class="line">    configureCell: &#123; ds, tv, <span class="number">_</span>, item <span class="keyword">in</span></span><br><span class="line">        <span class="keyword">let</span> cell = tv.dequeueReusableCell(withIdentifier: <span class="string">"Cell"</span>) ?? <span class="type">UITableViewCell</span>(style: .<span class="keyword">default</span>, reuseIdentifier: <span class="string">"Cell"</span>)</span><br><span class="line">        cell.textLabel?.text = <span class="string">"Item \(item)"</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> cell</span><br><span class="line">    &#125;,</span><br><span class="line">    titleForHeaderInSection: &#123; ds, index <span class="keyword">in</span></span><br><span class="line">        <span class="keyword">return</span> ds.sectionModels[index].header</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><ol start="3"><li>根据需要在dataSource上自定义闭包：<ul><li>titleForHeaderInSection</li><li>titleForFooterInSection</li><li>etc</li></ul></li></ol><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">dataSource.titleForHeaderInSection = &#123; dataSource, index <span class="keyword">in</span></span><br><span class="line">  <span class="keyword">return</span> dataSource.sectionModels[index].header</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dataSource.titleForFooterInSection = &#123; dataSource, indexPath <span class="keyword">in</span></span><br><span class="line">  <span class="keyword">return</span> dataSource.sectionModels[index].footer</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dataSource.canEditRowAtIndexPath = &#123; dataSource, indexPath <span class="keyword">in</span></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dataSource.canMoveRowAtIndexPath = &#123; dataSource, indexPath <span class="keyword">in</span></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>将实际数据定义为 CustomData 对象的 Observable序列，并将其绑定到tableView</li></ol><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> sections = [</span><br><span class="line">  <span class="type">SectionOfCustomData</span>(header: <span class="string">"First section"</span>, items: [<span class="type">CustomData</span>(anInt: <span class="number">0</span>, aString: <span class="string">"zero"</span>, aCGPoint: <span class="type">CGPoint</span>.zero), <span class="type">CustomData</span>(anInt: <span class="number">1</span>, aString: <span class="string">"one"</span>, aCGPoint: <span class="type">CGPoint</span>(x: <span class="number">1</span>, y: <span class="number">1</span>)) ]),</span><br><span class="line">  <span class="type">SectionOfCustomData</span>(header: <span class="string">"Second section"</span>, items: [<span class="type">CustomData</span>(anInt: <span class="number">2</span>, aString: <span class="string">"two"</span>, aCGPoint: <span class="type">CGPoint</span>(x: <span class="number">2</span>, y: <span class="number">2</span>)), <span class="type">CustomData</span>(anInt: <span class="number">3</span>, aString: <span class="string">"three"</span>, aCGPoint: <span class="type">CGPoint</span>(x: <span class="number">3</span>, y: <span class="number">3</span>)) ])</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="type">Observable</span>.just(sections)</span><br><span class="line">  .bind(to: tableView.rx.items(dataSource: dataSource))</span><br><span class="line">  .disposed(by: disposeBag)</span><br></pre></td></tr></table></figure><h2 id="数据源动画"><a class="markdownIt-Anchor" href="#数据源动画"></a> 数据源动画</h2><p>RxDataSources 提供了两种特殊的数据源类型，它们可以自动处理绑定数据源中的动画变化：<code>RxTableViewSectionedAnimatedDataSource</code> 和 <code>RxCollectionViewSectionedAnimatedDataSource</code> 。</p><p>要使用两个动画数据源之一，你必须在上述概述的基础上采取一些额外的步骤：</p><ul><li>SectionOfCustomData需要遵守 AnimatableSectionModelType 协议</li><li>数据模型必须符合<ul><li>IdentifiableType：IdentifiableType 协议提供的 <code>identity</code> 必须是表示模型实例的不可变标识符(identifier)。例如，对于 Car 模型，你可能要使用 Car 的plateNumber 作为其标识。</li><li>Equatable：遵从 Equatable 协议 有助于RxDataSources确定哪些 cell 已更改，因此它只能为这些特定 cell 设置动画。这意味着，更改Car模型的任何属性都会触发该 cell 的动画重新加载。</li></ul></li></ul><h2 id="需要"><a class="markdownIt-Anchor" href="#需要"></a> 需要</h2><p>Xcode 10.2</p><p>Swift 5.0</p><p>For Swift 4.x version please use versions 3.0.0 … 3.1.0 For Swift 3.x version please use versions 1.0 … 2.0.2 For Swift 2.3 version please use versions 0.1 … 0.9</p><h2 id="安装"><a class="markdownIt-Anchor" href="#安装"></a> 安装</h2><h3 id="cocoapods"><a class="markdownIt-Anchor" href="#cocoapods"></a> CocoaPods</h3><p>Podfile</p><blockquote><p>pod ‘RxDataSources’, ‘~&gt; 4.0’</p></blockquote><h3 id="carthage"><a class="markdownIt-Anchor" href="#carthage"></a> Carthage</h3><p>Cartfile</p><blockquote><p>github “RxSwiftCommunity/RxDataSources” ~&gt; 4.0</p></blockquote><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> 第三方框架 </category>
          
          <category> RxSwift </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 翻译 </tag>
            
            <tag> RxSwift </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GCD 原理+API 分析</title>
      <link href="/2018/12/21/GCD-%E5%8E%9F%E7%90%86-API-%E5%88%86%E6%9E%90/"/>
      <url>/2018/12/21/GCD-%E5%8E%9F%E7%90%86-API-%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Jun 02 2020 17:35:51 GMT+0800 (CST) --><a id="more"></a><p>GCD 是操作系统层级的概念，他给用户提供了操作线程的 API<br>任务派发中心，内部实现原理是有了 FIFO 分发队列,<a href="http://libdispatch.macosforge.org/" target="_blank" rel="noopener">GCD 源码</a><br>使用 GCD 用户不需要直接操作繁琐的 thread，线程池由系统管理，用户只需要维护分发队列，向分发队列中放 task 就可以了。<br>直接使用线程可能会引发的一个问题是，如果你的代码和所基于的框架代码都创建自己的线程时，那么活动的线程数量有可能以指数级增长，每个线程都会消耗一些内存和内核资源。</p><h2 id="主要原理"><a class="markdownIt-Anchor" href="#主要原理"></a> 主要原理</h2><p>主要理解三个概念</p><ol><li>queue: 管理任务的队列，确定任务派发方式</li><li>task: 用户自定义需要执行的 task (代码段)</li><li>thread: GCD 根据 queue 定义的方式，将 task 派发给线程池中的指定线程（thread 不需要自己创建）</li></ol><p><img src="/img/GCD-thread-mode.jpg" alt="GCD Queue task thread"></p><ul><li>queue<ul><li>串行队列，所有任务都在同一个 thread 上一个接着一个的执行<ul><li>特例：主队列 main_queue，所有 task 在 mainThread 中执行</li></ul></li><li>并发队列，任务可以在多个 thread 中执行没有固定执行顺序<ul><li>特例：global 队列</li></ul></li></ul></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">concurrent</span><br><span class="line">adj. adj. 并发的；一致的；同时发生的；并存的</span><br><span class="line">n. [数] 共点；同时发生的事件</span><br><span class="line"></span><br><span class="line">对于并行跟并发</span><br><span class="line">并发：值得是程序上多thread并发执行，其实是多线程抢占资源 -- cpu 执行（任务是以在单核 CPU 上分时（时间共享））</span><br><span class="line">并行：是硬件上，多个thread在多个 cpu 上同事执行着</span><br></pre></td></tr></table></figure><ul><li><p>同步异步执行任务</p><ul><li>sync 所有任务要在一个 thread 中执行，一个接着一个</li><li>async 具备开启线程的能力，可以在多个thread 中并发执行任务</li></ul></li><li><p>thread</p><ul><li>使用 GCD，不用再直接跟线程打交道了，只需要向队列中添加代码块(task)即可，GCD 在后端管理着一个线程池。</li><li>作为开发者可以将工作考虑为一个队列，而不是一堆线程，这种并行的抽象模型更容易掌握和使用。</li><li>根据👆图 task 真正的并发只有 右下角的才能出现，并发队列中异步执行任务<br>P.S.：async 执行 task的时候 thread 的个数跟 task 的个数没有关系（现在 iOS系统是开辟 6个 thread，以前低版本的是 3个，thread 开辟太多，会用掉大量内存）</li></ul></li></ul><p>接下来说一些 GCD 接口，根据接口分析原理</p><h2 id="分发队列"><a class="markdownIt-Anchor" href="#分发队列"></a> 分发队列</h2><h3 id="队列的创建"><a class="markdownIt-Anchor" href="#队列的创建"></a> 队列的创建</h3><ol><li>GCD 公开有 5 个不同的全局队列：<ul><li>运行在主线程中的 main queue（串行队列）</li><li>global 队列，3 个不同优先级的后台队列（并发队列）</li><li>以及一个优先级更低的后台队列（用于 I/O）（并发队列）</li></ul></li></ol><p>得到系统的全局队列</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">dispatch_queue_main_t mainDispatchQueue = dispatch_get_main_queue();</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">#define DISPATCH_QUEUE_PRIORITY_HIGH 2</span></span><br><span class="line"><span class="comment">#define DISPATCH_QUEUE_PRIORITY_DEFAULT 0</span></span><br><span class="line"><span class="comment">#define DISPATCH_QUEUE_PRIORITY_LOW (-2)</span></span><br><span class="line"><span class="comment">#define DISPATCH_QUEUE_PRIORITY_BACKGROUND INT16_MIN</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">dispatch_queue_global_t globalDispatchQueue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class="number">0</span>);</span><br></pre></td></tr></table></figure><ol start="2"><li>自定义队列：串行或者并行队列。自定义队列非常强大，<strong>在自定义队列中被调度的所有 block 最终都将被放入到系统的全局队列中和线程池中。</strong></li></ol><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">dispatch_queue_t</span> queue</span><br><span class="line">concurrentQueue = dispatch_queue_create(<span class="string">"concurrent"</span>, DISPATCH_QUEUE_CONCURRENT);</span><br><span class="line"><span class="built_in">dispatch_queue_t</span> serialQueue = dispatch_queue_create(<span class="string">"serial"</span>, DISPATCH_QUEUE_SERIAL);</span><br></pre></td></tr></table></figure><p><img src="https://objccn.io/images/issues/issue-2/gcd-queues.png" alt=""></p><h3 id="创建队列并设置优先级"><a class="markdownIt-Anchor" href="#创建队列并设置优先级"></a> 创建队列并设置优先级</h3><ol><li>获取全局 global 系统队列时传递优先级</li><li>dipatch_queue_attr_make_with_qos_class</li><li>dispatch_set_target_queue</li></ol><p>使用 <code>dispatch_queue_attr_t</code> 属性设置优先级</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">dispatch_queue_t</span> <span class="built_in">queue</span>;</span><br><span class="line"><span class="keyword">dispatch_queue_attr_t</span> attr;</span><br><span class="line">attr = dispatch_queue_attr_make_with_qos_class(DISPATCH_QUEUE_SERIAL, QOS_CLASS_UTILITY, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">queue</span> = dispatch_queue_create(<span class="string">"com.example.myqueue"</span>, attr);</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">* The global <span class="built_in">queue</span> priorities <span class="built_in">map</span> to the following QOS classes:</span><br><span class="line">*  - DISPATCH_QUEUE_PRIORITY_HIGH:         QOS_CLASS_USER_INITIATED</span><br><span class="line">*  - DISPATCH_QUEUE_PRIORITY_DEFAULT:      QOS_CLASS_DEFAULT</span><br><span class="line">*  - DISPATCH_QUEUE_PRIORITY_LOW:          QOS_CLASS_UTILITY</span><br><span class="line">*  - DISPATCH_QUEUE_PRIORITY_BACKGROUND:   QOS_CLASS_BACKGROUND</span><br></pre></td></tr></table></figure><p>设置目标队列</p><details><summary>dispatch_set_target_queue 相关注释说明</summary><pre><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">* When no quality of service <span class="class"><span class="keyword">class</span> <span class="title">and</span> <span class="title">relative</span> <span class="title">priority</span> <span class="title">is</span> <span class="title">specified</span> <span class="title">for</span> <span class="title">a</span></span></span><br><span class="line"><span class="class">* <span class="title">dispatch</span> <span class="title">queue</span> <span class="title">at</span> <span class="title">the</span> <span class="title">time</span> <span class="title">of</span> <span class="title">creation</span>, <span class="title">a</span> <span class="title">dispatch</span> <span class="title">queue</span>'<span class="title">s</span> <span class="title">quality</span> <span class="title">of</span> <span class="title">service</span></span></span><br><span class="line"><span class="class">* <span class="title">class</span> <span class="title">is</span> <span class="title">inherited</span> <span class="title">from</span> <span class="title">its</span> <span class="title">target</span> <span class="title">queue</span>. <span class="title">The</span> <span class="title">dispatch_get_global_queue</span>()</span></span><br><span class="line"><span class="class">* <span class="title">function</span> <span class="title">may</span> <span class="title">be</span> <span class="title">used</span> <span class="title">to</span> <span class="title">obtain</span> <span class="title">a</span> <span class="title">target</span> <span class="title">queue</span> <span class="title">of</span> <span class="title">a</span> <span class="title">specific</span> <span class="title">quality</span> <span class="title">of</span></span></span><br><span class="line"><span class="class">* <span class="title">service</span> <span class="title">class</span>, <span class="title">however</span> <span class="title">the</span> <span class="title">use</span> <span class="title">of</span> <span class="title">dispatch_queue_attr_make_with_qos_class</span>()</span></span><br><span class="line"><span class="class">* <span class="title">is</span> <span class="title">recommended</span> <span class="title">instead</span>.</span></span><br></pre></td></tr></table></figure></pre><ul><li>QOS_CLASS_USER_INTERACTIVE 指定为该QOS class的队列负责执行与用户交互相关的任务，比如动画、事件处理、更新UI等，所以有最高优先级。该优先级的队列应该只限于做与用户交互相关的任务，所以在上面优先级的宏定义中并没有将其暴露出来。</li><li>QOS_CLASS_USER_INITIATED 指定为该QOS class的队列用来执行那些会阻碍用户使用你的App的任务，所以优先级也很高。</li><li>QOS_CLASS_DEFAULT 默认优先级。</li><li>QOS_CLASS_UTILITY 指定为该QOS class的队列用于执行那些用户不需要立即得到结果的任务，所以优先级相对较低。</li><li>QOS_CLASS_BACKGROUND 指定为该QOS class的队列用于执行维护或清理等任务，用户不需要关心其结果。</li></ul></details><ol><li>将自定义 queue 中的 task 都将被放入到系统的全局队列和线程池中：默认情况下会把开发者创建的队列放入到<strong>默认优先级</strong>的全局队列中。但是也可以给自定义的队列设置一个目标队列</li><li>改变自定义 queue 的优先级：让其执行优先级与该目标队列的执行优先级一致。</li><li>改变 queue 中 task 执行的方式：不仅能改变优先级，如果一个队列是并行的，但是其目标队列是串行的，那么实际上这个队列也会转换为串行队列。再者，不同串行队列中的任务是可以同时执行的，如果把这些串行队列的目标队列都设置为同一个串行队列，那这些串行队列中的任务将不会并行执行。</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> * @param object</span><br><span class="line"> * The object to modify.</span><br><span class="line"> * The result of passing <span class="literal">NULL</span> in <span class="keyword">this</span> parameter is undefined.</span><br><span class="line"> *</span><br><span class="line"> * @param <span class="built_in">queue</span></span><br><span class="line"> * The <span class="keyword">new</span> target <span class="built_in">queue</span> <span class="keyword">for</span> the object. The <span class="built_in">queue</span> is retained, <span class="keyword">and</span> the</span><br><span class="line"> * previous target <span class="built_in">queue</span>, <span class="keyword">if</span> any, is released.</span><br><span class="line"> * If <span class="built_in">queue</span> is DISPATCH_TARGET_QUEUE_DEFAULT, <span class="built_in">set</span> the object<span class="number">'</span>s target <span class="built_in">queue</span></span><br><span class="line"> * to the <span class="keyword">default</span> target <span class="built_in">queue</span> <span class="keyword">for</span> the given object type.</span><br><span class="line"> */</span><br><span class="line">DISPATCH_EXPORT DISPATCH_NOTHROW</span><br><span class="line"><span class="keyword">void</span></span><br><span class="line">dispatch_set_target_queue(<span class="keyword">dispatch_object_t</span> object, <span class="keyword">dispatch_queue_t</span> _Nullable <span class="built_in">queue</span>);</span><br></pre></td></tr></table></figure><p>dispatch_set_target_queue：可以设置优先级，也可以设置队列层级体系，比如让多个串行和并行队列在统一一个串行队列里串行执行</p><details><summary>dispatch_set_target_queue使用后的效果</summary><pre><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">setTarget</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="keyword">let</span> serialQueue = <span class="type">DispatchQueue</span>(label: <span class="string">"serialQueue"</span>)</span><br><span class="line">  <span class="keyword">let</span> aQueue = <span class="type">DispatchQueue</span>(label: <span class="string">"concurrent.queue.0"</span>, attributes: .concurrent, target: serialQueue)</span><br><span class="line">  <span class="keyword">let</span> bQueue = <span class="type">DispatchQueue</span>(label: <span class="string">"concurrent.queue.1"</span>, attributes: .concurrent, target: serialQueue)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> alabel = aQueue.label</span><br><span class="line">  <span class="keyword">let</span> blabel = bQueue.label</span><br><span class="line">  aQueue.async &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"\(alabel): 1"</span>)</span><br><span class="line">    sleep(<span class="number">3</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  bQueue.async &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"\(blabel): 2"</span>)</span><br><span class="line">    sleep(<span class="number">1</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  bQueue.async &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"\(blabel): 3"</span>)</span><br><span class="line">    sleep(<span class="number">2</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">concurrent.queue.0: 1</span></span><br><span class="line"><span class="comment">concurrent.queue.1: 2</span></span><br><span class="line"><span class="comment">concurrent.queue.1: 3</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">nosetTarget</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="keyword">let</span> aQueue = <span class="type">DispatchQueue</span>(label: <span class="string">"concurrent.queue.0"</span>, attributes: .concurrent)</span><br><span class="line">  <span class="keyword">let</span> bQueue = <span class="type">DispatchQueue</span>(label: <span class="string">"concurrent.queue.1"</span>, attributes: .concurrent)</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">let</span> alabel = aQueue.label</span><br><span class="line">  <span class="keyword">let</span> blabel = bQueue.label</span><br><span class="line">  aQueue.async &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"\(alabel): 1"</span>)</span><br><span class="line">    sleep(<span class="number">3</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  bQueue.async &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"\(blabel): 2"</span>)</span><br><span class="line">    sleep(<span class="number">1</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  bQueue.async &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"\(blabel): 3"</span>)</span><br><span class="line">    sleep(<span class="number">2</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">concurrent.queue.0: 1</span></span><br><span class="line"><span class="comment">concurrent.queue.1: 3</span></span><br><span class="line"><span class="comment">concurrent.queue.1: 2</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></pre></details><h2 id="gcd-任务调度"><a class="markdownIt-Anchor" href="#gcd-任务调度"></a> GCD 任务调度</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">sync</span><span class="params">(execute workItem: DispatchWorkItem)</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">async</span><span class="params">(execute workItem: DispatchWorkItem)</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">async</span><span class="params">(group: DispatchGroup, execute workItem: DispatchWorkItem)</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">async</span><span class="params">(group: DispatchGroup? = <span class="literal">nil</span>, qos: DispatchQoS = .unspecified, flags: DispatchWorkItemFlags = [], execute work: @escaping @convention<span class="params">(block)</span></span></span> () -&gt; <span class="type">Void</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">sync</span>&lt;T&gt;<span class="params">(execute work: <span class="params">()</span></span></span> <span class="keyword">throws</span> -&gt; <span class="type">T</span>) <span class="keyword">rethrows</span> -&gt; <span class="type">T</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">sync</span>&lt;T&gt;<span class="params">(flags: DispatchWorkItemFlags, execute work: <span class="params">()</span></span></span> <span class="keyword">throws</span> -&gt; <span class="type">T</span>) <span class="keyword">rethrows</span> -&gt; <span class="type">T</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">asyncAfter</span><span class="params">(deadline: DispatchTime, qos: DispatchQoS = .unspecified, flags: DispatchWorkItemFlags = [], execute work: @escaping @convention<span class="params">(block)</span></span></span> () -&gt; <span class="type">Void</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">asyncAfter</span><span class="params">(wallDeadline: DispatchWallTime, qos: DispatchQoS = .unspecified, flags: DispatchWorkItemFlags = [], execute work: @escaping @convention<span class="params">(block)</span></span></span> () -&gt; <span class="type">Void</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">asyncAfter</span><span class="params">(deadline: DispatchTime, execute: DispatchWorkItem)</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">asyncAfter</span><span class="params">(wallDeadline: DispatchWallTime, execute: DispatchWorkItem)</span></span></span><br></pre></td></tr></table></figure><h3 id="只执行一次-task"><a class="markdownIt-Anchor" href="#只执行一次-task"></a> 只执行一次 task</h3><p>dispatch_once 只执行一次指定的block。它的性能要比@synchronized要好。@synchronized每一次都要先获取锁，而dispatch_once使用一个token标识代码是否执行过。</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="built_in">dispatch_once_t</span> onceToken;</span><br><span class="line"><span class="built_in">dispatch_once</span>(&amp;onceToken, ^&#123;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>在Swift 3.0中这个函数被废弃了，但是可以使用懒加载的全局变量或静态变量，也能保证线程安全。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> onceTask: <span class="type">String</span> = &#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="string">"onceTask"</span></span><br><span class="line">&#125;()</span><br></pre></td></tr></table></figure><h3 id="添加栅栏函数"><a class="markdownIt-Anchor" href="#添加栅栏函数"></a> 添加栅栏函数</h3><p><img src="/img/barrier.jpeg" alt=""></p><p>Dispatch Barrier解决多线程多读单写同一个资源发生死锁问题<br>同步队列中不会出现这个问题<br>在并发队列中，如果添加了 <code>.barrier</code> task 那么在 <code>.barrier</code> task 之前添加的任务所有任务执行之前都会有任务执行，在全局并发队列和串行队列上，效果和dispatch_sync一样</p><p><img src="/img/GCD_barrier.jpg" alt="barrier"></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">barrier</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="keyword">let</span> q = <span class="type">DispatchQueue</span>(label: <span class="string">"barrier"</span>, attributes: .concurrent)</span><br><span class="line">  q.async &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">1</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  q.async(flags: .barrier) &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"sleep 2s----"</span>)</span><br><span class="line">    sleep(<span class="number">2</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  q.async &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">3</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  q.async &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">4</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><details><summary>一个 barrier 功能的 PhotoManager</summary><pre><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PhotoManager</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">init</span>() &#123;&#125;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">let</span> shared = <span class="type">PhotoManager</span>()</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">let</span> concurrentPhotoQueue =</span><br><span class="line">    <span class="type">DispatchQueue</span>(</span><br><span class="line">      label: <span class="string">"com.raywenderlich.GooglyPuff.photoQueue"</span>,</span><br><span class="line">      attributes: .concurrent)</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">var</span> unsafePhotos: [<span class="type">Photo</span>] = []</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">var</span> photos: [<span class="type">Photo</span>] &#123;</span><br><span class="line">    <span class="keyword">var</span> photosCopy: [<span class="type">Photo</span>] = []</span><br><span class="line">    concurrentPhotoQueue.sync &#123;</span><br><span class="line">      photosCopy = <span class="keyword">self</span>.unsafePhotos</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> photosCopy</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">addPhoto</span><span class="params">(<span class="number">_</span> photo: Photo)</span></span> &#123;</span><br><span class="line">    concurrentPhotoQueue.async(flags: .barrier) &#123; [<span class="keyword">weak</span> <span class="keyword">self</span>] <span class="keyword">in</span></span><br><span class="line">      <span class="keyword">guard</span> <span class="keyword">let</span> <span class="keyword">self</span> = <span class="keyword">self</span> <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">self</span>.unsafePhotos.append(photo)</span><br><span class="line">      <span class="type">DispatchQueue</span>.main.async &#123; [<span class="keyword">weak</span> <span class="keyword">self</span>] <span class="keyword">in</span></span><br><span class="line">        <span class="keyword">self</span>?.postContentAddedNotification()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">downloadPhotos</span><span class="params">(withCompletion completion: BatchPhotoDownloadingCompletionClosure?)</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> storedError: <span class="type">NSError?</span></span><br><span class="line">    <span class="keyword">for</span> address <span class="keyword">in</span> [<span class="type">PhotoURLString</span>.overlyAttachedGirlfriend,</span><br><span class="line">                    <span class="type">PhotoURLString</span>.successKid,</span><br><span class="line">                    <span class="type">PhotoURLString</span>.lotsOfFaces] &#123;</span><br><span class="line">                      <span class="keyword">let</span> url = <span class="type">URL</span>(string: address)</span><br><span class="line">                      <span class="keyword">let</span> photo = <span class="type">DownloadPhoto</span>(url: url!) &#123; <span class="number">_</span>, error <span class="keyword">in</span></span><br><span class="line">                        <span class="keyword">if</span> error != <span class="literal">nil</span> &#123;</span><br><span class="line">                          storedError = error</span><br><span class="line">                        &#125;</span><br><span class="line">                      &#125;</span><br><span class="line">                      <span class="type">PhotoManager</span>.shared.addPhoto(photo)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    completion?(storedError)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">postContentAddedNotification</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="type">NotificationCenter</span>.<span class="keyword">default</span>.post(name: <span class="type">PhotoManagerNotification</span>.contentAdded, object: <span class="literal">nil</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></pre></details><h3 id="添加-group-通知"><a class="markdownIt-Anchor" href="#添加-group-通知"></a> 添加 group 通知</h3><p>dispatch groups是专门用来监视多个异步任务。dispatch_group_t实例用来追踪不同队列中的不同任务。</p><p>当group里所有事件都完成GCD API有两种方式发送通知，第一种是dispatch_group_wait，会阻塞当前进程，等所有任务都完成或等待超时。第二种方法是使用dispatch_group_notify，异步执行闭包，不会阻塞。</p><details><summary>一个很棒的 使用 group 做同步的例子</summary><pre><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PhotoManager</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">init</span>() &#123;&#125;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">let</span> shared = <span class="type">PhotoManager</span>()</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">let</span> concurrentPhotoQueue =</span><br><span class="line">    <span class="type">DispatchQueue</span>(</span><br><span class="line">      label: <span class="string">"com.raywenderlich.GooglyPuff.photoQueue"</span>,</span><br><span class="line">      attributes: .concurrent)</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">var</span> unsafePhotos: [<span class="type">Photo</span>] = []</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">var</span> photos: [<span class="type">Photo</span>] &#123;</span><br><span class="line">    <span class="keyword">var</span> photosCopy: [<span class="type">Photo</span>]!</span><br><span class="line">    concurrentPhotoQueue.sync &#123;</span><br><span class="line">      photosCopy = <span class="keyword">self</span>.unsafePhotos</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> photosCopy</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">addPhoto</span><span class="params">(<span class="number">_</span> photo: Photo)</span></span> &#123;</span><br><span class="line">    concurrentPhotoQueue.async(flags: .barrier) &#123; [<span class="keyword">weak</span> <span class="keyword">self</span>] <span class="keyword">in</span></span><br><span class="line">      <span class="keyword">guard</span> <span class="keyword">let</span> <span class="keyword">self</span> = <span class="keyword">self</span> <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">self</span>.unsafePhotos.append(photo)</span><br><span class="line">      <span class="type">DispatchQueue</span>.main.async &#123; [<span class="keyword">weak</span> <span class="keyword">self</span>] <span class="keyword">in</span></span><br><span class="line">        <span class="keyword">self</span>?.postContentAddedNotification()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">downloadPhotos</span><span class="params">(withCompletion completion: BatchPhotoDownloadingCompletionClosure?)</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> storedError: <span class="type">NSError?</span></span><br><span class="line">    <span class="keyword">let</span> downloadGroup = <span class="type">DispatchGroup</span>()</span><br><span class="line">    <span class="keyword">var</span> addresses = [<span class="type">PhotoURLString</span>.overlyAttachedGirlfriend,</span><br><span class="line">                     <span class="type">PhotoURLString</span>.successKid,</span><br><span class="line">                     <span class="type">PhotoURLString</span>.lotsOfFaces]</span><br><span class="line">    addresses += addresses + addresses</span><br><span class="line">    <span class="keyword">var</span> blocks: [<span class="type">DispatchWorkItem</span>] = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> index <span class="keyword">in</span> <span class="number">0</span>..&lt;addresses.<span class="built_in">count</span> &#123;</span><br><span class="line">      downloadGroup.enter()</span><br><span class="line">      <span class="keyword">let</span> block = <span class="type">DispatchWorkItem</span>(flags: .inheritQoS) &#123;</span><br><span class="line">        <span class="keyword">let</span> address = addresses[index]</span><br><span class="line">        <span class="keyword">let</span> url = <span class="type">URL</span>(string: address)</span><br><span class="line">        <span class="keyword">let</span> photo = <span class="type">DownloadPhoto</span>(url: url!) &#123; <span class="number">_</span>, error <span class="keyword">in</span></span><br><span class="line">          <span class="keyword">if</span> error != <span class="literal">nil</span> &#123;</span><br><span class="line">            storedError = error</span><br><span class="line">          &#125;</span><br><span class="line">          downloadGroup.leave()</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">PhotoManager</span>.shared.addPhoto(photo)</span><br><span class="line">      &#125;</span><br><span class="line">      blocks.append(block)</span><br><span class="line">      <span class="type">DispatchQueue</span>.main.async(execute: block)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> block <span class="keyword">in</span> blocks[<span class="number">3</span>..&lt;blocks.<span class="built_in">count</span>] &#123;</span><br><span class="line">      <span class="keyword">let</span> cancel = <span class="type">Bool</span>.random()</span><br><span class="line">      <span class="keyword">if</span> cancel &#123;</span><br><span class="line">        block.cancel()</span><br><span class="line">        downloadGroup.leave()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    downloadGroup.notify(queue: <span class="type">DispatchQueue</span>.main) &#123;</span><br><span class="line">      completion?(storedError)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">postContentAddedNotification</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="type">NotificationCenter</span>.<span class="keyword">default</span>.post(name: <span class="type">PhotoManagerNotification</span>.contentAdded, object: <span class="literal">nil</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></pre></details><h3 id="挂起恢复队列"><a class="markdownIt-Anchor" href="#挂起恢复队列"></a> 挂起/恢复队列</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">queue.suspend()</span><br><span class="line">queue.resume()</span><br></pre></td></tr></table></figure><p>这里挂起不会暂停正在执行的block</p><h3 id="dispatch_apply进行快速迭代"><a class="markdownIt-Anchor" href="#dispatch_apply进行快速迭代"></a> dispatch_apply进行快速迭代</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">apply</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="keyword">let</span> q = <span class="type">DispatchQueue</span>(label: <span class="string">"apply"</span>, attributes: .concurrent)</span><br><span class="line">  __dispatch_apply(<span class="number">5</span>, q)&#123; idx <span class="keyword">in</span></span><br><span class="line">    <span class="built_in">print</span>(idx)<span class="comment">// 异步并发</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">"apply end"</span>)<span class="comment">// 同步等待</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">0</span></span><br><span class="line"><span class="comment">4</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">3</span></span><br><span class="line"><span class="comment">2</span></span><br><span class="line"><span class="comment">apply end</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>dispatch_apply</p><ul><li>在并发队列中使用</li><li>将 task 追加到队列中</li><li>所有 task 并发执行完以后同步执行后面的打印</li><li>dispatch_apply 添加的 task 是异步并发执行，外部是同步执行</li></ul><p><img src="/img/GCD_apply.jpg" alt="apply"></p><p>用dispatch_apply替代对数组等的for循环，把这些block放到并行队列中可以提高执行效率。</p><h3 id="dispatch-semaphore"><a class="markdownIt-Anchor" href="#dispatch-semaphore"></a> Dispatch Semaphore</h3><p>使用变量管理多线程的同步方法</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">dispatch_semaphore_t</span> dispatch_semaphore_create(<span class="keyword">long</span> value);</span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">dispatch_semaphore_wait</span><span class="params">(<span class="keyword">dispatch_semaphore_t</span> dsema, <span class="keyword">dispatch_time_t</span> timeout)</span></span>; </span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">dispatch_semaphore_signal</span><span class="params">(<span class="keyword">dispatch_semaphore_t</span> dsema)</span></span>;</span><br></pre></td></tr></table></figure><blockquote><p><a href="https://objccn.io/issue-2-1/" target="_blank" rel="noopener">并发编程：API 及挑战</a><br><a href="https://github.com/ming1016/study/wiki/%E7%BB%86%E8%AF%B4GCD%EF%BC%88Grand-Central-Dispatch%EF%BC%89%E5%A6%82%E4%BD%95%E7%94%A8" target="_blank" rel="noopener">细说GCD（Grand Central Dispatch）如何用</a><br>raywenderlich 这两篇实例很棒！<br><a href="https://www.raywenderlich.com/5370-grand-central-dispatch-tutorial-for-swift-4-part-1-2" target="_blank" rel="noopener">Grand Central Dispatch Tutorial for Swift 4: Part 1/2</a><br><a href="http://www.raywenderlich.com/79150/grand-central-dispatch-tutorial-swift-part-2" target="_blank" rel="noopener">Grand Central Dispatch Tutorial for Swift 4: Part 2/2<br></a></p></blockquote><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> iOS Programming </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> 底层 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简化设计 App 的过程</title>
      <link href="/2018/12/06/%E7%AE%80%E5%8C%96%E8%AE%BE%E8%AE%A1-App-%E7%9A%84%E8%BF%87%E7%A8%8B/"/>
      <url>/2018/12/06/%E7%AE%80%E5%8C%96%E8%AE%BE%E8%AE%A1-App-%E7%9A%84%E8%BF%87%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Jun 02 2020 17:35:51 GMT+0800 (CST) --><a id="more"></a><h2 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h2><p>一个 app 原型&amp;需求来了以后，如何实现呢？<br>本来一个完成的东西如何把需求翻译成程序呢？</p><h2 id="正常节奏"><a class="markdownIt-Anchor" href="#正常节奏"></a> 正常节奏：</h2><ol><li>分析需求<ol><li>原型分析</li><li>需求分析</li></ol></li><li>技术点调研分析<ol><li>架构方式</li><li>使用什么框架（框架对比）</li><li>View 层使用什么渲染方式，Model层使用什么组件，中间层使用什么工具</li></ol></li><li>时间预估<ol><li>新技术学习时间</li><li>开发时间</li><li>调试时间</li></ol></li></ol><h2 id="遇到问题"><a class="markdownIt-Anchor" href="#遇到问题"></a> 遇到问题</h2><ol><li>需求量大，强调代码的复用性！思考时间过长</li><li>需求理解错误，理解不深，差异性问题没有解决</li><li>新技术，熟练度问题，错误使用</li><li>沟通问题！</li></ol><h2 id="简单思考"><a class="markdownIt-Anchor" href="#简单思考"></a> 简单思考</h2><ol><li>简化开发流程！</li><li>App 编码过程<ol><li>照着画 UI</li><li>确定数据渲染方式！</li><li>简化让 model 层数据传到 UI 层渲染的过程，让水流通（我喜欢的方式是函数响应式 rx）</li><li>数据流连接完成以后，添加各种逻辑<ol><li>单链逻辑</li><li>一条条加</li><li>复用的地方在复用</li></ol></li></ol></li><li>代码不是一下子完美的！<ol><li>开始的时候不要太复杂</li><li>不要用太高端自己又不熟悉的技巧</li><li>重构优化使用更好地技术手段都是迭代的过程</li></ol></li></ol><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> 思考 </category>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习感悟 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>viewController transitions</title>
      <link href="/2018/11/06/UI%20%E7%9B%B8%E5%85%B3/viewController-transitions/"/>
      <url>/2018/11/06/UI%20%E7%9B%B8%E5%85%B3/viewController-transitions/</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Jun 02 2020 17:35:52 GMT+0800 (CST) --><a id="more"></a><h2 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h2><p>iOS 系统提供了像 <code>push, pop, cover vertically</code> 这样的 <code>ViewController</code> 过渡，该篇分析如何自定义自己的 ViewController transitions。为啥要写这个因为“看着很麻烦”，比起 push，pop，present 来说……</p><p>思考：</p><ol><li>ViewController 的 过渡流程步骤是什么样的</li><li>都有什么组成，他们之间的逻辑是什么样的</li><li>用户如何使用</li></ol><p>过渡的过程，应该有：</p><ol><li>负责触发事件</li><li>负责管理过渡动画</li><li>负责过渡相关的ViewControllers，Views</li></ol><h2 id="transitions-结构"><a class="markdownIt-Anchor" href="#transitions-结构"></a> transitions 结构</h2><p>transitioning API 一组 protocols 结合，允许我们自定义化，使用一个现有的 transition 对象 or 自己定义一个新的。<br><img src="/img/Transition-Frame.jpeg" alt="transitioning API"></p><p>Q: 每个协议的责任是什么？<br>Q: 执行步骤是什么</p><h3 id="transitioning-delegate"><a class="markdownIt-Anchor" href="#transitioning-delegate"></a> Transitioning Delegate</h3><p>每个 ViewController 都有对象—— <code>transitioningDelegate: UIViewControllerTransitioningDelegate</code> 用来得到 Animation controller 对象</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">CardViewController</span>: <span class="title">UIViewControllerTransitioningDelegate</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">animationController</span><span class="params">(forPresented presented: UIViewController, presenting: UIViewController, source: UIViewController)</span></span> -&gt; <span class="type">UIViewControllerAnimatedTransitioning?</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="type">FlipPresentAnimationController</span>(originFrame: cardView.frame)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当你 present or dismiss <code>ViewController</code> 的时候，UIKit 会向 <code>transitioningDelegate</code> 要你自定义的 <code>Animation controller</code> 来替代默认动画。你要做的是实现 <code>UIViewControllerTransitioningDelegate</code> 代理方法返回 <code>Animation controller</code></p><h3 id="animation-controller"><a class="markdownIt-Anchor" href="#animation-controller"></a> Animation Controller</h3><p>用来做过渡动画，他实现自 <code>UIViewControllerAnimatedTransitioning</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FlipPresentAnimationController</span>: <span class="title">NSObject</span>,<span class="title">UIViewControllerAnimatedTransitioning</span> </span>&#123;</span><br><span class="line"><span class="comment">// 设置动画时间</span></span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">transitionDuration</span><span class="params">(using transitionContext: UIViewControllerContextTransitioning?)</span></span> -&gt; <span class="type">TimeInterval</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0.6</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">// 从UIViewControllerContextTransitioning 中得到 toVc &amp; fromVc，对其制作动画</span></span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">animateTransition</span><span class="params">(using transitionContext: UIViewControllerContextTransitioning)</span></span> &#123;</span><br><span class="line">    <span class="comment">//1 通过 transitionContext 得到 fromVC 是触发 present的VC，toVC 是要被呈现的 VC，snapShot，是toVC 呈现以后的view 截图用于做动画</span></span><br><span class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> fromVC = transitionContext.viewController(forKey: .from),</span><br><span class="line">      <span class="keyword">let</span> toVC = transitionContext.viewController(forKey: .to),</span><br><span class="line">      <span class="keyword">let</span> snapshot = toVC.view.snapshotView(afterScreenUpdates: <span class="literal">true</span>)</span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//containerView 是过渡过程中的容器 view</span></span><br><span class="line">    <span class="keyword">let</span> containerView = transitionContext.containerView</span><br><span class="line">    <span class="keyword">let</span> finalFrame = transitionContext.finalFrame(<span class="keyword">for</span>: toVC)</span><br><span class="line"></span><br><span class="line">    snapshot.frame = originFrame</span><br><span class="line">    snapshot.layer.cornerRadius = <span class="type">CardViewController</span>.cardCornerRadius</span><br><span class="line">    snapshot.layer.masksToBounds = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">    containerView.addSubview(toVC.view)</span><br><span class="line">    containerView.addSubview(snapshot)</span><br><span class="line">    toVC.view.isHidden = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">    <span class="type">AnimationHelper</span>.perspectiveTransform(<span class="keyword">for</span>: containerView)</span><br><span class="line">    snapshot.layer.transform = <span class="type">AnimationHelper</span>.yRotation(.pi / <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">let</span> duration = transitionDuration(using: transitionContext)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 对 view 做动画处理</span></span><br><span class="line">    <span class="type">UIView</span>.animateKeyframes(</span><br><span class="line">      withDuration: duration,</span><br><span class="line">      delay: <span class="number">0</span>,</span><br><span class="line">      options: .calculationModeCubic,</span><br><span class="line">      animations: &#123;</span><br><span class="line">        <span class="type">UIView</span>.addKeyframe(withRelativeStartTime: <span class="number">0.0</span>, relativeDuration: <span class="number">1</span>/<span class="number">3</span>) &#123;</span><br><span class="line">          fromVC.view.layer.transform = <span class="type">AnimationHelper</span>.yRotation(-.pi / <span class="number">2</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">UIView</span>.addKeyframe(withRelativeStartTime: <span class="number">1</span>/<span class="number">3</span>, relativeDuration: <span class="number">1</span>/<span class="number">3</span>) &#123;</span><br><span class="line">          snapshot.layer.transform = <span class="type">AnimationHelper</span>.yRotation(<span class="number">0.0</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">UIView</span>.addKeyframe(withRelativeStartTime: <span class="number">2</span>/<span class="number">3</span>, relativeDuration: <span class="number">1</span>/<span class="number">3</span>) &#123;</span><br><span class="line">          snapshot.frame = finalFrame</span><br><span class="line">          snapshot.layer.cornerRadius = <span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">      completion: &#123; <span class="number">_</span> <span class="keyword">in</span></span><br><span class="line">        toVC.view.isHidden = <span class="literal">false</span></span><br><span class="line">        snapshot.removeFromSuperview()</span><br><span class="line">        fromVC.view.layer.transform = <span class="type">CATransform3DIdentity</span></span><br><span class="line">        transitionContext.completeTransition(!transitionContext.transitionWasCancelled)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="简述"><a class="markdownIt-Anchor" href="#简述"></a> 简述</h2><p>对于需要自定义的 transitioning 的 ViewController，CustomViewController</p><ol><li>CustomViewController: UIViewControllerTransitioningDelegate 实现协议</li><li>实现协议的</li></ol><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">animationController(presented:, presenting:, source:) -&gt; <span class="type">UIViewControllerAnimatedTransitioning</span></span><br><span class="line">animationController(dismiss:) -&gt; <span class="type">UIViewControllerAnimatedTransitioning</span></span><br></pre></td></tr></table></figure><ol start="3"><li>自定义 Animation Controller（CustomeAnimationController: UIViewControllerAnimatedTransitioning)</li><li>实现 UIViewControllerAnimatedTransitioning 中的</li></ol><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">transitionDuration(using transitionContext: <span class="type">UIViewControllerContextTransitioning?</span>) -&gt; <span class="type">TimeInterval</span></span><br><span class="line">animateTransition(transitionContext:)</span><br></pre></td></tr></table></figure><h2 id="给-dismiss-添加手势交互"><a class="markdownIt-Anchor" href="#给-dismiss-添加手势交互"></a> 给 dismiss 添加手势交互</h2><p><img src="https://koenig-media.raywenderlich.com/uploads/2015/07/settings.gif" alt=""></p><blockquote><p><a href="https://www.raywenderlich.com/322-custom-uiviewcontroller-transitions-getting-started#toc-anchor-011" target="_blank" rel="noopener">Custom UIViewController Transitions: Getting Started</a></p></blockquote><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> iOS Programming </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>App 架构</title>
      <link href="/2018/09/18/architecture/App-%E6%9E%B6%E6%9E%84/"/>
      <url>/2018/09/18/architecture/App-%E6%9E%B6%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Jun 02 2020 17:35:52 GMT+0800 (CST) --><a id="more"></a><p>objc 《App 架构》 笔记</p><h2 id="如何设计架构"><a class="markdownIt-Anchor" href="#如何设计架构"></a> 如何设计架构</h2><ol><li>确定模块（Model 层，View 层，协调器……）<ol><li>如何确定模块？联想实际场景，分析责任、行为，确定模块！！</li><li>为什么要确定模块？确定模块后，程序不会被应用框架中的实现细节所支配</li></ol></li><li>模块间的联系，依赖，变换，通知行为如何定义。<ol><li>尽可能让数据流向单向清晰</li><li>确定数据流向行为统一一致，统一程序开发维护<ol><li>delegate，notification，block，kvo，Rx……</li></ol></li></ol></li></ol><h2 id="mvc"><a class="markdownIt-Anchor" href="#mvc"></a> MVC</h2><p><img src="/img/MVC.jpeg" alt="mvc"></p><p>Model 层包括，data model和server model<br>controler：引用 server model</p><h2 id="mvvm-c"><a class="markdownIt-Anchor" href="#mvvm-c"></a> MVVM-C</h2><p><img src="/img/mvvm-c.jpeg" alt="mvvm-c"></p><h2 id="网络"><a class="markdownIt-Anchor" href="#网络"></a> 网络</h2><h2 id="mvcviewstate"><a class="markdownIt-Anchor" href="#mvcviewstate"></a> MVC+ViewState</h2><p><img src="/img/mvc-viewstate.jpeg" alt="mvc-viewstate"></p><h2 id="model-适配器-view-绑定器"><a class="markdownIt-Anchor" href="#model-适配器-view-绑定器"></a> Model 适配器 + View 绑定器</h2><h2 id="elm-架构"><a class="markdownIt-Anchor" href="#elm-架构"></a> Elm 架构</h2><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> 设计思想 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计思想 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>“T” 字模型</title>
      <link href="/2018/08/24/%E5%BC%80%E5%8F%91%E4%B8%8A%E7%9A%84%E6%80%9D%E8%80%83/"/>
      <url>/2018/08/24/%E5%BC%80%E5%8F%91%E4%B8%8A%E7%9A%84%E6%80%9D%E8%80%83/</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Jun 02 2020 17:35:51 GMT+0800 (CST) --><a id="more"></a><h2 id="架构的时候容易乱使用-t-字模型思考"><a class="markdownIt-Anchor" href="#架构的时候容易乱使用-t-字模型思考"></a> 架构的时候容易乱——使用 “T” 字模型思考</h2><p>原因：<br>架构代码的时候，总想有没有更好地解决方案，如何尽可能的模块解耦，责任单一……，如何查分类，架构中需要有什么模块，需要使用什么工具链……</p><p>可是一下子把所有问放在一起，整个人很多时候会乱，而且想的越多越乱</p><p>解决方案：</p><ol><li>简单化模块，现有最基本的框架 eg MVVM，MVC</li><li>把最简单的模型先搭建起来，然后实现一个主流程功能</li><li>接着在实现其他主流程功能</li><li>想想可以添加那些 模块组件 让自己的架构更加优美</li><li>重构，然后再先有个主流程线</li></ol><p>总结：</p><ol><li>现有要做的东西有个 外在的整体认识，想给用户提供什么 接口！</li><li>先实现一个接口的功能，然后再把所有线的实现出来</li><li>重构</li></ol><p>整体思想方式 是 “T” 字思考</p><h2 id="模块组件间交互繁杂-为什么有-中介者"><a class="markdownIt-Anchor" href="#模块组件间交互繁杂-为什么有-中介者"></a> 模块组件间交互繁杂—— 为什么有 中介者</h2><ol><li>程序调用流程是线性的，思维混乱的程序员很容易把这条线搞的杂乱无章，虽然可以让程序跑起来，可是维护费劲</li><li>中介者：模块中提供中介者，定义一种编程规范，使用 中介者 让代码分类，这样把模块减少，减少杂乱的线，这些线放在中介者中</li></ol><p><img src="/img/meditator_chaos.jpg" alt="chaos"><br><img src="/img/meditator_order.jpg" alt="order"></p><p>中介者—— 像个管理者一样，在实际中调度各个部门，部门有什么问题想中介者汇报</p><p>如果没有中介者——管理者，那么 部门之间问题相互穿插 orz</p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> 思考 </category>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习感悟 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RxSwift 源码分析</title>
      <link href="/2018/08/18/RxSwfit+RAC/RxSwift-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
      <url>/2018/08/18/RxSwfit+RAC/RxSwift-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Jun 02 2020 17:35:52 GMT+0800 (CST) --><p><img src="/img/RxSwift001.jpg" alt="frame"></p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> 第三方框架 </category>
          
          <category> RxSwift </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码 </tag>
            
            <tag> RxSwift </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爬楼梯</title>
      <link href="/2018/07/03/%E7%88%AC%E6%A5%BC%E6%A2%AF/"/>
      <url>/2018/07/03/%E7%88%AC%E6%A5%BC%E6%A2%AF/</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Jun 02 2020 17:35:51 GMT+0800 (CST) --><a id="more"></a><p><a href="https://leetcode-cn.com/problems/climbing-stairs" target="_blank" rel="noopener">爬楼梯</a></p><h2 id="问题描述"><a class="markdownIt-Anchor" href="#问题描述"></a> 问题描述</h2><p>假设你正在爬楼梯。需要 n 阶你才能到达楼顶。<br>每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">注意：给定 n 是一个正整数。 </span><br><span class="line">示例 <span class="number">1</span>： </span><br><span class="line">输入： <span class="number">2</span></span><br><span class="line">输出： <span class="number">2</span></span><br><span class="line">解释： 有两种方法可以爬到楼顶。</span><br><span class="line"><span class="number">1.</span>  <span class="number">1</span> 阶 + <span class="number">1</span> 阶</span><br><span class="line"><span class="number">2.</span>  <span class="number">2</span> 阶</span><br><span class="line"></span><br><span class="line">示例 <span class="number">2</span>： </span><br><span class="line">输入： <span class="number">3</span></span><br><span class="line">输出： <span class="number">3</span></span><br><span class="line">解释： 有三种方法可以爬到楼顶。</span><br><span class="line"><span class="number">1.</span>  <span class="number">1</span> 阶 + <span class="number">1</span> 阶 + <span class="number">1</span> 阶</span><br><span class="line"><span class="number">2.</span>  <span class="number">1</span> 阶 + <span class="number">2</span> 阶</span><br><span class="line"><span class="number">3.</span>  <span class="number">2</span> 阶 + <span class="number">1</span> 阶</span><br></pre></td></tr></table></figure><h2 id="分析"><a class="markdownIt-Anchor" href="#分析"></a> 分析</h2><ol><li>使用递归暴力解决问题</li><li>优化使用记忆化递归</li><li>动态规划</li></ol><p>climbStairs(i,n)=(i+1,n)+climbStairs(i+2,n)</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">climbStairs</span><span class="params">(<span class="number">_</span> n: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">climbStairs_</span><span class="params">(<span class="number">_</span> i: Int, <span class="number">_</span> n: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> i &gt; n &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> i == n &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> climbStairs_(i+<span class="number">1</span>, n) + climbStairs_(i+<span class="number">2</span>, n)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; </span><br><span class="line">  <span class="keyword">return</span> climbStairs_(<span class="number">0</span>, n)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">climbStairs</span><span class="params">(<span class="number">_</span> n: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">  <span class="keyword">var</span> memo: [<span class="type">Int?</span>] = <span class="type">Array</span>(repeating: <span class="literal">nil</span>, <span class="built_in">count</span>: n)</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">climbStairs</span><span class="params">(<span class="number">_</span> n: Int, <span class="number">_</span> memo: <span class="keyword">inout</span> [Int?])</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> n &lt;= <span class="number">2</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> n</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> index = n - <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> memo[index] != <span class="literal">nil</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> memo[index]!</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">      memo[index] = climbStairs(n - <span class="number">1</span>, &amp;memo) + climbStairs(n - <span class="number">2</span>, &amp;memo)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> memo[index]!</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">let</span> res = climbStairs(n, &amp;memo)</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">climbStairs</span><span class="params">(<span class="number">_</span> n: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">  <span class="keyword">guard</span> n &gt; <span class="number">1</span> <span class="keyword">else</span> &#123; <span class="keyword">return</span> n &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">var</span> dp: [<span class="type">Int</span>] = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line">  <span class="keyword">var</span> i = <span class="number">3</span></span><br><span class="line">  <span class="keyword">while</span> i &lt;= n &#123;</span><br><span class="line">    dp.append(dp[i-<span class="number">1</span>] + dp[i - <span class="number">2</span>])</span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> dp[n]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">climbStairs</span><span class="params">(<span class="number">_</span> n: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">  <span class="keyword">guard</span> n &gt; <span class="number">1</span> <span class="keyword">else</span> &#123; <span class="keyword">return</span> n &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">var</span> first = <span class="number">1</span></span><br><span class="line">  <span class="keyword">var</span> second = <span class="number">2</span></span><br><span class="line">  <span class="keyword">var</span> i = <span class="number">3</span></span><br><span class="line">  <span class="keyword">while</span> i &lt;= n &#123;</span><br><span class="line">    <span class="keyword">let</span> third = first + second</span><br><span class="line">    first = second</span><br><span class="line">    second = third</span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> second</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 动态规划 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>合并两个有序数组</title>
      <link href="/2018/07/02/%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84/"/>
      <url>/2018/07/02/%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Jun 02 2020 17:35:51 GMT+0800 (CST) --><a id="more"></a><p><a href="https://leetcode-cn.com/problems/merge-sorted-array/" target="_blank" rel="noopener">合并两个有序数组</a></p><h2 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 题目描述</h2><p>给你两个有序整数数组 nums1 和 nums2，请你将 nums2 合并到 nums1 中，使 nums1 成为一个有序数组。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">说明:</span><br><span class="line">初始化 nums1 和 nums2 的元素数量分别为 m 和 n 。</span><br><span class="line">你可以假设 nums1 有足够的空间（空间大小大于或等于 m + n）来保存 nums2 中的元素。</span><br><span class="line">  </span><br><span class="line">示例:</span><br><span class="line">输入:</span><br><span class="line">nums1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>], m = <span class="number">3</span></span><br><span class="line">nums2 = [<span class="number">2</span>,<span class="number">5</span>,<span class="number">6</span>],       n = <span class="number">3</span></span><br><span class="line"></span><br><span class="line">输出: [<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br></pre></td></tr></table></figure><h2 id="分析"><a class="markdownIt-Anchor" href="#分析"></a> 分析</h2><p>有序数组合并，空间足够，那么不使用缓存处理</p><p>使用两个指针，分别指向两个数组的最后面<br>pt1 = m - 1<br>pt2 = n - 1<br>数组长度<br>len = 3 + 3<br>nums1 当前指针 curr = len - 1</p><p>因为 nums1 是连续的，nums2 放到 nums1 里面，那么当 nums2 遍历完后整个遍历就结束了</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">merge</span><span class="params">(<span class="number">_</span> nums1: <span class="keyword">inout</span> [Int], <span class="number">_</span> m: Int, <span class="number">_</span> nums2: [Int], <span class="number">_</span> n: Int)</span></span> &#123;</span><br><span class="line">  <span class="keyword">var</span> cur = m + n - <span class="number">1</span></span><br><span class="line">  <span class="keyword">var</span> idx1 = m - <span class="number">1</span></span><br><span class="line">  <span class="keyword">var</span> idx2 = n - <span class="number">1</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">while</span> idx2 &gt;= <span class="number">0</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> idx1 &gt;= <span class="number">0</span> &amp;&amp; nums1[idx1] &gt; nums2[idx2] &#123;</span><br><span class="line">      nums1[cur] = nums1[idx1]</span><br><span class="line">      idx1 -= <span class="number">1</span></span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">      nums1[cur] = nums2[idx2]</span><br><span class="line">      idx2 -= <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    cur -= <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>无重复字符的最长子串</title>
      <link href="/2018/07/02/%E6%97%A0%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E4%B8%B2/"/>
      <url>/2018/07/02/%E6%97%A0%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E4%B8%B2/</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Jun 02 2020 17:35:51 GMT+0800 (CST) --><a id="more"></a><p><a href="https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/" target="_blank" rel="noopener">无重复字符的最长子串</a></p><h2 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 题目描述</h2><p>给定一个字符串，请你找出其中不含有重复字符的 最长子串 的长度。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">示例 <span class="number">1</span>:</span><br><span class="line">输入: <span class="string">"abcabcbb"</span></span><br><span class="line">输出: <span class="number">3</span></span><br><span class="line">解释: 因为无重复字符的最长子串是 <span class="string">"abc"</span>，所以其长度为 <span class="number">3</span>。</span><br><span class="line"></span><br><span class="line">示例 <span class="number">2</span>:</span><br><span class="line">输入: <span class="string">"bbbbb"</span></span><br><span class="line">输出: <span class="number">1</span></span><br><span class="line">解释: 因为无重复字符的最长子串是 <span class="string">"b"</span>，所以其长度为 <span class="number">1</span>。</span><br><span class="line"></span><br><span class="line">示例 <span class="number">3</span>:</span><br><span class="line">输入: <span class="string">"pwwkew"</span></span><br><span class="line">输出: <span class="number">3</span></span><br><span class="line">解释: 因为无重复字符的最长子串是 <span class="string">"wke"</span>，所以其长度为 <span class="number">3</span>。</span><br><span class="line">     请注意，你的答案必须是 子串 的长度，<span class="string">"pwke"</span> 是一个子序列，不是子串。</span><br></pre></td></tr></table></figure><h2 id="分析"><a class="markdownIt-Anchor" href="#分析"></a> 分析</h2><ol><li>使用什么方法呢？<ol><li>每个是不是都是 ascii 码？如果是就尝试使用ascii做映射做</li><li>滑动窗口，从左向右滑动</li><li>动态规划缩小范围</li></ol></li></ol><p>先使用滑动窗口的方法做</p><h3 id="滑动窗口"><a class="markdownIt-Anchor" href="#滑动窗口"></a> 滑动窗口</h3><ol><li>要有左右指针指明窗口位置，大小</li><li>右指针先行走做遍历，左指针根据具体条件向右滑动</li><li>当右指针走到尽头，遍历结束</li></ol><p>题目分析：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">left, right = <span class="number">0</span></span><br><span class="line">right: <span class="number">0</span> -&gt; n</span><br><span class="line">  left 向右移动条件：</span><br><span class="line">   s[right]是否存在在窗口子串中</span><br><span class="line">   left 移动到窗口子串中字符 s[right] 的下一个位置</span><br><span class="line">   记录长度length</span><br><span class="line">返回 <span class="built_in">max</span>(right - left, length)</span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(<span class="number">_</span> s: String)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">  <span class="keyword">var</span> len = <span class="number">0</span></span><br><span class="line">  <span class="keyword">var</span> <span class="keyword">left</span> = s.startIndex</span><br><span class="line">  <span class="keyword">var</span> <span class="keyword">right</span> = <span class="keyword">left</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> window = <span class="string">""</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> <span class="keyword">right</span> != s.endIndex &#123;</span><br><span class="line">    <span class="keyword">let</span> curChar = s[<span class="keyword">right</span>]</span><br><span class="line">    <span class="keyword">if</span> window.<span class="built_in">contains</span>(curChar) &#123;</span><br><span class="line">      <span class="keyword">let</span> index = window.firstIndex(of: curChar)!</span><br><span class="line">      <span class="keyword">let</span> <span class="built_in">distance</span> = window.<span class="built_in">distance</span>(from: window.startIndex, to: index)</span><br><span class="line">      <span class="keyword">left</span> = s.index(<span class="keyword">left</span>, offsetBy: <span class="built_in">distance</span> + <span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">right</span> = s.index(after: <span class="keyword">right</span>)</span><br><span class="line">    window = <span class="type">String</span>(s[<span class="keyword">left</span>..&lt;<span class="keyword">right</span>])</span><br><span class="line">    len = <span class="built_in">max</span>(len, s.<span class="built_in">distance</span>(from: <span class="keyword">left</span>, to: <span class="keyword">right</span>))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> len</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">leetcode 结果</span><br><span class="line"><span class="number">104</span> ms<span class="number">21.1</span> <span class="type">MB</span><span class="type">Swift</span></span><br></pre></td></tr></table></figure><p>使用 hashMap 缓存window 以后优化执行时间</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(<span class="number">_</span> s: String)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">  <span class="keyword">var</span> itemMap: [<span class="type">Character</span>: <span class="type">Int</span>] = [:]</span><br><span class="line">  <span class="keyword">var</span> <span class="keyword">left</span> = <span class="number">0</span>, <span class="keyword">right</span> = <span class="number">0</span></span><br><span class="line">  <span class="keyword">var</span> len = <span class="number">0</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span> e <span class="keyword">in</span> s &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> idx = itemMap[e] &#123;</span><br><span class="line">      <span class="comment">//1. 使用max 去掉 left 之前的元素，之前是这样会有问题left = idx + 1</span></span><br><span class="line">      <span class="keyword">left</span> = <span class="built_in">max</span>(idx + <span class="number">1</span>, <span class="keyword">left</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    itemMap[e] = <span class="keyword">right</span></span><br><span class="line">    len = <span class="built_in">max</span>(len, <span class="keyword">right</span> - <span class="keyword">left</span> + <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">right</span> += <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> len</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">44</span> ms<span class="number">21.1</span> <span class="type">MB</span></span><br></pre></td></tr></table></figure><p>对于上面注释的 1，如果使用 left = idx + 1 的话 eg “abba”<br>当 curr 指针指到第二个 b 时，left = 2<br>当 curr 指针指到第二个 a 时，left = 1<br>我们要做的是如何把 itemMap 中第二个 b 之前不在 window 的元素清空掉？<br>因为结果是 index 相关，所以直接使用 max 就可以了 left = max(idx + 1, left)</p><p>P.S: 使用 max方法截断数组</p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 滑动窗口 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 滑动窗口 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关联对象</title>
      <link href="/2018/07/01/deep%20analyse/%E5%85%B3%E8%81%94%E5%AF%B9%E8%B1%A1/"/>
      <url>/2018/07/01/deep%20analyse/%E5%85%B3%E8%81%94%E5%AF%B9%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Jun 02 2020 17:35:52 GMT+0800 (CST) --><a id="more"></a><h2 id="关联对象是什么"><a class="markdownIt-Anchor" href="#关联对象是什么"></a> 关联对象是什么</h2><ul><li>他是 objective-c runtime 机制中提供的一个接口，让用户在运行时，动态的给类添加关联属性</li></ul><h2 id="关联对象的主要作用"><a class="markdownIt-Anchor" href="#关联对象的主要作用"></a> 关联对象的主要作用</h2><p>开发中如何给 category 添加成员属性呢？或者说，如何在运行时给 class 关联新的属性？</p><ul><li>主要作用：给category 添加成员变量<ul><li>category 底层结构的限制，不能添加成员变量到分类中。但可以通过关联对象来间接添加。</li><li>分类中的 @property 只能声明属性，不提供 _name, getName, setName 的实现</li><li>类中 @property 提供 _name, getName, setName 的实现</li></ul></li></ul><h2 id="如何使用关联对象呢"><a class="markdownIt-Anchor" href="#如何使用关联对象呢"></a> 如何使用关联对象呢</h2><h3 id="关联对象接口"><a class="markdownIt-Anchor" href="#关联对象接口"></a> 关联对象接口</h3><p><code>&lt;objc/runtime.h&gt;</code> 中定义的以下三个允许你将任何键值在运行时关联到对象上的函数：</p><ul><li>objc_setAssociatedObject</li><li>objc_getAssociatedObject</li><li>objc_removeAssociatedObjects</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">object   :表示关联者，是一个对象，变量名理所当然也是object</span></span><br><span class="line"><span class="comment">key      :获取被关联者的索引key</span></span><br><span class="line"><span class="comment">value    :被关联者</span></span><br><span class="line"><span class="comment">policy   :关联时采用的协议，有assign，retain，copy等协议，一般使用OBJC_ASSOCIATION_RETAIN_NONATOMIC </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function">id <span class="title">objc_getAssociatedObject</span><span class="params">(id object, <span class="keyword">const</span> <span class="keyword">void</span> *key)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">objc_setAssociatedObject</span><span class="params">(id object, <span class="keyword">const</span> <span class="keyword">void</span> *key, id value, objc_AssociationPolicy policy)</span></span>;</span><br><span class="line"><span class="comment">//移除某个对象身上的所有关联的对象。</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">objc_removeAssociatedObjects</span><span class="params">(id object)</span></span></span><br></pre></td></tr></table></figure><h2 id="实际使用效果"><a class="markdownIt-Anchor" href="#实际使用效果"></a> 实际使用效果</h2><p>对比字典实现给分类添加 property</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Banana</span> (<span class="title">Test</span>)</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">assign</span>, <span class="keyword">nonatomic</span>) <span class="built_in">CGFloat</span> weight;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">copy</span>, <span class="keyword">nonatomic</span>) <span class="built_in">NSString</span> *name;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#define Key [NSString stringWithFormat:@<span class="meta-string">"%p"</span>, self]</span></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">Banana</span> (<span class="title">Test</span>)</span></span><br><span class="line"><span class="built_in">NSMutableDictionary</span> *names_;</span><br><span class="line"><span class="built_in">NSMutableDictionary</span> *weights_;</span><br><span class="line">+ (<span class="keyword">void</span>)load &#123;</span><br><span class="line">    weights_ = [<span class="built_in">NSMutableDictionary</span> dictionary];</span><br><span class="line">    names_ = [<span class="built_in">NSMutableDictionary</span> dictionary];</span><br><span class="line">&#125;</span><br><span class="line">- (<span class="keyword">void</span>)setName:(<span class="built_in">NSString</span> *)name &#123;</span><br><span class="line">    names_[Key] = name;</span><br><span class="line">&#125;</span><br><span class="line">- (<span class="built_in">NSString</span> *)name &#123;</span><br><span class="line">    <span class="keyword">return</span> names_[Key];</span><br><span class="line">&#125;</span><br><span class="line">- (<span class="keyword">void</span>)setWeight:(<span class="keyword">int</span>)weight &#123;</span><br><span class="line">    weights_[Key] = @(weight);</span><br><span class="line">&#125;</span><br><span class="line">- (<span class="keyword">int</span>)weight &#123;</span><br><span class="line">    <span class="keyword">return</span> [weights_[Key] intValue];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><p>上面使用全局字典的方式，给分类中的成员变量添加get，set 实现体</p><p>那么如何使用关联对象呢？</p><ul><li>关联对象实现分类添加成员属性</li></ul><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">Banana</span> (<span class="title">Test</span>)</span></span><br><span class="line">- (<span class="keyword">void</span>)setName:(<span class="built_in">NSString</span> *)name&#123;</span><br><span class="line">    objc_setAssociatedObject(<span class="keyword">self</span>, <span class="keyword">@selector</span>(name), name, OBJC_ASSOCIATION_COPY_NONATOMIC);</span><br><span class="line">&#125;</span><br><span class="line">- (<span class="built_in">NSString</span> *)name &#123;</span><br><span class="line">    <span class="comment">// 隐式参数_cmd == @selector(name)</span></span><br><span class="line">    <span class="keyword">return</span> objc_getAssociatedObject(<span class="keyword">self</span>, _cmd);</span><br><span class="line">&#125;</span><br><span class="line">- (<span class="keyword">void</span>)setWeight:(<span class="keyword">int</span>)weight &#123;</span><br><span class="line">    objc_setAssociatedObject(<span class="keyword">self</span>, <span class="keyword">@selector</span>(weight), @(weight), OBJC_ASSOCIATION_RETAIN_NONATOMIC);</span><br><span class="line">&#125;</span><br><span class="line">- (<span class="keyword">int</span>)weight &#123;</span><br><span class="line">    <span class="keyword">return</span> [objc_getAssociatedObject(<span class="keyword">self</span>, _cmd) intValue];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><h2 id="关联对象源码分析"><a class="markdownIt-Anchor" href="#关联对象源码分析"></a> 关联对象源码分析</h2><p>关联对象也是用全局 hash 表来保存的。<br><a href="https://opensource.apple.com/tarballs/objc4/objc4-779.1.tar.gz" target="_blank" rel="noopener">objc4-779.1源码</a> 这个文件中 <a href="http://objc-references.mm" target="_blank" rel="noopener">objc-references.mm</a></p><p>关联对象的核心类</p><div align="left"><img src="/img/ao.jpeg" style="width:800px;height:370px"></div><ul><li>AssociationsManager</li><li>AssociationsHashMap</li><li>ObjectAssociationMap</li><li>ObjcAssociation</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AssociationsManager</span> &#123;</span></span><br><span class="line">  <span class="comment">// associative references: object pointer -&gt; PtrPtrHashMap.</span></span><br><span class="line">  <span class="keyword">static</span> AssociationsHashMap *_map;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AssociationsHashMap</span> :</span> <span class="keyword">public</span> <span class="built_in">unordered_map</span>&lt;<span class="keyword">disguised_ptr_t</span>, ObjectAssociationMap *, DisguisedPointerHash, DisguisedPointerEqual, AssociationsHashMapAllocator&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ObjectAssociationMap</span> :</span> <span class="keyword">public</span> <span class="built_in">std</span>::<span class="built_in">map</span>&lt;<span class="keyword">void</span> *, ObjcAssociation, ObjectPointerLess, ObjectAssociationMapAllocator&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ObjcAssociation</span> &#123;</span></span><br><span class="line">  <span class="keyword">uintptr_t</span> _policy;</span><br><span class="line">  id _value;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="关联对象何时释放"><a class="markdownIt-Anchor" href="#关联对象何时释放"></a> 关联对象何时释放</h3><p>…… 不想看了，想看了再补充，总之他在所关联的对象释放后，会释放的</p><h3 id="关联时采用的协议"><a class="markdownIt-Anchor" href="#关联时采用的协议"></a> 关联时采用的协议</h3><table><thead><tr><th>Behavior</th><th>@property Equivalent</th><th>Description</th></tr></thead><tbody><tr><td>OBJC_ASSOCIATION_ASSIGN</td><td>@property (assign) 或 @property (unsafe_unretained)</td><td>指定一个关联对象的弱引用。</td></tr><tr><td>OBJC_ASSOCIATION_RETAIN_NONATOMIC</td><td>@property (nonatomic, strong)</td><td>指定一个关联对象的强引用，不能被原子化使用。</td></tr><tr><td>OBJC_ASSOCIATION_COPY_NONATOMIC</td><td>@property (nonatomic, copy)</td><td>指定一个关联对象的copy引用，不能被原子化使用。</td></tr><tr><td>OBJC_ASSOCIATION_RETAIN</td><td>@property (atomic, strong)</td><td>指定一个关联对象的强引用，能被原子化使用。</td></tr><tr><td>OBJC_ASSOCIATION_COPY</td><td>@property (atomic, copy)</td><td>指定一个关联对象的copy引用，能被原子化使用。</td></tr></tbody></table><h2 id="实际中使用关联对象的例子"><a class="markdownIt-Anchor" href="#实际中使用关联对象的例子"></a> 实际中使用关联对象的例子</h2><p><a href="https://changzw.github.io/2020/03/08/%E4%BD%BF%E7%94%A8-closures-%E6%B7%BB%E5%8A%A0-Gesture-Recognizers/">使用 closures 添加 Gesture Recognizers</a></p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> iOS Programming </category>
          
          <category> objc </category>
          
          <category> runtime </category>
          
      </categories>
      
      
        <tags>
            
            <tag> objc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>__weak 实现分析</title>
      <link href="/2018/06/01/weak-%E5%AE%9E%E7%8E%B0%E5%88%86%E6%9E%90/"/>
      <url>/2018/06/01/weak-%E5%AE%9E%E7%8E%B0%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Jun 02 2020 17:35:51 GMT+0800 (CST) --><a id="more"></a><h2 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h2><p>runtime 维护了一个weak表，用于存储指向某个对象的所有weak指针。<br>weak表其实是一个hash（哈希）表：</p><ul><li>key是所指对象的地址</li><li>value是weak指针的地址（这个地址的值是所指对象指针的地址）数组</li></ul><h2 id="weak-源码分析"><a class="markdownIt-Anchor" href="#weak-源码分析"></a> weak 源码分析</h2><p>初始化一个新的weak指针指向对象的地址</p><p>__weak变量的存储</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSObject</span> *obj = [[<span class="built_in">NSObject</span> alloc] init];</span><br><span class="line"><span class="keyword">id</span> __<span class="keyword">weak</span> obj1 = obj;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 编译器模拟代码 */</span></span><br><span class="line">id obj1;</span><br><span class="line">objc_initWeak(&amp;obj1, obj);</span><br><span class="line">objc_destroyWeak(&amp;obj1);</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * Initialize a fresh weak pointer to some object location. </span></span><br><span class="line"><span class="comment"> * It would be used for code like: </span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * (The nil case) </span></span><br><span class="line"><span class="comment"> * __weak id weakPtr;</span></span><br><span class="line"><span class="comment"> * (The non-nil case) </span></span><br><span class="line"><span class="comment"> * NSObject *o = ...;</span></span><br><span class="line"><span class="comment"> * __weak id weakPtr = o;</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * This function IS NOT thread-safe with respect to concurrent </span></span><br><span class="line"><span class="comment"> * modifications to the weak variable. (Concurrent weak clear is safe.)</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param location Address of __weak ptr. </span></span><br><span class="line"><span class="comment"> * @param newObj Object ptr. </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">enum</span> HaveOld &#123; DontHaveOld = <span class="literal">false</span>, DoHaveOld = <span class="literal">true</span> &#125;;</span><br><span class="line"><span class="keyword">enum</span> HaveNew &#123; DontHaveNew = <span class="literal">false</span>, DoHaveNew = <span class="literal">true</span> &#125;;</span><br><span class="line"><span class="function">id <span class="title">objc_initWeak</span><span class="params">(id *location, id newObj)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!newObj) &#123;</span><br><span class="line">    *location = nil;</span><br><span class="line">    <span class="keyword">return</span> nil;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> storeWeak&lt;DontHaveOld, DoHaveNew, DoCrashIfDeallocating&gt;</span><br><span class="line">      (location, (objc_object*)newObj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;HaveOld haveOld, HaveNew haveNew,</span><br><span class="line">      CrashIfDeallocating crashIfDeallocating&gt;</span><br><span class="line"><span class="function"><span class="keyword">static</span> id <span class="title">storeWeak</span><span class="params">(id *location, objc_object *newObj)</span> </span>&#123;</span><br><span class="line">  Class previouslyInitializedClass = nil;</span><br><span class="line">  id oldObj;</span><br><span class="line">  SideTable *oldTable;</span><br><span class="line">  SideTable *newTable;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Acquire locks for old and new values.</span></span><br><span class="line">  <span class="comment">// Order by lock address to prevent lock ordering problems. </span></span><br><span class="line">  <span class="comment">// Retry if the old value changes underneath us.</span></span><br><span class="line"> retry:</span><br><span class="line">  <span class="keyword">if</span> (haveOld) &#123;</span><br><span class="line">    oldObj = *location;</span><br><span class="line">    oldTable = &amp;SideTables()[oldObj];</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    oldTable = nil;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (haveNew) &#123;</span><br><span class="line">    newTable = &amp;SideTables()[newObj];</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    newTable = nil;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  SideTable::lockTwo&lt;haveOld, haveNew&gt;(oldTable, newTable);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (haveOld  &amp;&amp;  *location != oldObj) &#123;</span><br><span class="line">    SideTable::unlockTwo&lt;haveOld, haveNew&gt;(oldTable, newTable);</span><br><span class="line">    <span class="keyword">goto</span> retry;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Prevent a deadlock between the weak reference machinery</span></span><br><span class="line">  <span class="comment">// and the +initialize machinery by ensuring that no </span></span><br><span class="line">  <span class="comment">// weakly-referenced object has an un-+initialized isa.</span></span><br><span class="line">  <span class="keyword">if</span> (haveNew  &amp;&amp;  newObj) &#123;</span><br><span class="line">    Class cls = newObj-&gt;getIsa();</span><br><span class="line">    <span class="keyword">if</span> (cls != previouslyInitializedClass &amp;&amp; !((objc_class *)cls)-&gt;isInitialized()) &#123;</span><br><span class="line">      SideTable::unlockTwo&lt;haveOld, haveNew&gt;(oldTable, newTable);</span><br><span class="line">      class_initialize(cls, (id)newObj);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// If this class is finished with +initialize then we're good.</span></span><br><span class="line">      <span class="comment">// If this class is still running +initialize on this thread </span></span><br><span class="line">      <span class="comment">// (i.e. +initialize called storeWeak on an instance of itself)</span></span><br><span class="line">      <span class="comment">// then we may proceed but it will appear initializing and </span></span><br><span class="line">      <span class="comment">// not yet initialized to the check above.</span></span><br><span class="line">      <span class="comment">// Instead set previouslyInitializedClass to recognize it on retry.</span></span><br><span class="line">      previouslyInitializedClass = cls; </span><br><span class="line">      <span class="keyword">goto</span> retry;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Clean up old value, if any.</span></span><br><span class="line">  <span class="keyword">if</span> (haveOld) &#123;</span><br><span class="line">    weak_unregister_no_lock(&amp;oldTable-&gt;weak_table, oldObj, location);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Assign new value, if any.</span></span><br><span class="line">  <span class="keyword">if</span> (haveNew) &#123;</span><br><span class="line">    newObj = (objc_object *)</span><br><span class="line">      weak_register_no_lock(&amp;newTable-&gt;weak_table, (id)newObj, location, </span><br><span class="line">                  crashIfDeallocating);</span><br><span class="line">    <span class="comment">// weak_register_no_lock returns nil if weak store should be rejected</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Set is-weakly-referenced bit in refcount table.</span></span><br><span class="line">    <span class="keyword">if</span> (newObj  &amp;&amp;  !newObj-&gt;isTaggedPointer()) &#123;</span><br><span class="line">      newObj-&gt;setWeaklyReferenced_nolock();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Do not set *location anywhere else. That would introduce a race.</span></span><br><span class="line">    *location = (id)newObj;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// No new value. The storage is not changed.</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  SideTable::unlockTwo&lt;haveOld, haveNew&gt;(oldTable, newTable);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (id)newObj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="sidetable"><a class="markdownIt-Anchor" href="#sidetable"></a> SideTable</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SideTable</span> &#123;</span></span><br><span class="line">  <span class="comment">// 自旋锁，用于对SideTable操作时进行加锁</span></span><br><span class="line">  <span class="keyword">spinlock_t</span> slock;</span><br><span class="line">  <span class="comment">// 存储对象的引用计数</span></span><br><span class="line">  RefcountMap refcnts;</span><br><span class="line">  <span class="comment">// 存储对象的弱引用</span></span><br><span class="line">  <span class="keyword">weak_table_t</span> weak_table; </span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从 SideTables 是一个 StripedMap<sidetable></sidetable></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> StripedMap&lt;SideTable&gt;&amp; SideTables() &#123;</span><br><span class="line">  <span class="keyword">return</span> *<span class="keyword">reinterpret_cast</span>&lt;StripedMap&lt;SideTable&gt;*&gt;(SideTableBuf);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StripedMap</span> &#123;</span></span><br><span class="line">  <span class="comment">// 定义散列表的大小</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> TARGET_OS_IPHONE &amp;&amp; !TARGET_OS_SIMULATOR</span></span><br><span class="line">  <span class="keyword">enum</span> &#123; StripeCount = <span class="number">8</span> &#125;;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">  <span class="keyword">enum</span> &#123; StripeCount = <span class="number">64</span> &#125;;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">PaddedT</span> &#123;</span></span><br><span class="line">    <span class="function">T value <span class="title">alignas</span><span class="params">(CacheLineSize)</span></span>;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  PaddedT <span class="built_in">array</span>[StripeCount];</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 散列函数：通过指针地址计算出index</span></span><br><span class="line">  <span class="function"><span class="keyword">static</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">indexForPointer</span><span class="params">(<span class="keyword">const</span> <span class="keyword">void</span> *p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">uintptr_t</span> addr = <span class="keyword">reinterpret_cast</span>&lt;<span class="keyword">uintptr_t</span>&gt;(p);</span><br><span class="line">    <span class="keyword">return</span> ((addr &gt;&gt; <span class="number">4</span>) ^ (addr &gt;&gt; <span class="number">9</span>)) % StripeCount;</span><br><span class="line">  &#125;</span><br><span class="line">   ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在发生散列冲突的时候，多个对象会共用一个SideTable，也就是多个对象会共用一个refcnts和weak_table。</p><p>weak_table_t</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">weak_table_t</span> &#123;</span></span><br><span class="line">  <span class="comment">// 存储weak_entry_t</span></span><br><span class="line">  <span class="keyword">weak_entry_t</span> *weak_entries;</span><br><span class="line">  <span class="comment">// 当前weak_entry_t的个数</span></span><br><span class="line">  <span class="keyword">size_t</span>    num_entries;</span><br><span class="line">  <span class="comment">// 当前数组能够容纳的最大个数</span></span><br><span class="line">  <span class="keyword">uintptr_t</span> mask;</span><br><span class="line">  <span class="comment">// 发生散列冲突时，能够遍历的元素的最大个数</span></span><br><span class="line">  <span class="keyword">uintptr_t</span> max_hash_displacement;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> iOS Programming </category>
          
          <category> objc </category>
          
          <category> runtime </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> 底层 </tag>
            
            <tag> objc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>autoreleasepool 实现分析</title>
      <link href="/2018/05/31/autoreleasepool-%E5%AE%9E%E7%8E%B0%E5%88%86%E6%9E%90/"/>
      <url>/2018/05/31/autoreleasepool-%E5%AE%9E%E7%8E%B0%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Jun 02 2020 17:35:51 GMT+0800 (CST) --><a id="more"></a><h2 id="autorelease-内部结构"><a class="markdownIt-Anchor" href="#autorelease-内部结构"></a> AutoRelease 内部结构</h2><p>AutoReleasePool 是利用语言上的特性，程序内存自动回收问题的</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> main(<span class="keyword">int</span> argc, <span class="keyword">char</span> * argv[]) &#123;</span><br><span class="line">  <span class="keyword">@autoreleasepool</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">UIApplicationMain</span>(argc, argv, <span class="literal">nil</span>, <span class="built_in">NSStringFromClass</span>([AppDelegate <span class="keyword">class</span>]));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@autoreleasepool 是什么？在命令行中使用 clang -rewrite-objc main.m 让编译器重新改写这个文件：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> __<span class="title">AtAutoreleasePool</span> &#123;</span></span><br><span class="line">  <span class="keyword">void</span> * atautoreleasepoolobj;</span><br><span class="line">  __AtAutoreleasePool() &#123; <span class="comment">// 构造函数</span></span><br><span class="line">     atautoreleasepoolobj = objc_autoreleasePoolPush();</span><br><span class="line">  &#125;</span><br><span class="line">  ~__AtAutoreleasePool() &#123;<span class="comment">// 析构函数</span></span><br><span class="line">     objc_autoreleasePoolPop(atautoreleasepoolobj);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[])</span> </span>&#123;</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">void</span> * atautoreleasepoolobj = objc_autoreleasePoolPush(); </span><br><span class="line">    <span class="comment">// do whatever you want</span></span><br><span class="line">    objc_autoreleasePoolPop(atautoreleasepoolobj);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>没有 AutoreleasePool 相关的类，而在 objc 源码中搜 <code>objc_autoreleasePoolPush</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> * <span class="title">objc_autoreleasePoolPush</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> AutoreleasePoolPage::push();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">objc_autoreleasePoolPop</span><span class="params">(<span class="keyword">void</span> *ctxt)</span> </span>&#123;</span><br><span class="line">  AutoreleasePoolPage::pop(ctxt);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="autoreleasepage-结构"><a class="markdownIt-Anchor" href="#autoreleasepage-结构"></a> AutoreleasePage 结构</h3><p><code>AutoreleasePage</code> 是实现 AutoreleasePool 的主要类</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AutoreleasePoolPage</span> &#123;</span></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">pthread_key_t</span> <span class="keyword">const</span> key = AUTORELEASE_POOL_KEY;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">uint8_t</span> <span class="keyword">const</span> SCRIBBLE = <span class="number">0xA3</span>;  <span class="comment">// 0xA3A3A3A3 after releasing</span></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">size_t</span> <span class="keyword">const</span> SIZE =</span><br><span class="line">#<span class="keyword">if</span> PROTECT_AUTORELEASEPOOL</span><br><span class="line">        PAGE_MAX_SIZE;  <span class="comment">// must be multiple of vm page size</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">        PAGE_MAX_SIZE;  <span class="comment">// size and alignment, power of 2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">size_t</span> <span class="keyword">const</span> COUNT = SIZE / <span class="keyword">sizeof</span>(id);<span class="comment">//一个page里要管理释放对象的个数</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> EMPTY_POOL_PLACEHOLDER ((id*)1)    <span class="comment">// 空池占位 </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> POOL_BOUNDARY nil <span class="comment">// 释放池边界</span></span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">magic_t</span> <span class="keyword">const</span> magic;  <span class="comment">// 用来校验 AutoreleasePoolPage 的结构是否完整</span></span><br><span class="line">  id *next;             <span class="comment">// 存储要用 AutoRelease 释放的对象的指针，初始化时指向 begin()</span></span><br><span class="line">  <span class="keyword">pthread_t</span> <span class="keyword">const</span> thread; <span class="comment">// 所属 thread</span></span><br><span class="line">  AutoreleasePoolPage * <span class="keyword">const</span> parent; <span class="comment">// 指向父结点，第一个结点的 parent 值为 nil</span></span><br><span class="line">  AutoreleasePoolPage *child;         <span class="comment">// 指向子结点，最后一个结点的 child 值为 nil</span></span><br><span class="line">  <span class="keyword">uint32_t</span> <span class="keyword">const</span> depth; <span class="comment">// 代表深度，从 0 开始，往后递增 1</span></span><br><span class="line">  <span class="keyword">uint32_t</span> hiwat;       <span class="comment">// (high water mark)数据容纳的一个上限</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>POOL_BOUNDARY 是一个边界对象 nil,之前的源代码变量名是 POOL_SENTINEL哨兵对象,用来区别每个page即每个 AutoreleasePoolPage 边界</p><h3 id="autoreleasepage-原理分析"><a class="markdownIt-Anchor" href="#autoreleasepage-原理分析"></a> AutoreleasePage 原理分析</h3><p>以上知道 AutoreleasePage 的结构，根据分析过程，思考为何如此设计</p><h4 id="pagepush"><a class="markdownIt-Anchor" href="#pagepush"></a> Page::push</h4><p>一开始调用的就是 <code>AutoreleasePage::push()</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">inline</span> <span class="keyword">void</span> *<span class="title">push</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  id *dest;</span><br><span class="line">  dest = autoreleaseFast(POOL_BOUNDARY); <span class="comment">// POOL_BOUNDARY 是 nil的宏定义</span></span><br><span class="line">  <span class="keyword">return</span> dest;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">inline</span> id *<span class="title">autoreleaseFast</span><span class="params">(id obj)</span></span>&#123;</span><br><span class="line">  AutoreleasePoolPage *page = hotPage();</span><br><span class="line">  <span class="keyword">if</span> (page &amp;&amp; !page-&gt;full()) &#123;</span><br><span class="line">      <span class="keyword">return</span> page-&gt;add(obj);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (page) &#123;</span><br><span class="line">      <span class="keyword">return</span> autoreleaseFullPage(obj, page);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> autoreleaseNoPage(obj);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>autoreleaseFast</code> 插入新 oc 对象元素的时候分三种情况需要处理：</p><ul><li>page未满，直接插入到当前page</li><li>page已满，创建一个新page并插入</li><li>page不存在，创建一个新page并插入</li></ul><p>最终都会通过 <code>add</code> 方法把当前需要背 AutoRelease 的对象放到 page 中，next++</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">id *<span class="title">add</span><span class="params">(id obj)</span></span>&#123;</span><br><span class="line">  assert(!full());</span><br><span class="line">  unprotect();</span><br><span class="line">  id *ret = next;</span><br><span class="line">  *next++ = obj;</span><br><span class="line">  protect();</span><br><span class="line">  <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/img/runtime-autorelease-push.jpg" alt="push 的过程"></p><p>hotPage 是当前使用的页<br>对于autoreleasePool 多层嵌套问题，每一次push 首先插入 POOL_BOUNDARY 作为哨兵，然后接着 hotPage 中的 next 指针一个个添加对象</p><h4 id="pagepopctxt"><a class="markdownIt-Anchor" href="#pagepopctxt"></a> Page::pop(ctxt)</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pop</span><span class="params">(<span class="keyword">void</span> *token)</span> </span>&#123;</span><br><span class="line">  AutoreleasePoolPage *page;</span><br><span class="line">  id *<span class="built_in">stop</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (token == (<span class="keyword">void</span>*)EMPTY_POOL_PLACEHOLDER) &#123;</span><br><span class="line">    <span class="keyword">if</span> (hotPage()) &#123;</span><br><span class="line">      pop(coldPage()-&gt;<span class="built_in">begin</span>());</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      setHotPage(nil);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  page = pageForPointer(token);</span><br><span class="line">  <span class="built_in">stop</span> = (id *)token;</span><br><span class="line"></span><br><span class="line">  page-&gt;releaseUntil(<span class="built_in">stop</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// memory: delete empty children</span></span><br><span class="line">  <span class="keyword">if</span> (page-&gt;lessThanHalfFull()) &#123;</span><br><span class="line">     page-&gt;child-&gt;kill();</span><br><span class="line">  &#125;<span class="keyword">else</span> <span class="keyword">if</span> (page-&gt;child-&gt;child) &#123;</span><br><span class="line">     page-&gt;child-&gt;child-&gt;kill();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>token : pop到参数元素所在的地址,整体过程</p><ol><li>判断是不是EMPTY_POOL_PLACEHOLDER（<code>EMPTY_POOL_PLACEHOLDER是存储在TLS中的用来表示链表最上层没有元素的pool,这样就不用创建pool可以节约内存。TLS是什么以及具体实现这篇[文章](https://blog.csdn.net/cywosp/article/details/26469435)介绍的比较详细</code>）<ol><li>如果当前 pool里面有数据，就把里面的数据清空；否者就把hotPage设置为nil。</li><li>接着调用page-&gt;releaseUntil(stop)给此参数之前的所有对象发送release释放内存，对象内存释放之后终点page之前的page都会变成空的</li><li>最后调用page-&gt;child-&gt;kill()回收这些空page资源。</li></ol></li></ol><p><img src="/img/runtime-autorelease-pop.jpg" alt="pop 的过程"></p><h2 id="如何使用-autoreleasepool呢"><a class="markdownIt-Anchor" href="#如何使用-autoreleasepool呢"></a> 如何使用 AutoReleasePool呢</h2><p><a href="https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/MemoryMgmt/Articles/mmAutoreleasePools.html" target="_blank" rel="noopener">官网文档</a></p><ol><li>使用 Cocoa 框架 创建的 thread 都会维护自己的 autorelease pool. 如果你用其他方式自己创建的 thread 需要添加 autorelease pool.</li><li>如果你的 thread 常驻的，会产生大量临时对象，那就需要使用 autorelease pool (like AppKit and UIKit do on the main thread)</li></ol><p>使用容器的block版本的枚举器时，内部会自动添加一个AutoreleasePool：</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[array enumerateObjectsUsingBlock:^(<span class="keyword">id</span> obj, <span class="built_in">NSUInteger</span> idx, <span class="built_in">BOOL</span> *stop) &#123;</span><br><span class="line">    <span class="comment">// 这里被一个局部@autoreleasepool包围着</span></span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure><p>当然，在普通for循环和for in循环中没有，所以，还是新版的block版本枚举器更加方便。for循环中遍历产生大量autorelease变量时，就需要手加局部AutoreleasePool咯。</p><blockquote><p><a href="http://blog.sunnyxx.com/2014/10/15/behind-autorelease/" target="_blank" rel="noopener">黑幕背后的Autorelease</a></p></blockquote><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> iOS Programming </category>
          
          <category> objc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> 底层 </tag>
            
            <tag> obj </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>swift 序列化Codable</title>
      <link href="/2018/05/10/swift%20%E8%AF%AD%E6%B3%95/swift-%E5%BA%8F%E5%88%97%E5%8C%96Codable/"/>
      <url>/2018/05/10/swift%20%E8%AF%AD%E6%B3%95/swift-%E5%BA%8F%E5%88%97%E5%8C%96Codable/</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Jun 02 2020 17:35:52 GMT+0800 (CST) --><a id="more"></a><h2 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h2><p>序列化是将对象的状态信息转换为可以存储或传输的形式的过程(对象&lt;–&gt;I/O流)。<br>对象信息序列化以后变成 I/O 流：</p><ol><li>可以本地化存储（持久化对象）</li><li>网络通讯（网络传输对象）</li><li>定制协议，跨平台、跨语言通讯</li></ol><h2 id="swift-中的序列化"><a class="markdownIt-Anchor" href="#swift-中的序列化"></a> Swift 中的序列化</h2><ol><li>Swift 4.0 之前仍需要手动解析</li><li>Swift 4.0 以后，提供 Codable 协议</li><li>仍然存在问题</li></ol><h3 id="没有encoder和decoder"><a class="markdownIt-Anchor" href="#没有encoder和decoder"></a> 没有Encoder和Decoder</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> json: [<span class="type">String</span> : <span class="type">Any</span>] = [</span><br><span class="line">  <span class="string">"name"</span>: <span class="string">"cap"</span>,</span><br><span class="line">  <span class="string">"points"</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="string">"description"</span>: <span class="string">"this is a cat"</span>,</span><br><span class="line">]</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Product</span> </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> name: <span class="type">String</span></span><br><span class="line">  <span class="keyword">var</span> points: <span class="type">Int</span></span><br><span class="line">  <span class="keyword">var</span> description: <span class="type">String?</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 需要手动解析</span></span><br><span class="line">  <span class="keyword">init</span>?(json: [<span class="type">String</span>: <span class="type">Any</span>]) &#123;</span><br><span class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> name = json[<span class="string">"name"</span>] <span class="keyword">as</span>? <span class="type">String</span>,</span><br><span class="line">      <span class="keyword">let</span> points = json[<span class="string">"points"</span>] <span class="keyword">as</span>? <span class="type">Int</span>,</span><br><span class="line">      <span class="keyword">let</span> description = json[<span class="string">"description"</span>] <span class="keyword">as</span>? <span class="type">String</span> <span class="keyword">else</span> &#123; <span class="keyword">return</span> <span class="literal">nil</span> &#125;</span><br><span class="line">    <span class="keyword">self</span>.name = name</span><br><span class="line">    <span class="keyword">self</span>.points = points</span><br><span class="line">    <span class="keyword">self</span>.description = description</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> p = <span class="type">Product</span>(json: json) &#123;</span><br><span class="line">  <span class="built_in">print</span>(p.name + <span class="string">" \(p.points) "</span> + p.description!)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用编码器类型遵循-codableencodable-decodable-协议"><a class="markdownIt-Anchor" href="#使用编码器类型遵循-codableencodable-decodable-协议"></a> 使用编码器，类型遵循 Codable(Encodable &amp; Decodable) 协议</h3><ol><li>类型遵循Codable</li><li>Encode</li><li>Decode</li></ol><p>2017年6月发布的 Swift4.0 中的 Codable(Encodable &amp; Decodable) 协议，表明该协议具有被序列化和/或反序列化的能⼒。<br>Swift 标准库中的所有基本类型都遵循 <code>Codable</code> 协议，<code>Data，Date， URL，CGPoint 和 CGRect</code> 在内的许多 Apple 框架中的常⽤数据类型，也已经适配了 Codable。<br>自定义类型需要用户遵循 Codable协议。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">typealias</span> <span class="type">Codable</span> = <span class="type">Decodable</span> &amp; <span class="type">Encodable</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/// 某个类型可以将⾃身编码为⼀种外部表示</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">protocol</span> <span class="title">Encodable</span> </span>&#123; <span class="comment">/// 将值编码到给定的 encoder 中</span></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">encode</span><span class="params">(to encoder: Encoder)</span></span> <span class="keyword">throws</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/// 某个类型可以从外部表示中解码得到⾃身</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">protocol</span> <span class="title">Decodable</span> </span>&#123; <span class="comment">/// 通过从给定的 decoder 中解码来创建新的实例</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">init</span>(from decoder: <span class="type">Decoder</span>) <span class="keyword">throws</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>⼀旦你拥有 codable 类型的值，你可以创建⼀个编码器，并让它将这个值转换到像是 JSON 这样的序列化格式。反过来，⼀个解码器可以将序列化后的数据转回为它原来类型的⼀个实例。</p><p>Swift ⾃带两套编码解码器，<code>JSONEncoder/JSONDecoder</code> 和 <code>PropertyListEncoder/PropertyListDecoder</code>，它们存在于 Foundation 中。</p><h2 id="jsonencoderjsondecoder"><a class="markdownIt-Anchor" href="#jsonencoderjsondecoder"></a> JSONEncoder/JSONDecoder</h2><h3 id="不需要手动解码"><a class="markdownIt-Anchor" href="#不需要手动解码"></a> 不需要手动解码</h3><p>属性名 = key，属性类型 = value 类型一致，使用 decoder 对json解码，不需要手动解码了</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> json = <span class="string">"""</span></span><br><span class="line"><span class="string">[</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">        "name": "Banana",</span></span><br><span class="line"><span class="string">        "points": 200,</span></span><br><span class="line"><span class="string">        "description": "A banana grown in Ecuador."</span></span><br><span class="line"><span class="string">    &#125;,</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">        "name": "Orange",</span></span><br><span class="line"><span class="string">        "points": 100</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">]</span></span><br><span class="line"><span class="string">"""</span>.data(using: .utf8)!</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">GroceryProduct</span>: <span class="title">Codable</span> </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> name: <span class="type">String</span></span><br><span class="line">  <span class="keyword">var</span> points: <span class="type">Int</span></span><br><span class="line">  <span class="keyword">var</span> description: <span class="type">String?</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解码</span></span><br><span class="line"><span class="keyword">let</span> decoder = <span class="type">JSONDecoder</span>()</span><br><span class="line"><span class="keyword">let</span> products = <span class="keyword">try</span> decoder.decode([<span class="type">GroceryProduct</span>].<span class="keyword">self</span>, from: json)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"The following products are available:"</span>)</span><br><span class="line"><span class="keyword">for</span> product <span class="keyword">in</span> products &#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">"\t\(product.name) (\(product.points) points)"</span>)</span><br><span class="line">  <span class="keyword">if</span> <span class="keyword">let</span> description = product.description &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"\t\t\(description)"</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 与上文无关，只描述下编码过程</span></span><br><span class="line"><span class="keyword">let</span> jsonEncoder = <span class="type">JSONEncoder</span>()</span><br><span class="line"><span class="keyword">let</span> jsonData = <span class="keyword">try</span>? jsonEncoder.encode(products)</span><br><span class="line"><span class="keyword">let</span> str = <span class="type">String</span>(decoding: jsonData!, <span class="keyword">as</span>: <span class="type">UTF8</span>.<span class="keyword">self</span>)</span><br><span class="line"><span class="built_in">print</span>(str)</span><br><span class="line"><span class="keyword">let</span> jsonObject = <span class="keyword">try</span> <span class="type">JSONSerialization</span>.jsonObject(with: jsonData!, options: .allowFragments)</span><br><span class="line"><span class="built_in">print</span>(jsonObject)</span><br></pre></td></tr></table></figure><p>GroceryProduct 类中属性都遵循 <code>Codable</code> 协议，Array也是，所以不需要实现 <code>encode(to encoder: Encoder)</code> 和 <code>init(from decoder: Decoder)</code> 方法</p><h3 id="需要手动解码"><a class="markdownIt-Anchor" href="#需要手动解码"></a> 需要手动解码</h3><h4 id="json中的key值与属性名称不一致"><a class="markdownIt-Anchor" href="#json中的key值与属性名称不一致"></a> json中的key值与属性名称不一致</h4><p>但是这个类型实际上并不⼀定需要是枚 举)。提供⾃定义的编码键是⼀种很简单，⽽且是声明式的改变类型编码的⽅式。在枚举中，我 们可以：</p><p>→ 使⽤明确给定的字符串值，在编码后的输出中重命名字段，或者</p><p>→ 将某个键从枚举中移除，以此完全跳过字段。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> json = <span class="string">"""</span></span><br><span class="line"><span class="string">[</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">        "product_name": "Bananas",</span></span><br><span class="line"><span class="string">        "product_cost": 200,</span></span><br><span class="line"><span class="string">        "description": "A banana grown in Ecuador."</span></span><br><span class="line"><span class="string">    &#125;,</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">        "product_name": "Oranges",</span></span><br><span class="line"><span class="string">        "product_cost": 100,</span></span><br><span class="line"><span class="string">        "description": "A juicy orange."</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">]</span></span><br><span class="line"><span class="string">"""</span>.data(using: .utf8)!</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">GroceryProduct</span>: <span class="title">Codable</span> </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> name: <span class="type">String</span></span><br><span class="line">  <span class="keyword">var</span> points: <span class="type">Int</span></span><br><span class="line">  <span class="keyword">var</span> description: <span class="type">String?</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">private</span> <span class="class"><span class="keyword">enum</span> <span class="title">CodingKeys</span>: <span class="title">String</span>, <span class="title">CodingKey</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> name = <span class="string">"product_name"</span></span><br><span class="line">    <span class="keyword">case</span> points = <span class="string">"product_cost"</span></span><br><span class="line">    <span class="keyword">case</span> description</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> decoder = <span class="type">JSONDecoder</span>()</span><br><span class="line"><span class="keyword">let</span> products = <span class="keyword">try</span> decoder.decode([<span class="type">GroceryProduct</span>].<span class="keyword">self</span>, from: json)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"The following products are available:"</span>)</span><br><span class="line"><span class="keyword">for</span> product <span class="keyword">in</span> products &#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">"\t\(product.name) (\(product.points) points)"</span>)</span><br><span class="line">  <span class="keyword">if</span> <span class="keyword">let</span> description = product.description &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"\t\t\(description)"</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="类型嵌套"><a class="markdownIt-Anchor" href="#类型嵌套"></a> 类型嵌套</h3><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> 开发语言 </category>
          
          <category> swift </category>
          
      </categories>
      
      
        <tags>
            
            <tag> swift </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Texture 布局</title>
      <link href="/2018/04/11/Texture-%E5%B8%83%E5%B1%80/"/>
      <url>/2018/04/11/Texture-%E5%B8%83%E5%B1%80/</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Jun 02 2020 17:35:51 GMT+0800 (CST) --><a id="more"></a><h2 id="texture-目标优点"><a class="markdownIt-Anchor" href="#texture-目标优点"></a> Texture 目标&amp;优点</h2><p>Texture 的 Layout API是 UIKit AutoLayout 的高效替代品</p><ul><li>Fast：自动布局比 AutoLayout 快的多</li><li>Asynchronous &amp; Concurrent: Layout 在后台计算，所以用户交互不会被终端</li><li>Declarative：布局用不可变的数据结构声明。这使布局代码更易于开发，文档编制，代码审查，测试，调试，配置文件和维护。</li><li>Cacheable：布局结果是不可变的数据结构，因此可以在后台对其进行预先计算并进行缓存以提高用户的感知性能。</li><li>Extensible：易于在类之间共享代码。</li></ul><p>受 CSS Flexbox 模型启发<a href="https://changzw.github.io/2017/12/09/flexbox-model/">flexbox model</a></p><h2 id="基本概念"><a class="markdownIt-Anchor" href="#基本概念"></a> 基本概念</h2><p>Texture 布局系统的两个核心概念：</p><ol><li>Layout Specs</li><li>Layout Elements</li></ol><h3 id="layout-specs"><a class="markdownIt-Anchor" href="#layout-specs"></a> Layout Specs</h3><p>class <code>ASLayoutSpec</code><br>布局规范（layout specification）通过了解这些子布局元素之间的相互关系布局元素，是布局元素的容器。</p><h3 id="layout-elements"><a class="markdownIt-Anchor" href="#layout-elements"></a> Layout Elements</h3><p>protocol <code>&lt;ASLayoutElement&gt;</code><br>Layout Specs 包含并排列 Layout Elements<br>所有 <code>ASDisplayNodes</code> &amp; <code>ASLayoutSpecs</code> 都遵循<aslayoutelement>协议</aslayoutelement></p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-----------------------ASStackLayoutSpec----------------------</span><br><span class="line">|  -----ASStackLayoutSpec-----  -----ASStackLayoutSpec-----  |</span><br><span class="line">|  |       ASImageNode       |  |       ASImageNode       |  |</span><br><span class="line">|  |       ASImageNode       |  |       ASImageNode       |  |</span><br><span class="line">|  ---------------------------  ---------------------------  |</span><br><span class="line">--------------------------------------------------------------</span><br></pre></td></tr></table></figure><h2 id="layout-specs-子类"><a class="markdownIt-Anchor" href="#layout-specs-子类"></a> Layout Specs 子类</h2><ul><li>ASWrapperLayoutSpec</li><li>ASStackLayoutSpec</li><li>ASInsetLayoutSpec</li><li>ASOverlayLayoutSpec</li><li>ASBackgroundLayoutSpec</li><li>ASCenterLayoutSpec</li><li>ASRatioLayoutSpec</li><li>ASRelativeLayoutSpec</li><li>ASAbsoluteLayoutSpec</li><li>ASCornerLayoutSpec</li></ul><h3 id="aswrapperlayoutspec"><a class="markdownIt-Anchor" href="#aswrapperlayoutspec"></a> ASWrapperLayoutSpec</h3><p>它可以包裹一个 <code>ASLayoutElement</code> ，通过这个 element 的siez set 计算这个 element 的layout。</p><p>用于：<br><code>ASWrapperLayoutSpec</code> 对于在 <code>-layoutSpecThatFits:</code> 中包裹单个 node，返回spec.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// return a single subnode from layoutSpecThatFits:</span></span><br><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">layoutSpecThatFits</span><span class="params">(<span class="number">_</span> constrainedSize: ASSizeRange)</span></span> -&gt; <span class="type">ASLayoutSpec</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="type">ASWrapperLayoutSpec</span>(layoutElement: _subnode)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// set a size (but not position)</span></span><br><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">layoutSpecThatFits</span><span class="params">(<span class="number">_</span> constrainedSize: ASSizeRange)</span></span> -&gt; <span class="type">ASLayoutSpec</span> &#123;</span><br><span class="line">  _subnode.style.preferredSize = <span class="type">CGSize</span>(width: constrainedSize.<span class="built_in">max</span>.width,</span><br><span class="line">                                        height: constrainedSize.<span class="built_in">max</span>.height / <span class="number">2.0</span>)</span><br><span class="line">  <span class="keyword">return</span> <span class="type">ASWrapperLayoutSpec</span>(layoutElement: _subnode)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="asinsetlayoutspec"><a class="markdownIt-Anchor" href="#asinsetlayoutspec"></a> ASInsetLayoutSpec</h3><p>给 element 添加 inset margin。element 必须有 instrinsic size or 显示设置的size</p><div align="left"><img src="/img/texture-insetlayout.jpeg" alt="runloop" style="width:150px;height:96px"></div><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">layoutSpecThatFits</span><span class="params">(<span class="number">_</span> constrainedSize: ASSizeRange)</span></span> -&gt; <span class="type">ASLayoutSpec</span> &#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">let</span> insets = <span class="type">UIEdgeInsets</span>(top: <span class="number">10.0</span>, <span class="keyword">left</span>: <span class="number">10.0</span>, bottom: <span class="number">10.0</span>, <span class="keyword">right</span>: <span class="number">10.0</span>)</span><br><span class="line">  <span class="keyword">let</span> headerWithInset = <span class="type">ASInsetLayoutSpec</span>(insets: insets, child: textNode)</span><br><span class="line">  <span class="keyword">return</span> headerWithInset</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="asoverlaylayoutspec"><a class="markdownIt-Anchor" href="#asoverlaylayoutspec"></a> ASOverlayLayoutSpec</h3><p>重叠布局规范尺寸是根据 element 的尺寸计算得出的。在下图中，element 是蓝色层<br>重叠布局规范尺寸是根据包裹 element 的尺寸计算出来的。在下图中，子元素是蓝色图层。蓝色 element 会把他的 size 作为 <code>constrainedSize</code> 传给重叠布局元素（红色图层）。所以 element （蓝色layer）必须要有自己的 intrinsic size 或者 已经设置 size了。</p><div align="left"><img src="/img/texture-OverlayLayout.jpeg" alt="OverlayLayout" style="width:150px;height:96px"></div><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">layoutSpecThatFits</span><span class="params">(<span class="number">_</span> constrainedSize: ASSizeRange)</span></span> -&gt; <span class="type">ASLayoutSpec</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> backgroundNode = <span class="type">ASDisplayNodeWithBackgroundColor</span>(<span class="type">UIColor</span>.blue)</span><br><span class="line">  <span class="keyword">let</span> foregroundNode = <span class="type">ASDisplayNodeWithBackgroundColor</span>(<span class="type">UIColor</span>.red)</span><br><span class="line">  <span class="keyword">return</span> <span class="type">ASOverlayLayoutSpec</span>(child: backgroundNode, overlay: foregroundNode)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="asbackgroundlayoutspec"><a class="markdownIt-Anchor" href="#asbackgroundlayoutspec"></a> ASBackgroundLayoutSpec</h3><p>ASBackgroundLayoutSpec 布局一个组件（蓝色），并拉伸其后的另一个组件作为背景（红色）。</p><p>background 规范 size根据 child 的尺寸计算。下图中，蓝色是child。将 blue child 的size 当做 <code>constrainedSize</code> 传给 background layout element (red layer). so child(blue layer) 一定要有自己的intrinsic size 或者 已经设置 size了。</p><div align="left"><img src="/img/Texture-BackgroundLayout.jpeg" alt="Texture-BackgroundLayout" style="width:150px;height:110px"></div><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">layoutSpecThatFits</span><span class="params">(<span class="number">_</span> constrainedSize: ASSizeRange)</span></span> -&gt; <span class="type">ASLayoutSpec</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> backgroundNode = <span class="type">ASDisplayNodeWithBackgroundColor</span>(<span class="type">UIColor</span>.red)</span><br><span class="line">  <span class="keyword">let</span> foregroundNode = <span class="type">ASDisplayNodeWithBackgroundColor</span>(<span class="type">UIColor</span>.blue)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="type">ASBackgroundLayoutSpec</span>(child: foregroundNode, background: backgroundNode)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ascenterlayoutspec"><a class="markdownIt-Anchor" href="#ascenterlayoutspec"></a> ASCenterLayoutSpec</h3><p>ASCenterLayoutSpec 在最大 <code>constrainedSize</code> 将放在 child 中心位置。<br>如果center spec’s width 和 height 没有限制，那么 ASCenterLayoutSpec 缩到 child 的size大小。</p><p><code>ASCenterLayoutSpec</code> 两个属性:</p><ul><li>centeringOptions. 确定 child 如何在中心规格内居中。选项包括：None, X, Y, XY.</li><li>sizingOptions. 确定中心规格将占用多少空间。选项包括：Default, minimum X, minimum Y, minimum XY.</li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">layoutSpecThatFits</span><span class="params">(<span class="number">_</span> constrainedSize: ASSizeRange)</span></span> -&gt; <span class="type">ASLayoutSpec</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> subnode = <span class="type">ASDisplayNodeWithBackgroundColor</span>(<span class="type">UIColor</span>.green, <span class="type">CGSize</span>(width: <span class="number">60.0</span>, height: <span class="number">100.0</span>))</span><br><span class="line">  <span class="keyword">let</span> centerSpec = <span class="type">ASCenterLayoutSpec</span>(centeringOptions: .<span class="type">XY</span>, sizingOptions: [], child: subnode)</span><br><span class="line">  <span class="keyword">return</span> centerSpec</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="asratiolayoutspec"><a class="markdownIt-Anchor" href="#asratiolayoutspec"></a> ASRatioLayoutSpec</h3><p>ASRatioLayoutSpec 使用固定宽高比来布局组件。ASRatioLayoutSpec 他的 <code>constrainedSize</code> 必须要配置 width or height。这样才能够使用 scale</p><p>ASRatioLayoutSpec 经常用于那些没有 intrinsic size 的node（ASNetworkImageNode or ASVideoNode）。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">layoutSpecThatFits</span><span class="params">(<span class="number">_</span> constrainedSize: ASSizeRange)</span></span> -&gt; <span class="type">ASLayoutSpec</span> &#123;</span><br><span class="line">  <span class="comment">// Half Ratio</span></span><br><span class="line">  <span class="keyword">let</span> subnode = <span class="type">ASDisplayNodeWithBackgroundColor</span>(<span class="type">UIColor</span>.green, <span class="type">CGSize</span>(width: <span class="number">100</span>, height: <span class="number">100.0</span>))</span><br><span class="line">  <span class="keyword">let</span> ratioSpec = <span class="type">ASRatioLayoutSpec</span>(ratio: <span class="number">0.5</span>, child: subnode)</span><br><span class="line">  <span class="keyword">return</span> ratioSpec</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="asrelativelayoutspec"><a class="markdownIt-Anchor" href="#asrelativelayoutspec"></a> ASRelativeLayoutSpec</h3><p>并根据垂直和水平位置说明符对组件进行布局.<br>与“ 9部分”图像区域相似，可以将孩子放置在4个角的任意一个或4个边缘中的任意一个的中间以及中心。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">layoutSpecThatFits</span><span class="params">(<span class="number">_</span> constrainedSize: ASSizeRange)</span></span> -&gt; <span class="type">ASLayoutSpec</span> &#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">let</span> backgroundNode = <span class="type">ASDisplayNodeWithBackgroundColor</span>(<span class="type">UIColor</span>.blue)</span><br><span class="line">  <span class="keyword">let</span> foregroundNode = <span class="type">ASDisplayNodeWithBackgroundColor</span>(<span class="type">UIColor</span>.red, <span class="type">CGSize</span>(width: <span class="number">70.0</span>, height: <span class="number">100.0</span>))</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> relativeSpec = <span class="type">ASRelativeLayoutSpec</span>(horizontalPosition: .start,</span><br><span class="line">                                          verticalPosition: .start,</span><br><span class="line">                                          sizingOption: [],</span><br><span class="line">                                          child: foregroundNode)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> backgroundSpec = <span class="type">ASBackgroundLayoutSpec</span>(child: relativeSpec, background: backgroundNode)</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="asabsolutelayoutspec"><a class="markdownIt-Anchor" href="#asabsolutelayoutspec"></a> ASAbsoluteLayoutSpec</h3><p>通过设置其子节点的layoutPosition属性来指定其子节点的确切位置（x / y坐标）。<br>绝对布局比其他类型的布局更不灵活且难以维护。</p><p>唯一属性sizing: 确定 ASAbsoluteLayoutSpec 占用多少空间。选项包括：Default 和 Size to Fit。请注意，Size to Fit 选项将复制旧的ASStaticLayoutSpec的行为</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">layoutSpecThatFits</span><span class="params">(<span class="number">_</span> constrainedSize: ASSizeRange)</span></span> -&gt; <span class="type">ASLayoutSpec</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> maxConstrainedSize = constrainedSize.<span class="built_in">max</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Layout all nodes absolute in a static layout spec</span></span><br><span class="line">  guitarVideoNode.style.layoutPosition = <span class="type">CGPoint</span>.zero</span><br><span class="line">  guitarVideoNode.style.preferredSize = <span class="type">CGSize</span>(width: maxConstrainedSize.width, height: maxConstrainedSize.height / <span class="number">3.0</span>)</span><br><span class="line"></span><br><span class="line">  nicCageVideoNode.style.layoutPosition = <span class="type">CGPoint</span>(x: maxConstrainedSize.width / <span class="number">2.0</span>, y: maxConstrainedSize.height / <span class="number">3.0</span>)</span><br><span class="line">  nicCageVideoNode.style.preferredSize = <span class="type">CGSize</span>(width: maxConstrainedSize.width / <span class="number">2.0</span>, height: maxConstrainedSize.height / <span class="number">3.0</span>)</span><br><span class="line"></span><br><span class="line">  simonVideoNode.style.layoutPosition = <span class="type">CGPoint</span>(x: <span class="number">0.0</span>, y: maxConstrainedSize.height - (maxConstrainedSize.height / <span class="number">3.0</span>))</span><br><span class="line">  simonVideoNode.style.preferredSize = <span class="type">CGSize</span>(width: maxConstrainedSize.width / <span class="number">2.0</span>, height: maxConstrainedSize.height / <span class="number">3.0</span>)</span><br><span class="line"></span><br><span class="line">  hlsVideoNode.style.layoutPosition = <span class="type">CGPoint</span>(x: <span class="number">0.0</span>, y: maxConstrainedSize.height / <span class="number">3.0</span>)</span><br><span class="line">  hlsVideoNode.style.preferredSize = <span class="type">CGSize</span>(width: maxConstrainedSize.width / <span class="number">2.0</span>, height: maxConstrainedSize.height / <span class="number">3.0</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="type">ASAbsoluteLayoutSpec</span>(children: [guitarVideoNode, nicCageVideoNode, simonVideoNode, hlsVideoNode])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ascornerlayoutspec"><a class="markdownIt-Anchor" href="#ascornerlayoutspec"></a> ASCornerLayoutSpec</h3><p>ASCornerLayoutSpec 提供一个简单方法，把 element 放在角落。</p><div align="left"><img src="/img/texture-CornerLayout.jpeg" alt="Texture-BackgroundLayout" style="width:80px;height:80px"></div><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">layoutSpecThatFits</span><span class="params">(<span class="number">_</span> constrainedSize: ASSizeRange)</span></span> -&gt; <span class="type">ASLayoutSpec</span>&#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="comment">// Layout the center of badge to the top right corner of avatar.</span></span><br><span class="line">  <span class="keyword">let</span> cornerSpec = <span class="type">ASCornerLayoutSpec</span>(child: avatarNode, corner: badgeNode, location: .topRight)</span><br><span class="line">  <span class="comment">// Slightly shift center of badge inside of avatar.</span></span><br><span class="line">  cornerSpec.offset = <span class="type">CGPoint</span>(x: -<span class="number">3</span>, y: <span class="number">3</span>)</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="aslayoutspec"><a class="markdownIt-Anchor" href="#aslayoutspec"></a> ASLayoutSpec</h3><ol><li>所有 layout spec 都继承自它</li><li>主要任务：处理 children 布局管理，用户可以 子类化它实现自己自定义 layout spec。</li><li>作为间隔区：充当 <code>ASStackLayoutSpec</code> 的spacer，当使用 <code>.flexGrow</code> and/or <code>.flexShrink</code> 时候</li></ol><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">layoutSpecThatFits</span><span class="params">(<span class="number">_</span> constrainedSize: ASSizeRange)</span></span> -&gt; <span class="type">ASLayoutSpec</span> &#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">let</span> spacer = <span class="type">ASLayoutSpec</span>()</span><br><span class="line">  spacer.style.flexGrow = <span class="number">1.0</span></span><br><span class="line"></span><br><span class="line">  stack.children = [imageNode, spacer, textNode]</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="asstacklayoutspecflexbox-container"><a class="markdownIt-Anchor" href="#asstacklayoutspecflexbox-container"></a> ASStackLayoutSpec(Flexbox Container)</h3><p>相关属性对照<a href="https://changzw.github.io/2017/12/09/flexbox-model/">flexbox-model</a></p><p>有 7 个属性：</p><ul><li>direction. 确定 stack 方向。如果已经设置了 horizontalAlignment and verticalAlignment, 他们会被重新解析一遍。导致 justifyContent and alignItems也会相应的变化。</li><li>spacing. 每个 child element 之间的距离.</li><li>horizontalAlignment. 指定 children 是如何水平对齐的。根据stack direction方向。设置对齐方式 会导致 justifyContent or alignItems 更新。</li><li>verticalAlignment. 指定 children 是如何垂直对齐的。根据stack direction方向。设置对齐方式 会导致 justifyContent or alignItems 更新。</li><li>justifyContent. 沿主轴的对齐方式.</li><li>alignItems. 沿交叉轴的方向布局.</li><li>flexWrap. element 堆叠成单行还是多行。默认为单行。</li><li>alignContent. 元素组成有多行，cross-axis方向空间充足，内容行的对齐方式。</li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">layoutSpecThatFits</span><span class="params">(<span class="number">_</span> constrainedSize: ASSizeRange)</span></span> -&gt; <span class="type">ASLayoutSpec</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> mainStack = <span class="type">ASStackLayoutSpec</span>(direction: .horizontal,</span><br><span class="line">                                    spacing: <span class="number">6.0</span>,</span><br><span class="line">                                    justifyContent: .start,</span><br><span class="line">                                    alignItems: .center,</span><br><span class="line">                                    children: [titleNode, subtitleNode])</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Set some constrained size to the stack</span></span><br><span class="line">  mainStack.style.minWidth = <span class="type">ASDimensionMakeWithPoints</span>(<span class="number">60.0</span>)</span><br><span class="line">  mainStack.style.maxHeight = <span class="type">ASDimensionMakeWithPoints</span>(<span class="number">40.0</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> mainStack</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="layout-element-属性"><a class="markdownIt-Anchor" href="#layout-element-属性"></a> Layout Element 属性</h2><ul><li>ASStackLayoutElement Properties：只会在 StackLayoutSpec 中的元素(node or layout spec)生效</li><li>ASAbsoluteLayoutElement Properties：只会在AbsoluateLayoutSpec中的元素（ subnode 或 layoutSpec）生效；</li><li>ASLayoutElement Properties：适用于所有 Node 和 layoutSpec；</li></ul><h3 id="asstacklayoutelementflex-item属性"><a class="markdownIt-Anchor" href="#asstacklayoutelementflex-item属性"></a> ASStackLayoutElement(flex-item)属性</h3><p>相关属性对照<a href="https://changzw.github.io/2017/12/09/flexbox-model/">flexbox-model</a></p><table><thead><tr><th>属性</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>.style.spacingBefore</td><td>CGFloat</td><td>direction 上与前一个 node 的间隔</td></tr><tr><td>.style.spacingAfter</td><td>CGFloat</td><td>direction 上与后一个 node 的间隔</td></tr><tr><td>.style.flexGrow</td><td>Bool</td><td>子节点尺寸总和小于 minimum即存在剩余空间时，是否放大</td></tr><tr><td>.style.flexShrink</td><td>Bool</td><td>子节点总和大于 maximum，即空间不足时，是否缩小</td></tr><tr><td>.style.flexBasis</td><td>ASDimension</td><td>在使用flexGrow 或 flexShrink 属性之前，并且剩余空间被均分之前，指定item的初始size</td></tr><tr><td>.style.alignSelf</td><td>ASStackLayoutAlignSelf</td><td>item 在cross-axis方向布局方式，此属性会覆盖 layoutSpec(flex-container) 属性alignItems，可选值有：Auto、Start、End、Center、Stretch</td></tr><tr><td>.style.ascender</td><td>CGFloat</td><td>用于基线对齐，描述对象从顶部到其基线的距离</td></tr><tr><td>.style.descender</td><td>CGFloat</td><td>用于基线对齐，描述对象从基线到其底部的距离</td></tr></tbody></table><h3 id="asabsolutelayoutelement-属性"><a class="markdownIt-Anchor" href="#asabsolutelayoutelement-属性"></a> ASAbsoluteLayoutElement 属性</h3><table><thead><tr><th>属性</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>.style.layoutPosition</td><td>CGPoint</td><td>该对象在 ASAbsoluteLayoutSpec 中的位置</td></tr></tbody></table><h3 id="aslayoutelement-属性"><a class="markdownIt-Anchor" href="#aslayoutelement-属性"></a> ASLayoutElement 属性</h3><table><thead><tr><th>属性</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>.style.width</td><td>ASDimension</td><td>指定 ASLayoutElement 内容区域的宽度。minWidth 和 maxWidth 属性会覆盖 width，默认值为 ASDimensionAuto</td></tr><tr><td>.style.height</td><td>ASDimension</td><td>指定ASLayoutElement 内容区域的高度。minHeight 和 maxHeight 属性会覆盖 height，默认值为 ASDimensionAuto</td></tr><tr><td>.style.minWidth</td><td>ASDimension</td><td>minWidth 属性用于设置一个特定布局元素的最小宽度.它可以防止 width 属性值小于 minWidth 指定的值，minWidth 的值会覆盖 maxWidth 和 width. 默认值为 ASDimensionAuto</td></tr><tr><td>.style.maxWidth</td><td>ASDimension</td><td>maxWidth 属性用于设置一个特定布局元素的最大宽度.它可以防止 width 属性值大于 maxWidth 指定的值. maxWidth 的值会覆盖 width，minWidth 会覆盖 maxWidth. 默认值为 ASDimensionAuto</td></tr><tr><td>.style.minHeight</td><td>ASDimension</td><td>minHeight 属性用于设置一个特定布局元素的最小高度.它可以防止 height 属性值小于 minHeight 指定的值.minHeight 的值会覆盖 maxHeight 和 height. 默认值为 ASDimensionAuto</td></tr><tr><td>.style.maxHeight</td><td>ASDimension</td><td>maxHeight 属性用于设置一个特定布局元素的最大高度，它可以防止 height 属性值大于 maxHeight 指定的值.maxHeight 的值会覆盖 height，minHeight 会覆盖 maxHeight.默认值为 ASDimensionAuto</td></tr><tr><td>.style.preferredSize</td><td>CGSize</td><td>提供布局元素的建议 size.如果提供了 minSize 或 maxSize，并且 preferredSize 超过了这些值，则强制使用 minSize 或 maxSize.如果未提供 preferredSize，则布局元素的 size 默认为 calculateSizeThatFits: 方法提供的固有大小.此方法是可选的，但是对于没有固有大小或需要用与固有大小不同的的 size 进行布局的节点，则必须指定 preferredSize 或 preferredLayoutSize 中的一个，比如没这个属性可以在 ASImageNode 上设置，使这个节点的 size 和图片 size 不同, 警告：当 size 的宽度或高度是相对值时调用 getter 将进行断言</td></tr><tr><td>.style.minSize</td><td>CGSize</td><td>可选属性，为布局元素提供最小尺寸，如果提供，minSize 将会强制使用.如果父级布局元素的 minSize 小于其子级的 minSize，则强制使用子级的 minSize，并且其大小将扩展到布局规则之外,例如，如果给全屏容器中的某个元素设置 50％ 的 preferredSize 相对宽度，和 200pt 的 minSize 宽度，preferredSize 会在 iPhone 屏幕上产生 160pt 的宽度，但由于 160pt 低于 200pt 的 minSize 宽度，因此最终该元素的宽度会是 200pt</td></tr><tr><td>.style.maxSize</td><td>CGSize</td><td>可选属性，为布局元素提供最大尺寸，如果提供，maxSize 将会强制使用</td></tr><tr><td>.style.preferredLayoutSize</td><td>ASLayoutSize</td><td>为布局元素提供建议的相对 size.ASLayoutSize 使用百分比而不是点来指定布局.例如，子布局元素的宽度应该是父宽度的 50％.如果提供了可选的 minLayoutSize 或 maxLayoutSize，并且 preferredLayoutSize 超过了这些值，则将使用 minLayoutSize 或 maxLayoutSize</td></tr><tr><td>.style.minLayoutSize</td><td>ASLayoutSize</td><td>可选属性，为布局元素提供最小的相对尺寸， 如果提供，minLayoutSize 将会强制使用.如果父级布局元素的 minLayoutSize 小于其子级的 minLayoutSize，则会强制使用子级的 minLayoutSize，并且其大小将扩展到布局规则之外</td></tr><tr><td>.style.maxLayoutSize</td><td>ASLayoutSize</td><td>可选属性，为布局元素提供最大的相对尺寸.如果提供，maxLayoutSize 将会强制使用.如果父级布局元素的 maxLayoutSize 小于其子级的 maxLayoutSize，那么将强制使用子级的 maxLayoutSize，并且其大小将扩展到布局规则之外</td></tr></tbody></table><h2 id="layout-api-sizing"><a class="markdownIt-Anchor" href="#layout-api-sizing"></a> Layout API Sizing</h2><p>在Layout API中，理解复合尺寸类型的最简单方法是查看所有的 unit 之间的关系。</p><div align="left"><img src="/img/texture-sizing.jpeg" alt="texture-sizing" style="width:400px;height:100px"></div><h3 id="values-cgfloat-asdimension"><a class="markdownIt-Anchor" href="#values-cgfloat-asdimension"></a> Values (CGFloat, ASDimension)</h3><p>ASDimension本质上是一个普通的CGFloat，支持表示点值，相对百分比值或自动值。</p><p>unit 允许相同的API接受固定值和相对值。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// dimension returned is relative (%)</span></span><br><span class="line"><span class="type">ASDimensionMake</span>(<span class="string">"50%"</span>)</span><br><span class="line"><span class="type">ASDimensionMakeWithFraction</span>(<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// dimension returned in points</span></span><br><span class="line"><span class="type">ASDimensionMake</span>(<span class="string">"70pt"</span>)</span><br><span class="line"><span class="type">ASDimensionMake</span>(<span class="number">70</span>)</span><br><span class="line"><span class="type">ASDimensionMakeWithPoints</span>(<span class="number">70</span>)</span><br></pre></td></tr></table></figure><h3 id="使用-asdimension-的例子"><a class="markdownIt-Anchor" href="#使用-asdimension-的例子"></a> 使用 ASDimension 的例子</h3><p>ASDimension 用于设置 <code>ASStackLayoutSpec</code> 中element 的 <code>flexBasis</code>. <code>flexBasis</code> 属性在 stack layout 中指定对象的初始大小，</p><p>在下面的视图中，我们希望左侧堆栈占据水平宽度的40％，右侧堆栈占据宽度的60％。</p><div align="left"><img src="/img/flexbasis.jpeg" alt="flexbasis" style="width:300px;height:450px"></div><p>为此，我们在水平堆栈的两个子级上设置.flexBasis属性：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">self</span>.leftStack.style.flexBasis = <span class="type">ASDimensionMake</span>(<span class="string">"40%"</span>)</span><br><span class="line"><span class="keyword">self</span>.rightStack.style.flexBasis = <span class="type">ASDimensionMake</span>(<span class="string">"60%"</span>)</span><br><span class="line"></span><br><span class="line">horizontalStack.children = [<span class="keyword">self</span>.leftStack, <span class="keyword">self</span>.rightStack]</span><br></pre></td></tr></table></figure><h3 id="sizes-cgsize-aslayoutsize"><a class="markdownIt-Anchor" href="#sizes-cgsize-aslayoutsize"></a> Sizes (CGSize, ASLayoutSize)</h3><p>ASLayoutSize与CGSize相似，但是其宽度和高度值可以表示点或百分比值。宽度和高度的类型是独立的；一个可以是点或百分比值。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ASLayoutSizeMake</span>(<span class="type">ASDimension</span> width, <span class="type">ASDimension</span> height);</span><br></pre></td></tr></table></figure><p>ASLayoutSize用于设置布局元素的 <code>.preferredLayoutSize</code> , <code>.minLayoutSize</code> 和 <code>.maxLayoutSize</code> 属性。它允许相同的API接受固定大小以及相对大小。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Dimension type "Auto" indicates that the layout element may </span></span><br><span class="line"><span class="comment">// be resolved in whatever way makes most sense given the circumstances</span></span><br><span class="line"><span class="keyword">let</span> width = <span class="type">ASDimensionMake</span>(.auto, <span class="number">0</span>)</span><br><span class="line"><span class="keyword">let</span> height = <span class="type">ASDimensionMake</span>(<span class="string">"50%"</span>)</span><br><span class="line">layoutElement.style.preferredLayoutSize = <span class="type">ASLayoutSizeMake</span>(width, height)</span><br></pre></td></tr></table></figure><p>如果不需要相对值，则可以设置布局元素的.preferredSize，.minSize和.maxSize属性。这些属性采用常规CGSize值。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">layoutElement.style.preferredSize = <span class="type">CGSize</span>(width: <span class="number">30</span>, height: <span class="number">60</span>)</span><br></pre></td></tr></table></figure><p>大多数时候，都不想同时限制宽度和高度。在这种情况下，可以使用ASDimension值分别设置布局元素的尺寸属性。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">layoutElement.style.width     = <span class="type">ASDimensionMake</span>(<span class="string">"50%"</span>)</span><br><span class="line">layoutElement.style.minWidth  = <span class="type">ASDimensionMake</span>(<span class="string">"50%"</span>)</span><br><span class="line">layoutElement.style.maxWidth  = <span class="type">ASDimensionMake</span>(<span class="string">"50%"</span>)</span><br><span class="line"></span><br><span class="line">layoutElement.style.height    = <span class="type">ASDimensionMake</span>(<span class="string">"50%"</span>)</span><br><span class="line">layoutElement.style.minHeight = <span class="type">ASDimensionMake</span>(<span class="string">"50%"</span>)</span><br><span class="line">layoutElement.style.maxHeight = <span class="type">ASDimensionMake</span>(<span class="string">"50%"</span>)</span><br></pre></td></tr></table></figure><h3 id="size-range-assizerange"><a class="markdownIt-Anchor" href="#size-range-assizerange"></a> Size Range (ASSizeRange)</h3><p>UIKit没有提供组合最小和最大CGSize的 struct。因此，创建了ASSizeRange以支持最小和最大CGSize对。</p><p>ASSizeRange通常用于布局API的内部。但是，作为输入传递给layoutSpecThatFits：的constrainedSize值是ASSizeRange。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">layoutSpecThatFits</span><span class="params">(<span class="number">_</span> constrainedSize: ASSizeRange)</span></span> -&gt; <span class="type">ASLayoutSpec</span></span><br></pre></td></tr></table></figure><p>传递给ASDisplayNode子类的layoutSpecThatFits：方法的constrainedSize是节点应适合的最小和最大大小。constrainedSize中包含的最小CGSize和最大CGSize可用于调整节点的布局元素的大小。</p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> 第三方框架 </category>
          
          <category> UI 布局 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> swift </tag>
            
            <tag> Texture </tag>
            
            <tag> 翻译 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>dealloc的调用时机</title>
      <link href="/2018/04/02/dealloc%E7%9A%84%E8%B0%83%E7%94%A8%E6%97%B6%E6%9C%BA/"/>
      <url>/2018/04/02/dealloc%E7%9A%84%E8%B0%83%E7%94%A8%E6%97%B6%E6%9C%BA/</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Jun 02 2020 17:35:51 GMT+0800 (CST) --><a id="more"></a><p>一般想法 delloc 会在对象释放的时候调用。用户重载该方法释放自己分配的堆控件，移除订阅……</p><p>在 MRC 中</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)dealloc &#123;</span><br><span class="line">  <span class="keyword">self</span>.array = <span class="literal">nil</span>;</span><br><span class="line">  <span class="keyword">self</span>.string = <span class="literal">nil</span>;</span><br><span class="line">  <span class="comment">// ... //</span></span><br><span class="line">  <span class="comment">// 非Objc对象内存的释放，如CFRelease(...)</span></span><br><span class="line">  <span class="comment">// ... //</span></span><br><span class="line">  [<span class="keyword">super</span> dealloc];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ARC 中</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)dealloc &#123;</span><br><span class="line">  <span class="comment">// ... //</span></span><br><span class="line">  <span class="comment">// 非Objc对象内存的释放，如CFRelease(...)</span></span><br><span class="line">  <span class="comment">// ... //</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对比两端代码：</p><ol><li>这个对象实例变量（Ivars）的释放去哪儿了？</li><li>没有显示的调用[super dealloc]，上层的析构去哪儿了？</li></ol><h2 id="arc文档"><a class="markdownIt-Anchor" href="#arc文档"></a> <a href="http://clang.llvm.org/docs/AutomaticReferenceCounting.html#dealloc" target="_blank" rel="noopener">ARC文档</a>中对dealloc过程的解释</h2><blockquote><p>A class may provide a method definition for an instance method named dealloc. This method will be called after the final release of the object but before it is deallocated or any of its instance variables are destroyed. The superclass’s implementation of dealloc will be called automatically when the method returns.</p></blockquote><p>大概意思是：dealloc方法在最后一次release后被调用，但<strong>此时实例变量（Ivars）并未释放</strong>，<strong>父类的dealloc的方法将在子类dealloc方法返回后自动调用</strong></p><blockquote><p>The instance variables for an ARC-compiled class will be destroyed at some point after control enters the dealloc method for the root class of the class. The ordering of the destruction of instance variables is unspecified, both within a single class and between subclasses and superclasses.</p></blockquote><p>理解：<strong>ARC下对象的<code>Ivars</code>在根类[NSObject dealloc]中释放</strong>（通常root class都是NSObject），变量释放顺序各种不确定（一个类内的不确定，子类和父类间也不确定，也就是说不用care释放顺序）</p><p>问题：</p><ol><li>[super delloc] 为什么可以在子类的 delloc 返回后自动调用</li><li>对象的 <code>Ivars</code> 为什么会在根类的 delloc 中释放</li></ol><h2 id="delloc-调用栈分析"><a class="markdownIt-Anchor" href="#delloc-调用栈分析"></a> delloc 调用栈分析</h2><p>调用过程</p><p><code>dealloc -&gt; _objc_rootDealloc -&gt; object_dispose -&gt; objc_destructInstance</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)dealloc &#123; _objc_rootDealloc(self); &#125; </span><br><span class="line"><span class="keyword">void</span> _objc_rootDealloc(id obj) &#123; obj-&gt;rootDealloc(); &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">void</span> objc_object::rootDealloc() &#123;</span><br><span class="line">  <span class="keyword">if</span> (isTaggedPointer()) <span class="keyword">return</span>;  <span class="comment">// fixme necessary? </span></span><br><span class="line">  <span class="keyword">if</span> (fastpath(isa.nonpointer  &amp;&amp;  </span><br><span class="line">         !isa.weakly_referenced  &amp;&amp; <span class="comment">// 弱引用</span></span><br><span class="line">         !isa.has_assoc  &amp;&amp;         <span class="comment">// 关联对象</span></span><br><span class="line">         !isa.has_cxx_dtor  &amp;&amp;      <span class="comment">// 析构器</span></span><br><span class="line">         !isa.has_sidetable_rc)) &#123;  <span class="comment">// 散列表</span></span><br><span class="line">    assert(!sidetable_present());</span><br><span class="line">    <span class="built_in">free</span>(<span class="keyword">this</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    object_dispose((id)<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">id <span class="title">object_dispose</span><span class="params">(id obj)</span> </span>&#123;</span><br><span class="line">  objc_destructInstance(obj);</span><br><span class="line">  <span class="built_in">free</span>(obj);</span><br><span class="line">  <span class="keyword">return</span> nil;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/***********************************************************************</span></span><br><span class="line"><span class="comment">* objc_destructInstance</span></span><br><span class="line"><span class="comment">* Destroys an instance without freeing memory.</span></span><br><span class="line"><span class="comment">* Calls C++ destructors.</span></span><br><span class="line"><span class="comment">* Calls ARC ivar cleanup.</span></span><br><span class="line"><span class="comment">* Removes associative references.</span></span><br><span class="line"><span class="comment">* Returns `obj`. Does nothing if `obj` is nil.</span></span><br><span class="line"><span class="comment">**********************************************************************/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">objc_destructInstance</span><span class="params">(id obj)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (obj) &#123;</span><br><span class="line">    <span class="comment">// Read all of the flags at once for performance.</span></span><br><span class="line">    <span class="keyword">bool</span> cxx = obj-&gt;hasCxxDtor();</span><br><span class="line">    <span class="keyword">bool</span> assoc = obj-&gt;hasAssociatedObjects();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// This order is important.</span></span><br><span class="line">    <span class="keyword">if</span> (cxx) object_cxxDestruct(obj);</span><br><span class="line">    <span class="keyword">if</span> (assoc) _object_remove_assocations(obj);<span class="comment">// 清理关联对象</span></span><br><span class="line">    obj-&gt;clearDeallocating();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主要是这个方法<code>objc_destructInstance</code>，根据他的注释</p><ol><li>销毁实例对象，但没有释放内存</li><li>调用 C++ 的 destructor</li><li>掉用 ARC 将 ivar 清理</li><li>清理关联对象</li></ol><p>object_cxxDestruct 做了什么？<br>clearDeallocating 做了什么？</p><h3 id="cleardeallocating-清空弱引用"><a class="markdownIt-Anchor" href="#cleardeallocating-清空弱引用"></a> clearDeallocating 清空弱引用</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">inline</span> <span class="keyword">void</span> objc_object::clearDeallocating() &#123;</span><br><span class="line">  <span class="keyword">if</span> (slowpath(!isa.nonpointer)) &#123;</span><br><span class="line">    <span class="comment">// Slow path for raw pointer isa.</span></span><br><span class="line">    sidetable_clearDeallocating();</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (slowpath(isa.weakly_referenced  ||  isa.has_sidetable_rc)) &#123;</span><br><span class="line">    <span class="comment">// Slow path for non-pointer isa with weak refs and/or side table data.</span></span><br><span class="line">    clearDeallocating_slow();</span><br><span class="line">  &#125; </span><br><span class="line">  assert(!sidetable_present());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ok clearDeallocating 用于清空引用计数表并清除弱引用表，将所有weak引用指nil</p><h3 id="object_cxxdestruct"><a class="markdownIt-Anchor" href="#object_cxxdestruct"></a> object_cxxDestruct</h3><p>从<a href="http://my.safaribooksonline.com/book/programming/objective-c/9780132908641/3dot-memory-management/ch03" target="_blank" rel="noopener">这篇文章</a>中：</p><blockquote><p>ARC actually creates a -.cxx_destruct method to handle freeing instance variables. This method was originally created for calling C++ destructors automatically when an object was destroyed.</p></blockquote><p><code>object_cxxDestruct</code> 方法用于释放实例的 ivars</p><p>和《Effective Objective-C 2.0》中提到的：</p><blockquote><p>When the compiler saw that an object contained C++ objects, it would generate a method called .cxx_destruct. ARC piggybacks on this method and emits the required cleanup code within it.</p></blockquote><p>可以了解到，.cxx_destruct方法原本是为了C++对象析构的，ARC借用了这个方法插入代码实现了自动内存释放的工作</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">object_cxxDestruct</span><span class="params">(id obj)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!obj) <span class="keyword">return</span>;</span><br><span class="line">  <span class="keyword">if</span> (obj-&gt;isTaggedPointer()) <span class="keyword">return</span>;</span><br><span class="line">  object_cxxDestructFromClass(obj, obj-&gt;ISA());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/***********************************************************************</span></span><br><span class="line"><span class="comment">* object_cxxDestructFromClass.</span></span><br><span class="line"><span class="comment">* Call C++ destructors on obj, starting with cls's </span></span><br><span class="line"><span class="comment">*   dtor method (if any) followed by superclasses' dtors (if any), </span></span><br><span class="line"><span class="comment">*   stopping at cls's dtor (if any).</span></span><br><span class="line"><span class="comment">* Uses methodListLock and cacheUpdateLock. The caller must hold neither.</span></span><br><span class="line"><span class="comment">**********************************************************************/</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">object_cxxDestructFromClass</span><span class="params">(id obj, Class cls)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">void</span> (*dtor)(id); </span><br><span class="line">  <span class="comment">// Call cls's dtor first, then superclasses's dtors. </span></span><br><span class="line">  <span class="keyword">for</span> ( ; cls; cls = cls-&gt;superclass) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!cls-&gt;hasCxxDtor()) <span class="keyword">return</span>; </span><br><span class="line">    dtor = (<span class="keyword">void</span>(*)(id))</span><br><span class="line">      lookupMethodInClassAndLoadCache(cls, SEL_cxx_destruct);</span><br><span class="line">    <span class="keyword">if</span> (dtor != (<span class="keyword">void</span>(*)(id))_objc_msgForward_impcache) &#123;</span><br><span class="line">      <span class="keyword">if</span> (PrintCxxCtors) &#123;</span><br><span class="line">        _objc_inform(<span class="string">"CXX: calling C++ destructors for class %s"</span>, </span><br><span class="line">               cls-&gt;nameForLogging());</span><br><span class="line">      &#125;</span><br><span class="line">      (*dtor)(obj);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>在实例对象的最后一个 release 方法调用，引用计数 = 0 调用dealloc</li><li>实例对象是否是 isTaggedPointer</li><li>通过 C++ 的析构器释放 ivars 成员变量内存</li><li>移除关联对象</li><li>移除 weak 引用相关数据，weak 变量置为 nil</li></ol><blockquote><p><a href="http://blog.sunnyxx.com/2014/04/02/objc_dig_arc_dealloc/" target="_blank" rel="noopener">ARC下dealloc过程及.cxx_destruct的探究</a></p></blockquote><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> iOS Programming </category>
          
          <category> objc </category>
          
          <category> runtime </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> 底层 </tag>
            
            <tag> objc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>功能细节记录</title>
      <link href="/2018/03/24/%E5%8A%9F%E8%83%BD%E7%BB%86%E8%8A%82%E8%AE%B0%E5%BD%95/"/>
      <url>/2018/03/24/%E5%8A%9F%E8%83%BD%E7%BB%86%E8%8A%82%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Jun 02 2020 17:35:51 GMT+0800 (CST) --><a id="more"></a><h2 id="使得系统setting页面中有自己app-的设置"><a class="markdownIt-Anchor" href="#使得系统setting页面中有自己app-的设置"></a> 使得系统setting页面中有自己app 的设置</h2><p><a href="https://www.jianshu.com/p/27fe365202b4" target="_blank" rel="noopener">iOS开发之Settings Bundle的使用</a></p><h2 id="app-和-app-extension-共享数据"><a class="markdownIt-Anchor" href="#app-和-app-extension-共享数据"></a> app 和 app Extension 共享数据</h2><ol><li>UserDefault 使用 groupName 初始化就可以了</li><li>FileManager 数据获取一定使用 URL 格式拼接 group，如果使用 String 会读不到数据</li></ol><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> iOS Programming </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>22-比较级倒装</title>
      <link href="/2018/03/15/English/22-%E5%80%92%E8%A3%85%E5%8F%A5/"/>
      <url>/2018/03/15/English/22-%E5%80%92%E8%A3%85%E5%8F%A5/</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Jun 02 2020 17:35:52 GMT+0800 (CST) --><h2 id="介绍"><a class="markdownIt-Anchor" href="#介绍"></a> 介绍</h2><p>倒装句是⼀种把动词（或助动词）移到主语前⾯的句型。以这个定义来看，⼀般 的疑问句都可以算是倒装句。</p><p>撇开疑问句这种只具有语法功能的倒装句不谈，⽐较值得研究的是具有修辞功能的倒装句。恰当地运⽤倒装句，可以强调语⽓、增强清楚性与简洁性，以及 更流畅地衔接前后的句⼦。以下分别就⼏种重要的倒装句来看看它倒装的条件， 以及可达到的修辞效果。</p><p><img src="/img/english/daozhuang.jpeg" alt="frame"></p><h2 id="比较级的倒装"><a class="markdownIt-Anchor" href="#比较级的倒装"></a> 比较级的倒装</h2><ol><li>Girls like cats more than boys.(不清楚） 这个句⼦可能有两种意思：</li><li>Girls like cats more than boys do. (⼥孩比男孩更喜欢猫。）</li><li>Girls like cats more than they like boys. (⼥孩比较喜欢猫，比较不喜欢男孩。）</li></ol><p>⽐较级的句型通常会牵涉到两个从句互相⽐较。这两个从句间应有重复的部 分才能⽐较。⼀旦有重复，就有省略的空间。但是如果省略不当，就会伤害句⼦ 的清楚性。</p><h2 id="关系从句的倒装"><a class="markdownIt-Anchor" href="#关系从句的倒装"></a> 关系从句的倒装</h2><h2 id="假设语气的倒装"><a class="markdownIt-Anchor" href="#假设语气的倒装"></a> 假设语气的倒装</h2><h2 id="引用句的倒装"><a class="markdownIt-Anchor" href="#引用句的倒装"></a> 引用句的倒装</h2><h2 id="类似-there-isare-的倒装"><a class="markdownIt-Anchor" href="#类似-there-isare-的倒装"></a> 类似 there is/are 的倒装</h2><h2 id="否定副词开头的倒装"><a class="markdownIt-Anchor" href="#否定副词开头的倒装"></a> 否定副词开头的倒装</h2><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> 英语学习 </category>
          
          <category> 语法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>英语语法学习</title>
      <link href="/2018/03/15/English/%E8%8B%B1%E8%AF%AD%E8%AF%AD%E6%B3%95%E5%AD%A6%E4%B9%A0/"/>
      <url>/2018/03/15/English/%E8%8B%B1%E8%AF%AD%E8%AF%AD%E6%B3%95%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Jun 02 2020 17:35:52 GMT+0800 (CST) --><p>使用数据：<a href="https://pan.baidu.com/s/1eza61t93vBhh2-cPejuPuw" target="_blank" rel="noopener">英语魔法师之语法俱乐部</a></p><p><img src="/img/english/english_grammer.jpeg" alt="english_grammer"></p><p>记录自己学习英语的过程</p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> 英语学习 </category>
          
          <category> 语法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> English </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何给自己的库添加前缀</title>
      <link href="/2018/03/12/%E5%A6%82%E4%BD%95%E7%BB%99%E8%87%AA%E5%B7%B1%E7%9A%84%E5%BA%93%E6%B7%BB%E5%8A%A0%E5%89%8D%E7%BC%80/"/>
      <url>/2018/03/12/%E5%A6%82%E4%BD%95%E7%BB%99%E8%87%AA%E5%B7%B1%E7%9A%84%E5%BA%93%E6%B7%BB%E5%8A%A0%E5%89%8D%E7%BC%80/</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Jun 02 2020 17:35:51 GMT+0800 (CST) --><a id="more"></a><h2 id="在-rxswift中"><a class="markdownIt-Anchor" href="#在-rxswift中"></a> 在 Rxswift中</h2><ul><li>rx_tap : 原始语法The original syntax</li><li>rxTap : 同上，但是语义有歧义，如果不是 Rxswift库中却是用 rxABC 这样的</li><li>reactiveTap : 语义很清楚，但是太长了</li><li>rx.tap : ✨😲✨ 这样就很好了，一个漂亮的命名空间.</li></ul><h2 id="想法来源"><a class="markdownIt-Anchor" href="#想法来源"></a> 想法来源</h2><p><a href="https://github.com/apple/swift/blob/master/stdlib/public/core/LazySequence.swift" target="_blank" rel="noopener">LazySequence</a></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">myArray.<span class="built_in">map</span> &#123; ... &#125;</span><br><span class="line">myArray.<span class="built_in">lazy</span>.<span class="built_in">map</span> &#123; ... &#125;</span><br></pre></td></tr></table></figure><p>我们也可以在 RxCocoa 中有同样的语法:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> myButton.enabled &#123; ... &#125;</span><br><span class="line">myButton.rx.enabled.subscribeNext &#123; ... &#125;</span><br></pre></td></tr></table></figure><h2 id="实现细节"><a class="markdownIt-Anchor" href="#实现细节"></a> 实现细节</h2><h3 id="共享的代码"><a class="markdownIt-Anchor" href="#共享的代码"></a> 共享的代码</h3><p>我想我们可以把 <code>Reactive</code> protocol 转换成一个泛型 struct :</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">struct</span> <span class="title">Reactive</span>&lt;<span class="title">Base</span>: <span class="title">AnyObject</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">let</span> base: <span class="type">Base</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">init</span>(<span class="number">_</span> base: <span class="type">Base</span>) &#123;</span><br><span class="line">    <span class="keyword">self</span>.base = base</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着我们扩展 <code>NSObjectProtocol</code> 协议来创建 <code>rx</code> 代理 :</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">extension</span> <span class="title">NSObjectProtocol</span> </span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">var</span> rx: <span class="type">Reactive</span>&lt;<span class="type">Self</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="type">Reactive</span>(<span class="keyword">self</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><details><summary>RxSwift 中的实现</summary><pre><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">struct</span> <span class="title">Reactive</span>&lt;<span class="title">Base</span>&gt; </span>&#123;</span><br><span class="line">  <span class="comment">/// Base object to extend.</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">let</span> base: <span class="type">Base</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">init</span>(<span class="number">_</span> base: <span class="type">Base</span>) &#123;</span><br><span class="line">    <span class="keyword">self</span>.base = base</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// A type that has reactive extensions.</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">protocol</span> <span class="title">ReactiveCompatible</span> </span>&#123;</span><br><span class="line">  <span class="comment">/// Extended type</span></span><br><span class="line">  <span class="keyword">associatedtype</span> <span class="type">ReactiveBase</span></span><br><span class="line"></span><br><span class="line">  <span class="meta">@available</span>(*, deprecated, message: <span class="string">"Use `ReactiveBase` instead."</span>)</span><br><span class="line">  <span class="keyword">typealias</span> <span class="type">CompatibleType</span> = <span class="type">ReactiveBase</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/// Reactive extensions.</span></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">var</span> rx: <span class="type">Reactive</span>&lt;<span class="type">ReactiveBase</span>&gt;.<span class="type">Type</span> &#123; <span class="keyword">get</span> <span class="keyword">set</span> &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// Reactive extensions.</span></span><br><span class="line">  <span class="keyword">var</span> rx: <span class="type">Reactive</span>&lt;<span class="type">ReactiveBase</span>&gt; &#123; <span class="keyword">get</span> <span class="keyword">set</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">ReactiveCompatible</span> </span>&#123;</span><br><span class="line">  <span class="comment">/// Reactive extensions.</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">var</span> rx: <span class="type">Reactive</span>&lt;<span class="type">Self</span>&gt;.<span class="type">Type</span> &#123;</span><br><span class="line">    <span class="keyword">get</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="type">Reactive</span>&lt;<span class="type">Self</span>&gt;.<span class="keyword">self</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">set</span> &#123;</span><br><span class="line">      <span class="comment">// this enables using Reactive to "mutate" base type</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// Reactive extensions.</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">var</span> rx: <span class="type">Reactive</span>&lt;<span class="type">Self</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">get</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="type">Reactive</span>(<span class="keyword">self</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">set</span> &#123;</span><br><span class="line">      <span class="comment">// this enables using Reactive to "mutate" base object</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> class Foundation.NSObject</span><br><span class="line"><span class="comment">/// Extend NSObject with `rx` proxy.</span></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">NSObject</span>: <span class="title">ReactiveCompatible</span> </span>&#123; &#125;</span><br></pre></td></tr></table></figure></pre></details><p>因为我们使用Self，所以我们需要扩展协议而不是具体类型。为了方便起见，我建议使用NSObjectProtocol，但我们也可以使用更有意义的协议，例如ReactiveCompatible或类似的协议。</p><details><summary>自己实现一个小的扩展</summary><p>使用 泛型（模板）创建自己的类型</p><pre><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">struct</span> <span class="title">Czw</span>&lt;<span class="title">Base</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">let</span> base: <span class="type">Base</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">init</span>(<span class="number">_</span> base: <span class="type">Base</span>) &#123;</span><br><span class="line">    <span class="keyword">self</span>.base = base</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">protocol</span> <span class="title">CzwCompatible</span> </span>&#123;</span><br><span class="line">  <span class="keyword">associatedtype</span> <span class="type">CzwBase</span></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">var</span> czw: <span class="type">Czw</span>&lt;<span class="type">CzwBase</span>&gt;.<span class="type">Type</span> &#123; <span class="keyword">get</span> <span class="keyword">set</span> &#125;</span><br><span class="line">  <span class="keyword">var</span> czw: <span class="type">Czw</span>&lt;<span class="type">CzwBase</span>&gt; &#123; <span class="keyword">get</span> <span class="keyword">set</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">CzwCompatible</span> </span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">var</span> czw: <span class="type">Czw</span>&lt;<span class="type">Self</span>&gt;.<span class="type">Type</span> &#123;</span><br><span class="line">    <span class="keyword">get</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="type">Czw</span>&lt;<span class="type">Self</span>&gt;.<span class="keyword">self</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">set</span> &#123;</span><br><span class="line">      <span class="comment">// this enables using Czw to "mutate" base type</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/// Czw extensions.</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">var</span> czw: <span class="type">Czw</span>&lt;<span class="type">Self</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">get</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="type">Czw</span>(<span class="keyword">self</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">set</span> &#123;</span><br><span class="line">      <span class="comment">// this enables using Czw to "mutate" base object</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> class Foundation.NSObject</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">NSObject</span>: <span class="title">CzwCompatible</span> </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">String</span>: <span class="title">CzwCompatible</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Czw</span> <span class="title">where</span> <span class="title">Base</span> == <span class="title">String</span> </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> x: <span class="type">String</span> &#123;</span><br><span class="line">    <span class="keyword">get</span> &#123;</span><br><span class="line">      <span class="string">"233"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a = <span class="string">"1"</span></span><br><span class="line"><span class="keyword">let</span> b = a.czw.x</span><br></pre></td></tr></table></figure></pre></details><h3 id="具体扩展"><a class="markdownIt-Anchor" href="#具体扩展"></a> 具体扩展</h3><p>现在要将 reactive extensions 添加到类型，我们需要使用通用约束来扩展Reactive，而不是扩展目标类型本身。</p><p>因此对于下面这段代码：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">UIButton</span> </span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">var</span> rx_tap: <span class="type">ControlEvent</span>&lt;<span class="type">Void</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> rx_controlEvent(.touchUpInside)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以这么做</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Reactive</span> <span class="title">where</span> <span class="title">Base</span>: <span class="title">UIButton</span> </span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">var</span> tap: <span class="type">ControlEvent</span>&lt;<span class="type">Void</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> controlEvent(.touchUpInside)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="内存管理注意事项"><a class="markdownIt-Anchor" href="#内存管理注意事项"></a> 内存管理注意事项</h3><p>我看到的这种新语法的主要缺点是，它可能导致闭包内部不太直观的内存管理。<br>实际上，现在，响应式扩展属于Reactive类型（代理）。因此，无论在方法实现中使用 <code>self</code> 的什么地方，它都引用代理而不是 <code>base</code>。<br>但是由于这个 proxy 是一种值类型，无法弱化(weakify)它，并且每次在闭包内使用 <code>self</code> 时，它实际上都会 strongify（retain）其所有引用类型成员（即 <code>base</code> ）。<br>因此，在实现扩展时需要格外小心。 让我们以UISearchBar为例。</p><p>Sample 1 : 当前的实现</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">UISearchBar</span> </span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">var</span> rx_delegate: <span class="type">DelegateProxy</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="type">RxSearchBarDelegateProxy</span>.proxyForObject(<span class="keyword">self</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">var</span> rx_text: <span class="type">ControlProperty</span>&lt;<span class="type">String</span>&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> source: <span class="type">Observable</span>&lt;<span class="type">String</span>&gt; = <span class="type">Observable</span>.deferred &#123; [<span class="keyword">weak</span> <span class="keyword">self</span>] () -&gt; <span class="type">Observable</span>&lt;<span class="type">String</span>&gt; <span class="keyword">in</span></span><br><span class="line">    <span class="keyword">let</span> text = <span class="keyword">self</span>?.text ?? <span class="string">""</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">self</span>?.rx_delegate.observe(#selector(<span class="type">UISearchBarDelegate</span>.searchBar(<span class="number">_</span>:textDidChange:))) ?? <span class="type">Observable</span>.empty())</span><br><span class="line">    .<span class="built_in">map</span> &#123; a <span class="keyword">in</span></span><br><span class="line">      <span class="keyword">return</span> a[<span class="number">1</span>] <span class="keyword">as</span>? <span class="type">String</span> ?? <span class="string">""</span></span><br><span class="line">    &#125;</span><br><span class="line">    .startWith(text)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">let</span> bindingObserver = <span class="type">UIBindingObserver</span>(<span class="type">UIElement</span>: <span class="keyword">self</span>) &#123; (searchBar, text: <span class="type">String</span>) <span class="keyword">in</span></span><br><span class="line">    searchBar.text = text</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> <span class="type">ControlProperty</span>(values: source, valueSink: bindingObserver)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Sample 2 : 错误内存管理的新实现</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Reactive</span> <span class="title">where</span> <span class="title">Base</span>: <span class="title">UISearchBar</span> </span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">var</span> delegate: <span class="type">DelegateProxy</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="type">RxSearchBarDelegateProxy</span>.proxyForObject(<span class="keyword">self</span>.base)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">var</span> text: <span class="type">ControlProperty</span>&lt;<span class="type">String</span>&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> source: <span class="type">Observable</span>&lt;<span class="type">String</span>&gt; = <span class="type">Observable</span>.deferred &#123; [<span class="keyword">weak</span> searchBar = <span class="keyword">self</span>.base] () -&gt; <span class="type">Observable</span>&lt;<span class="type">String</span>&gt; <span class="keyword">in</span></span><br><span class="line">    <span class="keyword">let</span> text = searchBar?.text ?? <span class="string">""</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>.delegate.observe(#selector(<span class="type">UISearchBarDelegate</span>.searchBar(<span class="number">_</span>:textDidChange:)))</span><br><span class="line">    .<span class="built_in">map</span> &#123; a <span class="keyword">in</span></span><br><span class="line">      <span class="keyword">return</span> a[<span class="number">1</span>] <span class="keyword">as</span>? <span class="type">String</span> ?? <span class="string">""</span></span><br><span class="line">    &#125;</span><br><span class="line">    .startWith(text)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">let</span> bindingObserver = <span class="type">UIBindingObserver</span>(<span class="type">UIElement</span>: <span class="keyword">self</span>.base) &#123; (searchBar, text: <span class="type">String</span>) <span class="keyword">in</span></span><br><span class="line">    searchBar.text = text</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> <span class="type">ControlProperty</span>(values: source, valueSink: bindingObserver)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Sample 3 : 具有良好内存管理的新实现</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Reactive</span> <span class="title">where</span> <span class="title">Base</span>: <span class="title">UISearchBar</span> </span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">var</span> delegate: <span class="type">DelegateProxy</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="type">RxSearchBarDelegateProxy</span>.proxyForObject(<span class="keyword">self</span>.base)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">var</span> text: <span class="type">ControlProperty</span>&lt;<span class="type">String</span>&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> source: <span class="type">Observable</span>&lt;<span class="type">String</span>&gt; = <span class="type">Observable</span>.deferred &#123; [<span class="keyword">weak</span> searchBar = <span class="keyword">self</span>.base] () -&gt; <span class="type">Observable</span>&lt;<span class="type">String</span>&gt; <span class="keyword">in</span></span><br><span class="line">    <span class="keyword">let</span> text = searchBar?.text ?? <span class="string">""</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> (searchBar?.rx.delegate.observe(#selector(<span class="type">UISearchBarDelegate</span>.searchBar(<span class="number">_</span>:textDidChange:))) ?? <span class="type">Observable</span>.empty())</span><br><span class="line">    .<span class="built_in">map</span> &#123; a <span class="keyword">in</span></span><br><span class="line">      <span class="keyword">return</span> a[<span class="number">1</span>] <span class="keyword">as</span>? <span class="type">String</span> ?? <span class="string">""</span></span><br><span class="line">    &#125;</span><br><span class="line">    .startWith(text)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">let</span> bindingObserver = <span class="type">UIBindingObserver</span>(<span class="type">UIElement</span>: <span class="keyword">self</span>.base) &#123; (searchBar, text: <span class="type">String</span>) <span class="keyword">in</span></span><br><span class="line">    searchBar.text = text</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> <span class="type">ControlProperty</span>(values: source, valueSink: bindingObserver)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关键部分是在每个 sample 代码的第 10行<br>sample2 很容易通过 self 访问 <code>delegate</code> 观察者，因为 <code>delegate</code> 是在同一 <code>proxy</code> 扩展上定义的。但是这样做，闭包捕获了 <code>self</code> 并保留了其所有引用成员。因此，它取消了 <code>[weak searchBar = self.base]</code> 捕获列表</p><p>避免这种情况的正确方法是，总是在旧的实现中用 <code>base</code> 替换 <code>self</code> ，并且每当有rx_前缀时，都应该用 rx. 代理替换它。</p><blockquote><p><a href="https://github.com/ReactiveX/RxSwift/issues/826#issue-169876139" target="_blank" rel="noopener">Move from <code>rx_</code> prefix to a <code>rx.</code> proxy (for swift3 update ?)</a></p></blockquote><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> 第三方框架 </category>
          
          <category> RxSwift </category>
          
      </categories>
      
      
        <tags>
            
            <tag> swift </tag>
            
            <tag> 翻译 </tag>
            
            <tag> 设计思想 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Rx+MVVM 实际应用</title>
      <link href="/2018/03/04/RxSwfit+RAC/Rx-MVVM-%E5%AE%9E%E9%99%85%E5%BA%94%E7%94%A8/"/>
      <url>/2018/03/04/RxSwfit+RAC/Rx-MVVM-%E5%AE%9E%E9%99%85%E5%BA%94%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Jun 02 2020 17:35:52 GMT+0800 (CST) --><p>在看文 RxSwift 相关官方文档以后，知道 RxSwift 提供的多种功能以后，在实际场景中我们该怎么使用呢？</p><h2 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h2><p>本篇文章只谈 rx 在 MVVM 中如何使用。<br>RxSwift 的功能强大，加上 Apple 提供的framework也提供了很多方式，来处理 MVVM 中事件监听回调……<br>使用 RxSwift 的优缺点不谈，单单说 RxSwift 代码零散在 View层，ViewModel层就让人困扰，到底什么样的事件流才是最合适的，这个因人而异，不过在团队开发中框架使用的方式要统一！<br>这样可以大大提高开发效率……</p><p>MVVM 复合模式的样子</p><p><img src="/img/mvvm.jpeg" alt=""></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">ViewController</span><br><span class="line">    * 管理视图布局渲染</span><br><span class="line">    * 控制器生命周期</span><br><span class="line">    * 接受视图 actions，并作出相应</span><br><span class="line">    * 控制器跳转</span><br><span class="line">    * ....</span><br><span class="line"></span><br><span class="line">ViewModel</span><br><span class="line">    * 各种 <span class="built_in">Server</span> 的中介器</span><br><span class="line">    * netServer，DBServer，OtherManager……</span><br><span class="line">    * ....</span><br></pre></td></tr></table></figure><h2 id="为什么要在-mvvm-中使用-rx"><a class="markdownIt-Anchor" href="#为什么要在-mvvm-中使用-rx"></a> 为什么要在 MVVM 中使用 Rx</h2><p>抛去上段补充信息，只关注<font color="red">event/data</font>的流动方向，得出下图</p><p><img src="/img/mvvm_1.jpeg" alt=""></p><p>那么可不可以把 input/output 当做槽口</p><p><img src="/img/mvvm_2.jpeg" alt=""></p><p><strong>槽口！</strong>，如果看 RxSwift 源码可以看到大量的 sink(水槽) 类，sink 是连接各种 Observable 和 Observer 的管道:</p><p>Observable 流进水槽的槽口，流出（event(data?)）<br>Observer 流出水槽的槽口，接受（event(data?)）<br>所以，使用 RxSwift 来制作 View层和ViewModel 层的槽口，RxSwift vs 事件/数据的流程 vs App 流程</p><p><img src="/img/mvvm_3.jpeg" alt=""></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">ViewModelType</span> </span>&#123;</span><br><span class="line">  <span class="keyword">associatedtype</span> <span class="type">Input</span></span><br><span class="line">  <span class="keyword">associatedtype</span> <span class="type">Output</span></span><br><span class="line">  <span class="keyword">var</span> input: <span class="type">Input</span> &#123; <span class="keyword">get</span> &#125;</span><br><span class="line">  <span class="keyword">var</span> output: <span class="type">Output</span> &#123; <span class="keyword">get</span> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一个详细的 demo</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">SayHelloViewModel</span>: <span class="title">ViewModelType</span> </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> input: <span class="type">Input</span></span><br><span class="line">  <span class="keyword">let</span> output: <span class="type">Output</span></span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">Input</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> name: <span class="type">AnyObserver</span>&lt;<span class="type">String</span>&gt;</span><br><span class="line">    <span class="keyword">let</span> validate: <span class="type">AnyObserver</span>&lt;<span class="type">Void</span>&gt;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">Output</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> greeting: <span class="type">Driver</span>&lt;<span class="type">String</span>&gt;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">let</span> nameSubject = <span class="type">ReplaySubject</span>&lt;<span class="type">String</span>&gt;.create(bufferSize: <span class="number">1</span>)</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">let</span> validateSubject = <span class="type">PublishSubject</span>&lt;<span class="type">Void</span>&gt;()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">init</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> greeting = validateSubject</span><br><span class="line">      .withLatestFrom(nameSubject)</span><br><span class="line">      .<span class="built_in">map</span> &#123; name <span class="keyword">in</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello \(name)!"</span></span><br><span class="line">      &#125;</span><br><span class="line">      .asDriver(onErrorJustReturn: <span class="string">":-("</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">self</span>.output = <span class="type">Output</span>(greeting: greeting)</span><br><span class="line">    <span class="keyword">self</span>.input = <span class="type">Input</span>(name: nameSubject.asObserver(), validate: validateSubject.asObserver())</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Subject是私有的。没有非法侵入ViewModel的方式，只能通过公共的Input和output属性。</p><p>ViewModel 可以插入到任何view，容易单元测试和Rx绑定。<br><a href="https://gist.github.com/MartinMoizard/449be0d30920010210988f1773a2ca90" target="_blank" rel="noopener">view 使用这种方式绑定的 demo</a></p><h2 id="cell-监听复用问题"><a class="markdownIt-Anchor" href="#cell-监听复用问题"></a> cell 监听复用问题</h2><p>cell 引用的 Observable <code>tableView:cellForRowAtIndexPath:</code> 中被订阅，该方法反复调用的过程 cell 不会被释放，只是被复用，所以每次 cell 在该方法中订阅的时候都应该先解除上一次的订阅。如果不解除，这个 Observable 会有多个订阅者</p><p>那么如何有效的解除上次 cell 复用产生的订阅呢？</p><p>思路一：有三种实现方式</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">prepareForReuse</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="keyword">super</span>.prepareForReuse()</span><br><span class="line"><span class="comment">// Clean Rx subscriptions</span></span><br><span class="line">  disposeBag = <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">bind</span><span class="params">(to viewModel: ViewModel)</span></span> &#123;</span><br><span class="line">  <span class="keyword">let</span> bag = <span class="type">DisposeBag</span>()</span><br><span class="line">  nameTextField.rx</span><br><span class="line">      .text</span><br><span class="line">      .orEmpty</span><br><span class="line">      .bind(to: viewModel.input.name)</span><br><span class="line">      .disposed(by: bag)</span><br><span class="line">  disposeBag = bag</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">prepareForReuse</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="keyword">super</span>.prepareForReuse()</span><br><span class="line"><span class="comment">// Clean Rx subscriptions</span></span><br><span class="line">  disposeBag = <span class="type">DisposeBag</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第三那种 使用 swizzle <a href="https://github.com/bmoliveira/Cell-Rx" target="_blank" rel="noopener">cell-rx</a></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">UITableViewCell</span>: <span class="title">SelfAware</span> </span>&#123;</span><br><span class="line">  <span class="meta">@objc</span> <span class="function"><span class="keyword">func</span> <span class="title">rx_prepareForReuse</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">self</span>.rx_prepareForReuse()</span><br><span class="line">    rx_reusableDisposeBag = <span class="type">DisposeBag</span>()</span><br><span class="line">  &#125; </span><br><span class="line">  <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">func</span> <span class="title">swizzle</span>() </span>&#123;</span><br><span class="line">    <span class="comment">// make sure this isn't a subclass</span></span><br><span class="line">    <span class="keyword">guard</span> <span class="keyword">self</span> === <span class="type">UITableViewCell</span>.<span class="keyword">self</span> <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</span><br><span class="line">    <span class="keyword">self</span>.swizzleMethodForSelector(#selector(<span class="keyword">self</span>.prepareForReuse), withMethodForSelector: #selector(<span class="keyword">self</span>.rx_prepareForReuse))</span><br><span class="line">  &#125; </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">awake</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="type">UITableViewCell</span>.swizzle()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>or 自定义 Rx extension，使用 takeUntil(rx.prepareReuse)</p><p>引用：</p><blockquote><p><a href="https://medium.com/blablacar-tech/rxswift-mvvm-66827b8b3f10" target="_blank" rel="noopener">RxSwift + MVVM: how to feed ViewModels</a></p></blockquote><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> 第三方框架 </category>
          
          <category> RxSwift </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RxSwift </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>swift 语法小记</title>
      <link href="/2018/02/09/swift%20%E8%AF%AD%E6%B3%95/swift-%E8%AF%AD%E6%B3%95%E5%B0%8F%E8%AE%B0/"/>
      <url>/2018/02/09/swift%20%E8%AF%AD%E6%B3%95/swift-%E8%AF%AD%E6%B3%95%E5%B0%8F%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Jun 02 2020 17:35:52 GMT+0800 (CST) --><a id="more"></a><h2 id="swift-语法"><a class="markdownIt-Anchor" href="#swift-语法"></a> Swift 语法</h2><h3 id="swift-中位移枚举如何表示"><a class="markdownIt-Anchor" href="#swift-中位移枚举如何表示"></a> Swift 中位移枚举如何表示</h3><p>OC 中位移枚举</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 位移枚举</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">NS_OPTIONS</span>(<span class="built_in">NSUInteger</span>, Direction) &#123;</span><br><span class="line">    Top       = <span class="number">1</span> &lt;&lt; <span class="number">0</span>,   <span class="comment">// 0000 0001,</span></span><br><span class="line">    Bottom    = <span class="number">1</span> &lt;&lt; <span class="number">1</span>,   <span class="comment">// 0000 0010,</span></span><br><span class="line">    Left      = <span class="number">1</span> &lt;&lt; <span class="number">2</span>,   <span class="comment">// 0000 0100,</span></span><br><span class="line">    Right     = <span class="number">1</span> &lt;&lt; <span class="number">3</span>,   <span class="comment">// 0000 1000,</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Swift中位移枚举,替换方案是选项集合(OptionSet)</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Direction</span>: <span class="title">OptionSet</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> rawValue: <span class="type">UInt</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">let</span> top = <span class="type">Direction</span>(rawValue: <span class="number">1</span> &lt;&lt; <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">let</span> bottom = <span class="type">Direction</span>(rawValue: <span class="number">1</span> &lt;&lt; <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">let</span> <span class="keyword">left</span> = <span class="type">Direction</span>(rawValue: <span class="number">1</span> &lt;&lt; <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">let</span> <span class="keyword">right</span> = <span class="type">Direction</span>(rawValue: <span class="number">1</span> &lt;&lt; <span class="number">3</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">在<span class="type">Swift</span>就不再使用 &amp;, | 运算了， 如果想使用多选，需要用数组代替，例如</span><br><span class="line"></span><br><span class="line">```swift</span><br><span class="line"><span class="keyword">let</span> options: <span class="type">Direction</span> = [.top, .bottom]  <span class="comment">// 与OC中 Top | Bottom 相同的作用</span></span><br><span class="line">options.<span class="built_in">contains</span>(.top)</span><br><span class="line">options.<span class="built_in">contains</span>(.<span class="keyword">left</span>)</span><br></pre></td></tr></table></figure><h3 id="counter-loop"><a class="markdownIt-Anchor" href="#counter-loop"></a> Counter loop</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">1</span>...<span class="number">10</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> g = (<span class="number">0</span>..&lt;<span class="number">10</span>).generate()</span><br><span class="line"><span class="keyword">while</span> <span class="keyword">let</span> i = g.next() &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// iterate over every other integer</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>.<span class="built_in">stride</span>(to: <span class="number">10</span>, by: <span class="number">2</span>) &#123; <span class="built_in">print</span>(i) &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// skip a specific number</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> (<span class="number">0</span>..&lt;<span class="number">10</span>).<span class="built_in">filter</span>(&#123; $<span class="number">0</span> != <span class="number">5</span> &#125;) &#123; <span class="built_in">print</span>(i) &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a = [<span class="string">"one"</span>,<span class="string">"two"</span>,<span class="string">"three"</span>,<span class="string">"four"</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// ok so this one’s a bit convoluted...</span></span><br><span class="line"><span class="keyword">let</span> everyOther = a.<span class="built_in">enumerate</span>().<span class="built_in">filter</span> &#123; $<span class="number">0.0</span> % <span class="number">2</span> == <span class="number">0</span> &#125;.<span class="built_in">map</span> &#123; $<span class="number">0.1</span> &#125;.<span class="built_in">lazy</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> s <span class="keyword">in</span> everyOther &#123;</span><br><span class="line">    <span class="built_in">print</span>(s)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="编译符"><a class="markdownIt-Anchor" href="#编译符"></a> 编译符</h3><p>@discardableResult</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sum</span><span class="params">(a: Int, b: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br><span class="line">sum(a: <span class="number">1</span>, b: <span class="number">2</span>) <span class="comment">// Result of call to 'sum(a:b:)' is unused</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//表示取消不使用返回值的警告</span></span><br><span class="line"><span class="meta">@discardableResult</span> </span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sum</span><span class="params">(a: Int, b: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br><span class="line">sum(a: <span class="number">1</span>, b: <span class="number">2</span>) <span class="comment">// No longer produce the warning</span></span><br></pre></td></tr></table></figure><p>在 Objective-c中</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="built_in">NSString</span> *)greeting __attribute__((warn_unused_result));</span><br></pre></td></tr></table></figure><h3 id="string"><a class="markdownIt-Anchor" href="#string"></a> String</h3><p>使用 String(describing: Class.self) 方法 代替 NSStringFromClass 得到 类的字符串</p><h3 id="gcd"><a class="markdownIt-Anchor" href="#gcd"></a> GCD</h3><h4 id="once"><a class="markdownIt-Anchor" href="#once"></a> once</h4><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> 开发语言 </category>
          
          <category> swift </category>
          
      </categories>
      
      
        <tags>
            
            <tag> swift </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Texture 浅析</title>
      <link href="/2018/02/09/Texture-%E6%B5%85%E6%9E%90/"/>
      <url>/2018/02/09/Texture-%E6%B5%85%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Jun 02 2020 17:35:51 GMT+0800 (CST) --><h2 id="nodes"><a class="markdownIt-Anchor" href="#nodes"></a> Nodes</h2><p><code>ASDisplayNode</code> 是 <code>UIView</code> 的抽象层, 就像 <code>UIView</code> 是 <code>CALayer</code> 的抽象层一样. 不同的是 UIKit 只能运行在主线程，nodes 是线程安全的，可以在后台线程上并行实例化和配置它们的整个层次结构。</p><p><img src="/img/Texture.jpg" alt="texture_node"></p><h2 id="子类化"><a class="markdownIt-Anchor" href="#子类化"></a> 子类化</h2><h3 id="自定义-asdisplaynode-子类"><a class="markdownIt-Anchor" href="#自定义-asdisplaynode-子类"></a> 自定义 ASDisplayNode 子类</h3><p>如果想使用 Texture，需要自定义类继承自 <code>ASDisplayNode</code> 需要注意方法：</p><p>注意：UIKit 相关属性方法只能在 main thread 中使用，注意 <code>ASDisplayNode</code> 方法在 main/background thread 中实现很重要</p><table><thead><tr><th>ASDisplayNode方法</th><th>线程</th><th>功能描述</th></tr></thead><tbody><tr><td>init</td><td>background</td><td>这个方法很少用（因为background），使用 nodeBlocks 的时调用，初始化方法调用才可以调用其他方法</td></tr><tr><td>didLoad</td><td>main</td><td>类似 viewDidLoad，添加 UIKit objects初始化，配置objects 属性，事件……</td></tr><tr><td>layoutSpecThatFits</td><td>background</td><td>布局代码(返回 layout spec object布局nodes)，layout spec object 对象不会cache，而是在合适(啥时候？)的时候调用重新创建</td></tr><tr><td>layout</td><td>main</td><td>调用 super.layout 方法会调用layoutSpecThatFits，这样所有的 nodes 都会布局完成，类似 viewWillLayoutSubviews 方法，很少使用，如果想这样subnode.frame = self.bounds 那就用吧</td></tr></tbody></table><h3 id="自定义-asviewcontroller-子类"><a class="markdownIt-Anchor" href="#自定义-asviewcontroller-子类"></a> 自定义 ASViewController 子类</h3><p><code>ASViewController</code> 是 <code>UIViewController</code> 的子类，所以 <code>ASViewController</code> 需要在 main thread 中使用。</p><p><code>ASViewController</code> 管理 node 就像 <code>UIViewController</code> 管理 view 一样<br>但是 <code>ASViewController</code> 的指派构造函数与 UIViewController 不同</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">init</span>() &#123;</span><br><span class="line">  <span class="keyword">let</span> pagerNode = <span class="type">ASPagerNode</span>()</span><br><span class="line">  <span class="keyword">super</span>.<span class="keyword">init</span>(node: pagerNode)</span><br><span class="line"></span><br><span class="line">  pagerNode.setDataSource(<span class="keyword">self</span>)</span><br><span class="line">  pagerNode.setDelegate(<span class="keyword">self</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>-loadView</strong><br>在 loadView 如果你不改变 <code>self.view</code> 的值，就可以，不过建议你使用 <code>viewDidLoad</code> 方法. 调用 [super loadView] 会设置 <code>node.view</code> .</p><p><strong>-viewDidLoad</strong><br>在 <code>ASViewController</code> 的生命周期中，这个方法只会，在 <code>loadView</code> 调用以后立即调用一次。那些只会调用一次的配置放在这里最好。</p><p>布局代码不应该放在这里，因为几何元素改变这个方法不会调用（当然可以在viewDidLoad中配置监听者模式监听）</p><p><strong>-viewWillLayoutSubviews</strong><br>该方法与 <code>node</code> 的 <code>-layout</code> 方法在同一时间被调用，并且在ASViewController的生命周期中可能被多次调用。<br>只要 ASViewController 的 node 的 bounds 改变（包括旋转，分屏，键盘显示），以及层次结构发生了更改（添加，删除或更改了 children），它就会被调用<br>为了保持一致性，最佳做法是将所有布局代码放入此方法中。因为它的调用频率不高，所以不直接依赖于大小的代码也属于此处。</p><p><strong>-viewWillAppear: / -viewDidDisappear:</strong><br>这些方法在ASViewController的node出现在屏幕上之前（最早可见）和刚从视图层次结构中删除之后（不再可见的最早时间）被调用。这些方法提供了一个很好的机会来启动或停止与控制器的演示或解雇有关的动画。这也是记录用户操作的好地方。</p><p>尽管可以多次调用这些方法并且可以获取几何图形信息，但是并不能为所有几何图形更改调用它们，因此，不应将它们用于核心布局代码（超出特定动画所需的设置）。</p><h2 id="布局"><a class="markdownIt-Anchor" href="#布局"></a> 布局</h2><h2 id="node-是如何绘制的"><a class="markdownIt-Anchor" href="#node-是如何绘制的"></a> Node 是如何绘制的</h2><p>引用：</p><blockquote><p><a href="http://texturegroup.org/" target="_blank" rel="noopener">Texture</a></p></blockquote><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> 第三方框架 </category>
          
          <category> UI 布局 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> swift </tag>
            
            <tag> Texture </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RxSwift 学习笔记</title>
      <link href="/2018/02/06/RxSwfit+RAC/RxSwift-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2018/02/06/RxSwfit+RAC/RxSwift-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Jun 02 2020 17:35:52 GMT+0800 (CST) --><a id="more"></a><h2 id="学习目的"><a class="markdownIt-Anchor" href="#学习目的"></a> 学习目的</h2><ol><li>知道 rxswift 都有什么</li><li>知道他们都怎么用</li><li>知道为什么有这些东西</li><li>根类归纳整理</li><li>如何自己扩展</li><li>适当分析源码</li></ol><h2 id="主要概念"><a class="markdownIt-Anchor" href="#主要概念"></a> 主要概念</h2><ol><li>可监听序列(信号)</li><li>operator(信号变换&amp;组合)</li><li>observer(观察者)</li><li>订阅（绑定）</li><li>Disposable取消订阅</li></ol><h2 id="如何创建信号"><a class="markdownIt-Anchor" href="#如何创建信号"></a> 如何创建信号</h2><h3 id="可监听序列"><a class="markdownIt-Anchor" href="#可监听序列"></a> 可监听序列</h3><p>event</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">Event</span>&lt;<span class="title">Element</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">case</span> next(<span class="type">Element</span>) </span><br><span class="line">  <span class="keyword">case</span> error(<span class="type">Swift</span>.<span class="type">Error</span>) </span><br><span class="line">  <span class="keyword">case</span> completed </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> numbers: <span class="type">Observable</span>&lt;<span class="type">Int</span>&gt; = <span class="type">Observable</span>.create &#123; observer -&gt; <span class="type">Disposable</span> <span class="keyword">in</span></span><br><span class="line">  observer.onNext(<span class="number">0</span>)</span><br><span class="line">  observer.onNext(<span class="number">1</span>)</span><br><span class="line">  observer.onCompleted()</span><br><span class="line">  <span class="keyword">return</span> <span class="type">Disposables</span>.create()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">Observable</span>&lt;<span class="type">Int</span>&gt;.just(one)</span><br><span class="line"><span class="type">Observable</span>.of(one, two, three)</span><br><span class="line"><span class="type">Observable</span>.from([one, two, three])</span><br><span class="line"><span class="type">Observable</span>&lt;<span class="type">Void</span>&gt;.empty()</span><br><span class="line"><span class="type">Observable</span>&lt;<span class="type">Any</span>&gt;.never()</span><br><span class="line"><span class="type">Observable</span>&lt;<span class="type">Int</span>&gt;.range(start: <span class="number">1</span>, <span class="built_in">count</span>: <span class="number">10</span>)</span><br><span class="line"><span class="type">Observable</span>&lt;<span class="type">String</span>&gt;.create</span><br></pre></td></tr></table></figure><h3 id="特征序列"><a class="markdownIt-Anchor" href="#特征序列"></a> 特征序列</h3><h4 id="single"><a class="markdownIt-Anchor" href="#single"></a> Single</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">SingleEvent</span>&lt;<span class="title">Element</span>&gt; </span>&#123; </span><br><span class="line">  <span class="keyword">case</span> success(<span class="type">Element</span>) </span><br><span class="line">  <span class="keyword">case</span> error(<span class="type">Swift</span>.<span class="type">Error</span>) </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>发出⼀个元素，或⼀个error 事件</li><li>不会共享附加作⽤</li></ul><p>⼀个⽐较常⻅的例⼦就是执⾏ HTTP 请求，然后返回⼀个应答或错误。不过你也可以⽤ Single 来描述任何只有⼀个元素的序列。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getRepo</span><span class="params">(<span class="number">_</span> repo: String)</span></span> -&gt; <span class="type">Single</span>&lt;[<span class="type">String</span>: <span class="type">Any</span>]&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="type">Single</span>&lt;[<span class="type">String</span>: <span class="type">Any</span>]&gt;.create &#123; single <span class="keyword">in</span> </span><br><span class="line">    <span class="keyword">let</span> url = <span class="type">URL</span>(string: <span class="string">"https://api.github.com/repos/\(repo)"</span>)! </span><br><span class="line">    <span class="keyword">let</span> task = <span class="type">URLSession</span>.shared.dataTask(with: url) &#123; data, <span class="number">_</span>, error <span class="keyword">in</span> </span><br><span class="line">      <span class="keyword">if</span> <span class="keyword">let</span> error = error &#123; </span><br><span class="line">        single(.error(error)) </span><br><span class="line">        <span class="keyword">return</span> </span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">guard</span> <span class="keyword">let</span> data = data, </span><br><span class="line">            <span class="keyword">let</span> json = <span class="keyword">try</span>? <span class="type">JSONSerialization</span>.jsonObject(with: data, options: .mutableLeaves), </span><br><span class="line">            <span class="keyword">let</span> result = json <span class="keyword">as</span>? [<span class="type">String</span>: <span class="type">Any</span>] <span class="keyword">else</span> &#123; </span><br><span class="line">        single(.error(<span class="type">DataError</span>.cantParseJSON)) </span><br><span class="line">        <span class="keyword">return</span> </span><br><span class="line">      &#125;</span><br><span class="line">      single(.success(result)) </span><br><span class="line">    &#125; </span><br><span class="line">    task.resume() </span><br><span class="line">    <span class="keyword">return</span> <span class="type">Disposables</span>.create &#123; task.cancel() &#125; </span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以对 Observable 调⽤ .asSingle() ⽅法，将它转换为 Single。</p><h4 id="completable"><a class="markdownIt-Anchor" href="#completable"></a> Completable</h4><ul><li>没有 next 时间</li><li>发出 completed 或error 事件</li><li>不会共享附加作</li></ul><p>Completable 适⽤于那种你只关⼼任务是否完成，⽽不需要在意任务返回值的情况。它和 Observable<void>有点相似。</void></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">cacheLocally</span><span class="params">()</span></span> -&gt; <span class="type">Completable</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="type">Completable</span>.create &#123; completable <span class="keyword">in</span></span><br><span class="line">    <span class="comment">// Store some data locally</span></span><br><span class="line">    ... </span><br><span class="line">    ... </span><br><span class="line">    <span class="keyword">guard</span> success <span class="keyword">else</span> &#123;</span><br><span class="line">      completable(.error(<span class="type">CacheError</span>.failedCaching))</span><br><span class="line">      <span class="keyword">return</span> <span class="type">Disposables</span>.create &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    completable(.completed)</span><br><span class="line">    <span class="keyword">return</span> <span class="type">Disposables</span>.create &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="maybe"><a class="markdownIt-Anchor" href="#maybe"></a> Maybe</h4><ul><li>发出⼀个next，completed或error 事件</li><li>不会共享附加作⽤</li></ul><p>如果你遇到那种可能需要发出⼀个元素，⼜可能不需要发出时，就可以使⽤ Maybe。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">generateString</span><span class="params">()</span></span> -&gt; <span class="type">Maybe</span>&lt;<span class="type">String</span>&gt; &#123; </span><br><span class="line">  <span class="keyword">return</span> <span class="type">Maybe</span>&lt;<span class="type">String</span>&gt;.create &#123; maybe <span class="keyword">in</span> </span><br><span class="line">    maybe(.success(<span class="string">"RxSwift"</span>)) </span><br><span class="line">    <span class="comment">// OR </span></span><br><span class="line">    maybe(.completed) </span><br><span class="line">    <span class="comment">// OR </span></span><br><span class="line">    maybe(.error(error)) </span><br><span class="line">    <span class="keyword">return</span> <span class="type">Disposables</span>.create &#123;&#125; </span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以对 Observable 调⽤ .asMaybe() ⽅法，将它转换为 Maybe。</p><h4 id="driver"><a class="markdownIt-Anchor" href="#driver"></a> Driver</h4><p>主要是为了简化 UI 层的代码</p><ul><li>不会产⽣ error 事件</li><li>⼀定在 MainScheduler 监听（主线程监听）</li><li>共享附加作⽤</li></ul><p>使用 driver 的原因</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> results = query.rx.text </span><br><span class="line">  .throttle(<span class="number">0.3</span>, scheduler: <span class="type">MainScheduler</span>.instance) </span><br><span class="line">  .flatMapLatest &#123; query <span class="keyword">in</span> </span><br><span class="line">  fetchAutoCompleteItems(query) </span><br><span class="line">    .observeOn(<span class="type">MainScheduler</span>.instance) <span class="comment">// 结果在主线程返回 </span></span><br><span class="line">    .catchErrorJustReturn([]) <span class="comment">// 错误被处理了，这样⾄少不会终⽌整个序列 </span></span><br><span class="line">  &#125; </span><br><span class="line">  .share(replay: <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// HTTP 请求是被共享的</span></span><br><span class="line">results</span><br><span class="line">  .<span class="built_in">map</span> &#123; <span class="string">"\($0.count)"</span> &#125;</span><br><span class="line">  .bind(to: resultCount.rx.text)</span><br><span class="line">  .disposed(by: disposeBag)</span><br><span class="line"></span><br><span class="line">results</span><br><span class="line">  .bind(to: resultsTableView.rx.items(cellIdentifier: <span class="string">"Cell"</span>)) &#123; (<span class="number">_</span>, result, cell) <span class="keyword">in</span> </span><br><span class="line">    cell.textLabel?.text = <span class="string">"\(result)"</span></span><br><span class="line">  &#125;</span><br><span class="line">  .disposed(by: disposeBag)</span><br></pre></td></tr></table></figure><p>使用 drive</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> results = query.rx.text.asDriver() <span class="comment">// 将ControlProperty 转换为 Driver</span></span><br><span class="line">  .throttle(<span class="number">0.3</span>, scheduler: <span class="type">MainScheduler</span>.instance) </span><br><span class="line">  .flatMapLatest &#123; query <span class="keyword">in</span> </span><br><span class="line">    fetchAutoCompleteItems(query) </span><br><span class="line">    .asDriver(onErrorJustReturn: []) <span class="comment">// 仅仅提供发⽣错误时的备选返回值 </span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">results </span><br><span class="line">  .<span class="built_in">map</span> &#123; <span class="string">"\($0.count)"</span> &#125; </span><br><span class="line">  .drive(resultCount.rx.text) <span class="comment">// 这⾥改⽤ `drive` ⽽不是 `bindTo`</span></span><br><span class="line">  .disposed(by: disposeBag) <span class="comment">// 这样可以确保必备条件都已经满⾜了</span></span><br><span class="line"></span><br><span class="line">results</span><br><span class="line">  .drive(resultsTableView.rx.items(cellIdentifier: <span class="string">"Cell"</span>)) &#123; (<span class="number">_</span>, result, cell) <span class="keyword">in</span> </span><br><span class="line">    cell.textLabel?.text = <span class="string">"\(result)"</span> </span><br><span class="line">  &#125;</span><br><span class="line">  .disposed(by: disposeBag)</span><br></pre></td></tr></table></figure><h4 id="signal"><a class="markdownIt-Anchor" href="#signal"></a> Signal</h4><p>Signal 和 Driver 相似，唯⼀的区别是，Driver 会对新观察者回放（重新发送）上⼀个元素，⽽ Signal 不会对新观察者回放上⼀个元素。</p><ul><li>不会产⽣ error 事件</li><li>⼀定在 MainScheduler 监听（主线程监听）</li><li>共享附加作⽤</li></ul><p>⼀般情况下状态序列我们会选⽤ Driver 这个类型，事件序列我们会选⽤ Signal 这个类型。</p><h4 id="controlevent"><a class="markdownIt-Anchor" href="#controlevent"></a> ControlEvent</h4><p>ControlEvent 专⻔⽤于描述 UI 控件所产⽣的事件，它具有以下特征：</p><ul><li>不会产⽣ error 事件</li><li>⼀定在 MainScheduler</li><li>⼀定在 MainScheduler 订阅（主线程订阅） 监听（主线程监听）</li><li>共享附加作⽤</li></ul><h3 id="观察者-anyobserver"><a class="markdownIt-Anchor" href="#观察者-anyobserver"></a> 观察者 AnyObserver</h3><h4 id="特征观察者-binder"><a class="markdownIt-Anchor" href="#特征观察者-binder"></a> 特征观察者 Binder</h4><ul><li>不会处理错误事件</li><li>确保绑定都是在给定 Scheduler 上执⾏（默认 MainScheduler）</li><li>只处理 next 事件</li></ul><p>在介绍 AnyObserver 时，我们举了这样⼀个例⼦：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> observer: <span class="type">AnyObserver</span>&lt;<span class="type">Bool</span>&gt; = <span class="type">AnyObserver</span> &#123; [<span class="keyword">weak</span> <span class="keyword">self</span>] (event) <span class="keyword">in</span> </span><br><span class="line">  <span class="keyword">switch</span> event &#123; </span><br><span class="line">    <span class="keyword">case</span> .next(<span class="keyword">let</span> isHidden): </span><br><span class="line">      <span class="keyword">self</span>?.usernameValidOutlet.isHidden = isHidden </span><br><span class="line">    <span class="keyword">default</span>: </span><br><span class="line">      <span class="keyword">break</span> </span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">usernameValid </span><br><span class="line">  .bind(to: observer) </span><br><span class="line">  .disposed(by: disposeBag)</span><br></pre></td></tr></table></figure><p>由于这个观察者是⼀个 UI 观察者，所以它在响应事件时，只会处理 next 事件，并且更新 UI 的操作需要在主线程上执⾏。<br>因此⼀个更好的⽅案就是使⽤ Binder：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> observer: <span class="type">Binder</span>&lt;<span class="type">Bool</span>&gt; = <span class="type">Binder</span>(usernameValidOutlet) &#123; (view, isHidden) <span class="keyword">in</span></span><br><span class="line">  view.isHidden = isHidden </span><br><span class="line">&#125; </span><br><span class="line">usernameValid </span><br><span class="line">  .bind(to: observer) </span><br><span class="line">  .disposed(by: disposeBag)</span><br></pre></td></tr></table></figure><p>Binder 可以只处理 next 事件，并且保证响应 next 事件的代码一定会在给定 Scheduler 上执⾏，这⾥采⽤默认的 MainScheduler。</p><ul><li>复用</li></ul><p>由于⻚⾯是否隐藏是⼀个常⽤的观察者，所以应该让所有的 UIView 都提供这种观察者：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Reactive</span> <span class="title">where</span> <span class="title">Base</span>: <span class="title">UIView</span> </span>&#123; </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">var</span> isHidden: <span class="type">Binder</span>&lt;<span class="type">Bool</span>&gt; &#123; </span><br><span class="line">    <span class="keyword">return</span> <span class="type">Binder</span>(<span class="keyword">self</span>.base) &#123; view, hidden <span class="keyword">in</span> </span><br><span class="line">      view.isHidden = hidden </span><br><span class="line">    &#125; </span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//-----</span></span><br><span class="line">usernameValid </span><br><span class="line">  .bind(to: usernameValidOutlet.rx.isHidden) </span><br><span class="line">  .disposed(by: disposeBag)</span><br></pre></td></tr></table></figure><h3 id="即使观察序列又是观察者"><a class="markdownIt-Anchor" href="#即使观察序列又是观察者"></a> 即使观察序列又是观察者</h3><h4 id="asyncsubject"><a class="markdownIt-Anchor" href="#asyncsubject"></a> AsyncSubject</h4><h4 id="publishsubject"><a class="markdownIt-Anchor" href="#publishsubject"></a> PublishSubject</h4><h4 id="replaysubject"><a class="markdownIt-Anchor" href="#replaysubject"></a> ReplaySubject</h4><h4 id="behaviorsubject"><a class="markdownIt-Anchor" href="#behaviorsubject"></a> BehaviorSubject</h4><h4 id="controlproperty"><a class="markdownIt-Anchor" href="#controlproperty"></a> ControlProperty</h4><h4 id="rxrelay"><a class="markdownIt-Anchor" href="#rxrelay"></a> RxRelay</h4><h4 id="publishrelay"><a class="markdownIt-Anchor" href="#publishrelay"></a> PublishRelay</h4><p>PublishRelay 就是 PublishSubject 去掉终⽌事件 onError 或 onCompleted 。</p><h4 id="behaviorrelay"><a class="markdownIt-Anchor" href="#behaviorrelay"></a> BehaviorRelay</h4><p>BehaviorRelay 就是 BehaviorSubject 去掉终⽌事件 演示 onError 或 onCompleted 。</p><h3 id="如何选择operator"><a class="markdownIt-Anchor" href="#如何选择operator"></a> 如何选择operator</h3><p><strong>Observable 创建</strong></p><ul><li>产⽣特定的⼀个元素：just<ul><li>经过⼀段延时：timer</li></ul></li><li>从⼀个序列拉取元素：from</li><li>重复的产⽣某⼀个元素：repeatElement</li><li>存在⾃定义逻辑：create</li><li>每次订阅时产⽣：deferred</li><li>每隔⼀段时间，发出⼀个元素：interval<ul><li>在⼀段延时后：timer</li></ul></li><li>⼀个空序列，只有⼀个完成事件：empty</li><li>⼀个任何事件都没有产⽣的序列：never</li></ul><p><strong>Observable组合</strong></p><ul><li>任意⼀个 Observable 产⽣了元素，就发出这个元素：merge</li><li>当上⼀个 Observable 才能开始发出元素：concat</li><li>组合多个 Observables 的元素<ul><li>当每⼀个 Observable 都发出⼀个新的元素：zip</li><li>当任意⼀个 Observable 发出⼀个新的元素：combineLatest</li></ul></li></ul><p><strong>Observable转换</strong></p><ul><li>对每个元素直接转换：map</li><li>转换到另⼀个 Observable ：flatMap<ul><li>只接收最新的元素转换的 Observable 所产⽣的元素：flatMapLatest</li><li>每⼀个元素转换的 Observable 按顺序产⽣元素：concatMap</li></ul></li><li>基于所有遍历过的元素：scan</li></ul><p><strong>基于时间序</strong></p><ul><li>拖延⼀段时间后再发出：delay</li></ul><p><strong>想要将产⽣的事件封装成元素发送出来</strong></p><ul><li>将他们封装成 Event<element>：materialize</element></li><li>然后解封出来：dematerialize</li></ul><p><strong>基于数量的操作</strong></p><ul><li><p>忽略掉所有的 next 事件，只接收 completed 和 error 事件：ignoreElements</p></li><li><p>创建⼀个新的 Observable 在原有的序列前⾯加⼊⼀些元素：startWith</p></li><li><p>我想从 Observable 中收集元素，缓存这些元素之后在发出：buffer</p></li><li><p>我想将 Observable 拆分成多个 Observables ：window</p><ul><li>基于元素的共同特征：groupBy</li></ul></li><li><p>我想只接收 Observable 中特定的元素</p><ul><li>发出唯⼀的元素：single</li></ul></li><li><p>我想重新从 Observable 中发出某些元素</p><ul><li>通过判定条件过滤出⼀些元素：filter</li><li>仅发出头⼏个元素：take</li><li>仅发出尾部的⼏个元素：takeLast</li><li>仅仅发出第 n 个元素：elementAt</li></ul></li><li><p>跳过头⼏个元素</p><ul><li>跳过头 n 个元素：skip</li><li>跳过头⼏个满⾜判定的元素：skipWhile，skipWhileWithIndex</li><li>跳过某段时间内产⽣的头⼏个元素：skip</li><li>跳过头⼏个元素直到另⼀个 Observable 发出⼀个元素：skipUntil</li></ul></li><li><p>只取头⼏个元素</p><ul><li>只取头⼏个满⾜判定的元素：takeWhile，takeWhileWithIndex</li><li>只取某段时间内产⽣的头⼏个元素：take</li><li>只取头⼏个元素直到另⼀个 Observable 发出⼀个元素：takeUntil</li></ul></li><li><p>周期性的对 Observable 抽样：sample</p></li><li><p>发出那些元素，这些元素产⽣后的特定的时间内，没有新的元素产⽣：debounce</p></li><li><p>直到元素的值发⽣变化，才发出新的元素：distinctUntilChanged</p><ul><li>并提供元素是否相等的判定函数：distinctUntilChanged</li></ul></li><li><p>在开始发出元素时，延时后进⾏订阅：delaySubscription</p></li><li><p>我想要从⼀些 Observables 中，只取第⼀个产⽣元素的 Observable ：amb</p></li><li><p>我想评估 Observable 的全部元素</p><ul><li>并且对每个元素应⽤聚合⽅法，待所有元素都应⽤聚合⽅法后，发出结果：reduce</li><li>并且对每个元素应⽤聚合⽅法，每次应⽤聚合⽅法后，发出结果：scan</li></ul></li><li><p>我想在某个 Scheduler 应⽤操作符：subscribeOn</p><ul><li>在某个 Scheduler 监听：observeOn</li></ul></li><li><p>我想要 Observable 发⽣某个事件时, 采取某个⾏动：do</p></li><li><p>我想要 Observable 发出⼀个 error 事件：error</p></li><li><p>如果规定时间内没有产⽣元素：timeout</p></li><li><p>我想要 Observable 发⽣错误时，优雅的恢复</p><ul><li>如果规定时间内没有产⽣元素，就切换到备选 Observable ：timeout</li><li>如果产⽣错误，将错误替换成某个元素 ：catchErrorJustReturn</li><li>如果产⽣错误，就切换到备选 Observable ：catchError</li><li>如果产⽣错误，就重试 ：retry</li></ul></li><li><p>我创建⼀个 Disposable 资源，使它与 Observable 具有相同的寿命：using</p></li><li><p>我创建⼀个 Observable ，直到我通知它可以产⽣元素后，才能产⽣元素：publish</p><ul><li>并且，就算是在产⽣元素后订阅，也要发出全部元素：replay</li><li>并且，⼀旦所有观察者取消观察，他就被释放掉：refCount</li><li>通知它可以产⽣元素了：connect</li></ul></li></ul><h3 id="动态信号"><a class="markdownIt-Anchor" href="#动态信号"></a> 动态信号</h3><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">RACSignal *s = [RACSignal createSignal:^RACDisposable *(<span class="keyword">id</span>&lt;RACSubscriber&gt; subscriber) &#123;</span><br><span class="line">  [subscriber sendNext:@<span class="number">0</span>];</span><br><span class="line">  [subscriber sendCompleted];</span><br><span class="line">  <span class="keyword">return</span> [RACDisposable disposableWithBlock:^&#123;</span><br><span class="line"></span><br><span class="line">  &#125;];</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure><h3 id="cocoa-桥接"><a class="markdownIt-Anchor" href="#cocoa-桥接"></a> Cocoa 桥接</h3><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>) bridge &#123;</span><br><span class="line">  RACSignal *sO = RACObserver(<span class="keyword">self</span>, button);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">self</span>.sigSetFrame = [<span class="keyword">self</span>.button rac_signalForSelector:<span class="keyword">@selector</span>(setFrame:)];</span><br><span class="line">  [_sigSetFrame</span><br><span class="line">   subscribeNext:^(<span class="keyword">id</span> x) &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"setFrame:%@"</span>, x);</span><br><span class="line">  &#125;];</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">self</span>.sigClick = [<span class="keyword">self</span>.button rac_signalForControlEvents:<span class="built_in">UIControlEventTouchUpInside</span>];</span><br><span class="line">  [_sigClick</span><br><span class="line">   subscribeNext:^(<span class="keyword">id</span> x) &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"event: %@"</span>, x);</span><br><span class="line">  &#125;];</span><br><span class="line"></span><br><span class="line">  [[<span class="keyword">self</span> rac_liftSelector:<span class="keyword">@selector</span>(lift:) withSignals:_sigClick, <span class="literal">nil</span>]</span><br><span class="line">   subscribeNext:^(<span class="keyword">id</span> x) &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, x);</span><br><span class="line">  &#125;];</span><br><span class="line">  </span><br><span class="line">  [[<span class="keyword">self</span> rac_liftSelector:<span class="keyword">@selector</span>(lift:) withSignalsFromArray:@[[_sigClick map:^<span class="keyword">id</span>(<span class="keyword">id</span> value) &#123;</span><br><span class="line">    <span class="keyword">return</span> @[@<span class="number">3</span>];</span><br><span class="line">  &#125;]]]</span><br><span class="line">   subscribeNext:^(<span class="keyword">id</span> x) &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, x);</span><br><span class="line">  &#125;];</span><br><span class="line">  </span><br><span class="line">  [<span class="keyword">self</span> rac_liftSelector:<span class="keyword">@selector</span>(lift:) withSignalOfArguments:[_sigClick mapReplace:RACTuplePack(@<span class="number">1</span>)]];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">int</span>) lift:(<span class="keyword">id</span>)value&#123;</span><br><span class="line">  printf(<span class="string">"lift: %s"</span>, __func__);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="信号变化内部是产生一个新信号的"><a class="markdownIt-Anchor" href="#信号变化内部是产生一个新信号的"></a> 信号变化(内部是产生一个新信号的)</h3><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[_sigClick map:^<span class="keyword">id</span>(<span class="keyword">id</span> value) &#123;</span><br><span class="line">  <span class="keyword">return</span> @[@<span class="number">3</span>];</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure><h3 id="序列转换"><a class="markdownIt-Anchor" href="#序列转换"></a> 序列转换</h3><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">self</span>.sigSequence = [[RACSequence <span class="keyword">return</span>:@<span class="number">3</span>] concat:[RACSequence <span class="keyword">return</span>:@<span class="number">4</span>]].signal;</span><br></pre></td></tr></table></figure><h2 id="订阅绑定信号的方式"><a class="markdownIt-Anchor" href="#订阅绑定信号的方式"></a> 订阅（绑定）信号的方式</h2><h3 id="直接订阅方法"><a class="markdownIt-Anchor" href="#直接订阅方法"></a> 直接订阅方法</h3><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[<span class="keyword">self</span>.sigSample</span><br><span class="line"> subscribeNext:^(<span class="keyword">id</span> x) &#123;</span><br><span class="line">  <span class="built_in">NSLog</span>(<span class="string">@"sample: %@"</span>, x);</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure><h3 id="绑定"><a class="markdownIt-Anchor" href="#绑定"></a> 绑定</h3><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RAC(<span class="keyword">self</span>, a) = Signal;</span><br></pre></td></tr></table></figure><h3 id="cocoa-桥接-2"><a class="markdownIt-Anchor" href="#cocoa-桥接-2"></a> Cocoa 桥接</h3><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)signal &#123;</span><br><span class="line">  [[<span class="keyword">self</span> rac_liftSelector:<span class="keyword">@selector</span>(lift:) withSignals:_sigClick, <span class="literal">nil</span>]</span><br><span class="line">   subscribeNext:^(<span class="keyword">id</span> x) &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, x);</span><br><span class="line">  &#125;];</span><br><span class="line">  </span><br><span class="line">  [[<span class="keyword">self</span> rac_liftSelector:<span class="keyword">@selector</span>(lift:) withSignalsFromArray:@[[_sigClick map:^<span class="keyword">id</span>(<span class="keyword">id</span> value) &#123;</span><br><span class="line">    <span class="keyword">return</span> @[@<span class="number">3</span>];</span><br><span class="line">  &#125;]]]</span><br><span class="line">   subscribeNext:^(<span class="keyword">id</span> x) &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, x);</span><br><span class="line">  &#125;];</span><br><span class="line">  </span><br><span class="line">  [<span class="keyword">self</span> rac_liftSelector:<span class="keyword">@selector</span>(lift:) withSignalOfArguments:[_sigClick mapReplace:RACTuplePack(@<span class="number">1</span>)]];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">int</span>) lift:(<span class="keyword">id</span>)value&#123;</span><br><span class="line">  printf(<span class="string">"lift: %s"</span>, __func__);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="信号变化组合"><a class="markdownIt-Anchor" href="#信号变化组合"></a> 信号变化&amp;组合</h2><ol><li>单个信号的变化</li><li>多个信号的组合</li><li>高阶操作</li></ol><p><img src="/img/signal_transform.jpeg" alt="signal 变化"></p><h3 id="值操作"><a class="markdownIt-Anchor" href="#值操作"></a> 值操作</h3><p>问题：</p><ul><li>为什么会有这样的值操作方法？</li><li>自己如何扩展新的值方法</li></ul><hr><ul><li>transform 这些用的比较多<ol><li>map</li><li>MapReplace</li><li>ReduceEach tuple(a, b) -&gt; c</li></ol></li><li>值判断逻辑变换<ol><li>not</li><li>and</li><li>or</li></ol></li><li>用的比较少<ol><li>reduceApply 这个不太清楚为什么要这么设计，用combineLatest: reduceEach: 就可以做了，而且代码看起来更好。</li><li>materialize</li><li>dematerialize</li></ol></li></ul><h3 id="数量操作"><a class="markdownIt-Anchor" href="#数量操作"></a> 数量操作</h3><ol><li>repeat 一直会有值</li></ol><ul><li><p>条件过滤1</p><ol><li>ignore</li><li>ignoreValues</li><li>distinctUntilChanged</li></ol></li><li><p>条件过滤2</p><ol><li>takeUntilBlock:(BOOL (^)(id x))predicate</li><li>takeWhileBlock:(BOOL (^)(id x))predicate;</li><li>skipUntilBlock:(BOOL (^)(id x))predicate;</li><li>skipWhileBlock:(BOOL (^)(id x))predicate;</li></ol></li><li><p>数量判断，如果有值就发送</p><ol><li>any;</li><li>any:(BOOL (^)(id object))predicateBlock;</li><li>all:(BOOL (^)(id object))predicateBlock;</li></ol></li><li><p>重试</p><ol><li>retry</li><li>retry: Count</li><li>collect <code>汇聚</code> 信号必须有返回值</li></ol></li></ul><p>副作用：<br>– 对于信号值变化以外的一些操作</p><ul><li>doNext</li><li>doCompleted</li><li>doError</li></ul><p><code>折叠函数</code></p><p>不听对一个value 操作，使用折叠函数解决这个问题</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[sig10 aggregateWithStart:@<span class="number">0</span> reduce:^<span class="keyword">id</span>(<span class="keyword">id</span> running, <span class="keyword">id</span> next) &#123;</span><br><span class="line">  <span class="keyword">return</span> @([running intValue] + [next intValue]);</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure><ol><li>(RACSignal *)aggregateWithStart:(id)start reduce:(id (^)(id running, id next))reduceBlock;</li><li>(RACSignal *)aggregateWithStart:(id)start reduceWithIndex:(id (^)(id running, id next, NSUInteger index))reduceBlock;</li><li>(RACSignal *)aggregateWithStartFactory:(id (^)(void))startFactory reduce:(id (^)(id running, id next))reduceBlock;</li><li>(instancetype)scanWithStart:(id)startingValue reduce:(id (^)(id running, id next))reduceBlock;</li><li>(instancetype)scanWithStart:(id)startingValue reduceWithIndex:(id (^)(id running, id next, NSUInteger index))reduceBlock;</li></ol><h3 id="时间操作"><a class="markdownIt-Anchor" href="#时间操作"></a> 时间操作</h3><ol><li>+ (RACSignal *)interval:(NSTimeInterval)interval onScheduler:(RACScheduler *)scheduler;</li><li>+ (RACSignal *)interval:(NSTimeInterval)interval onScheduler:(RACScheduler *)scheduler withLeeway:(NSTimeInterval)leeway;</li><li>delay</li><li>throttle 阀门，在固定时间内没有新值发送的时候，会发送最后的值</li></ol><h3 id="多个信号组合"><a class="markdownIt-Anchor" href="#多个信号组合"></a> 多个信号组合</h3><p>问题：</p><ol><li>受哪个信号终止而终止？</li><li>错误传递？</li><li>各个信号何时开始开始订阅？</li><li>在哪个线程发出？</li></ol><ul><li>concat<ul><li>第一个结束后，订阅第二个</li><li>第一个error 后，就直接 error</li></ul></li><li>merge</li><li>zip</li><li>combineLatest</li><li>sample</li><li>takeUntil</li><li>takeUntilReplacement, 当 B 来了直接替换 A，开始订阅 B</li></ul><h3 id="信号的高阶操作升阶降阶"><a class="markdownIt-Anchor" href="#信号的高阶操作升阶降阶"></a> 信号的高阶操作（升阶降阶）</h3><ol><li>升阶 S(v) -&gt; S(s(v))</li><li>降阶 S(s(v)) -&gt; S(v)</li></ol><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">RACSignal *signal = @[@<span class="number">1</span>, @<span class="number">2</span>, @<span class="number">3</span>, @<span class="number">4</span>].rac_sequence.signal;</span><br><span class="line">RACSignal *signalB = [[signal map:^<span class="keyword">id</span>(<span class="keyword">id</span> value) &#123;</span><br><span class="line">  <span class="keyword">return</span> [[RACSignal <span class="keyword">return</span>:value] delay:<span class="number">1</span>];</span><br><span class="line">&#125;] concat];</span><br></pre></td></tr></table></figure><ul><li><p>降阶操作</p></li><li><p>switchToLatests</p></li></ul><p><img src="/img/switchToLatests.jpeg" alt="switchToLatests"></p><ul><li><p>if/then/else<br><img src="/img/if-then-else.jpeg" alt="if/then/else"></p></li><li><p>switch/cases/default</p></li><li><p>flatten</p></li></ul><p><img src="/img/flatten.jpeg" alt="flatten"></p><p>flatten 类似 merge 只不过一个是接收的 value是 signal，另一个接收的就是 value</p><ul><li>flatten:count 按个数展开信号，当信号个数 &gt; count 以后等待，如果有 sig completed，那么把等待中的sig 放入展开数组里面</li></ul><p><img src="/img/flatten-count.jpeg" alt="flatten-count"></p><p>flatten:1 == concat</p><ul><li>flattenMap</li></ul><p>满足 monad 的部分定义，绝大部分函数都可以使用 flattenMap 实现</p><ul><li>bind</li></ul><p>大部分函数都可以使用 bind 实现</p><h2 id="冷信号热信号"><a class="markdownIt-Anchor" href="#冷信号热信号"></a> 冷信号&amp;热信号</h2><h2 id="一些习题"><a class="markdownIt-Anchor" href="#一些习题"></a> 一些习题</h2><ol><li>如何获得无限递增的信号</li></ol><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">RACSignal *increment(<span class="keyword">int</span> inc) &#123;</span><br><span class="line">  RACSignal *repeat = [[RACSignal <span class="keyword">return</span>:@(inc)] repeat];</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> [[repeat scanWithStart:<span class="number">0</span> reduce:^<span class="keyword">id</span>(<span class="keyword">id</span> running, <span class="keyword">id</span> next) &#123;</span><br><span class="line">    <span class="keyword">return</span> @([running intValue] + [next intValue]);</span><br><span class="line">  &#125;]</span><br><span class="line">  delay:<span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>fibonacci</li></ol><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">RACSignal *fibonacci() &#123;</span><br><span class="line">  RACSignal *repeat = [[RACSignal <span class="keyword">return</span>:<span class="literal">nil</span>] repeat];</span><br><span class="line">  <span class="keyword">return</span> [repeat scanWithStart:RACTuplePack(@<span class="number">1</span>, @<span class="number">1</span>) reduce:^<span class="keyword">id</span>(RACTuple *running, <span class="keyword">id</span> _) &#123;</span><br><span class="line">    <span class="keyword">int</span> next = [running.first intValue] + [running.second intValue];</span><br><span class="line">    <span class="keyword">return</span> RACTuplePack(running.second, @(next));</span><br><span class="line">  &#125;];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> 第三方框架 </category>
          
          <category> RxSwift </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> RxSwift </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RxSwift 4.Action</title>
      <link href="/2018/02/03/RxSwfit+RAC/RxSwift-Action/"/>
      <url>/2018/02/03/RxSwfit+RAC/RxSwift-Action/</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Jun 02 2020 17:35:52 GMT+0800 (CST) --><a id="more"></a><p><a href="https://github.com/RxSwiftCommunity/Action" target="_blank" rel="noopener">原文：Action</a></p><p>该库与RxSwift一起使用，以在可观察对象之上提供抽象：Action。</p><p><code>Action</code> 是说“嘿，稍后我需要你订阅此内容”的一种方式。实际上，它涉及的更多。</p><p><code>Action</code> 初始化时需要 <code>workFactory:</code> 一个需要一些输入并产生可观察值的闭包。调用 <code>execute()</code> 时，它将参数传递给此闭包并订阅工作。</p><ul><li>只有在“enabled”时才可以执行（如果未指定，则为true）</li><li>一次只执行一件事。</li><li>汇总各个执行中的 next/error 事件</li></ul><p>Action 和 UIButton 配合使用。它管理按钮的 enable 状态，确保在工作完成时禁用按钮</p><h2 id="如何使用"><a class="markdownIt-Anchor" href="#如何使用"></a> 如何使用</h2><ul><li>必须传递一个 <code>workFactory</code> ，该工厂接受输入并返回一个 <code>Observable</code></li><li>每当你调用 <code>execute(input)</code>，你传入的 input 传入到 <code>workFactory</code> 执行</li><li>该 <code>Action</code> 订阅 <code>Observable</code> 对象，然后在 <code>Action</code> 的 <code>elements</code> 属性上发 <code>Observable</code> 的 Next事件</li><li>如果 <code>Observable</code> 发出 event 事件，这个 error 会以 next 事件在 <code>Action</code> 的 <code>errors</code> 属性中以 next 事件发出</li></ul><p>Actions 每次只能执行一次，如果你尝试执行一个正在 executing 的 action，会得到一个 error。<code>Action</code> 的 <code>executing</code> 属性会发送 next 事件，关联值是 ture or false</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">action: <span class="type">Action</span>&lt;<span class="type">String</span>, <span class="type">Bool</span>&gt; = <span class="type">Action</span>(workFactory: &#123; input <span class="keyword">in</span></span><br><span class="line">    <span class="keyword">return</span> networkLibrary.checkEmailExists(input)</span><br><span class="line">&#125;)</span><br><span class="line">...</span><br><span class="line">action.execute(<span class="string">"ash@ashfurrow.com"</span>)</span><br></pre></td></tr></table></figure><p>注意：</p><ul><li>第一个泛型参数是 input 的类型。</li><li>第二个泛型是 workFactory 闭包创建的 Observable 发送 next 事件的数据类型（你可以把它看做 Action 的Output）</li></ul><p>还可以为 Action 初始化程序指定 enabledIf 参数。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> validEmailAddress = emailTextField.rx.text.<span class="built_in">map</span>(isValidEmail)</span><br><span class="line">action: <span class="type">Action</span>&lt;<span class="type">String</span>, <span class="type">Bool</span>&gt; = <span class="type">Action</span>(enabledIf: validEmailAddress, workFactory: &#123; input <span class="keyword">in</span></span><br><span class="line">    <span class="keyword">return</span> networkLibrary.checkEmailExists(input)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>此时 <code>execute()</code> 只有当 email address 合法才会执行.</p><p>注意， <code>enabledIf</code> 与 <code>enabled</code> 属性不同。</p><p>UIButton 扩展：它接受CocoaAction，它的类型是 <code>Action &lt;Void，Void&gt;</code>。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">button.rx.action = action</span><br></pre></td></tr></table></figure><p>当按下按钮时，action 执行操作。button 的 enable 属性和 action 的 <code>enabled</code> 属性绑定。这意味着你可以将表单验证逻辑作为信号输入到 action 中，并为你处理按钮的启用状态。同样，用户不能在动作完成执行之前再次按下按钮，因为它一次只能处理一件事。看看这个实际的CocoaAction代码示例。</p><p>如果你想使用 <code>Action</code> 进行复杂的操作，例如使用下载进度报告下载文件（例如，更新UI中的进度条），那么可以使用 <code>Action&lt;Void，Int&gt;</code> 代替CocoaAction。开箱即用的CocoaAction无法发出进度值，你自己的 <code>Action&lt;Void，Int&gt;</code> 将做到这一点。有关详细信息，请参阅<a href="http://www.sm-cloud.com/rxswift-action/" target="_blank" rel="noopener">本文</a>。</p><p>如果你的方案涉及许多需要触发同一操作以提供不同输入的按钮，则可以在每个UIButton上使用bindTo，并使用闭包返回正确的输入。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> button1 = <span class="type">UIButton</span>()</span><br><span class="line"><span class="keyword">let</span> button2 = <span class="type">UIButton</span>()</span><br><span class="line"><span class="keyword">let</span> action = <span class="type">Action</span>&lt;<span class="type">String</span>, <span class="type">String</span>&gt; &#123; input <span class="keyword">in</span></span><br><span class="line">    <span class="built_in">print</span>(input)</span><br><span class="line">    <span class="keyword">return</span> .just(input)</span><br><span class="line">&#125;</span><br><span class="line">button1.rx.bindTo(action) &#123; <span class="number">_</span> <span class="keyword">in</span> <span class="keyword">return</span> <span class="string">"Hello"</span>&#125;</span><br><span class="line">button2.rx.bindTo(action) &#123; <span class="number">_</span> <span class="keyword">in</span> <span class="keyword">return</span> <span class="string">"Goodbye"</span>&#125;</span><br></pre></td></tr></table></figure><p>button1和button2共享相同的Action，但是它们使用不同的输入（相应的输出Hello和Goodbye）</p><p>更复杂的用例可以是与UIViewController相关的单个操作，该操作管理你的导航，错误处理和加载状态。通过这种方法，可以根据需要拥有任意数量的 UIButton（或UIBarButtonItems），在一个公共位置一次性订阅 <code>executing</code> ，<code>errors</code> 和 <code>elements</code>。</p><p>UIAlertController 还使用了一个非常酷的 <code>UIAlertAction</code> 扩展。一招：由于该类的限制，你无法使用常规的初始化程序实例化它。相反，请调用此类方法：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> action = <span class="type">UIAlertAction</span>.<span class="type">Action</span>(<span class="string">"Hi"</span>, style: .<span class="keyword">default</span>)</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> 第三方框架 </category>
          
          <category> RxSwift </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 翻译 </tag>
            
            <tag> RxSwift </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RxSwift 3.Subject(Observable &amp; Observer)</title>
      <link href="/2018/02/02/RxSwfit+RAC/RxSwift-3-Subject(Observable&amp;Observer)/"/>
      <url>/2018/02/02/RxSwfit+RAC/RxSwift-3-Subject(Observable&amp;Observer)/</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Jun 02 2020 17:35:52 GMT+0800 (CST) --><a id="more"></a><div align="center"><img src="/img/subject.jpeg" alt="subject" style="width:180px;height:150px"></div><p>首先在开发的时候思考，他是一个 Observable</p><h2 id="asyncsubject"><a class="markdownIt-Anchor" href="#asyncsubject"></a> AsyncSubject</h2><ol><li>特点：<ul><li>当 Observable Sequence 发送 complete 事件，<code>AsyncSubject</code> 才会发送最后一个 next 事件和 complete</li><li>当 Observable Sequence 发送 error 事件，<code>AsyncSubject</code> 只发送 error 事件，不会发送最后一个 next</li></ul></li></ol><details><summary>2. 演示</summary><pre><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> disposeBag = <span class="type">DisposeBag</span>() </span><br><span class="line"><span class="keyword">let</span> subject = <span class="type">AsyncSubject</span>&lt;<span class="type">String</span>&gt;()</span><br><span class="line">subject</span><br><span class="line">    .subscribe &#123; <span class="built_in">print</span>(<span class="string">"Subscription: 1 Event:"</span>, $<span class="number">0</span>) &#125; </span><br><span class="line">    .disposed(by: disposeBag)</span><br><span class="line">subject.onNext(<span class="string">"  "</span>)</span><br><span class="line">subject.onNext(<span class="string">"  "</span>)</span><br><span class="line">subject.onNext(<span class="string">"  "</span>)</span><br><span class="line">subject.onCompleted()</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Subscription: <span class="number">1</span> Event: next(ί )</span><br><span class="line">Subscription: <span class="number">1</span> Event: completed</span><br></pre></td></tr></table></figure></pre></details><h2 id="publishsubject"><a class="markdownIt-Anchor" href="#publishsubject"></a> PublishSubject</h2><ol><li>特点：<ul><li><code>PublishSubject</code> 发送订阅后产⽣的元素.</li><li><code>PublishSubject</code> 不发送订阅前产⽣的元素.</li></ul></li></ol><div align="left"><img src="/img/publicSubject.jpeg" alt="publicSubject" style="width:300px;height:200px"></div><details><summary>2. 演示</summary><pre><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> disposeBag = <span class="type">DisposeBag</span>()</span><br><span class="line"><span class="keyword">let</span> subject = <span class="type">PublishSubject</span>&lt;<span class="type">String</span>&gt;()</span><br><span class="line">subject</span><br><span class="line">    .subscribe &#123; <span class="built_in">print</span>(<span class="string">"Subscription: 1 Event:"</span>, $<span class="number">0</span>) &#125;</span><br><span class="line">    .disposed(by: disposeBag)</span><br><span class="line">subject.onNext(<span class="string">"  "</span>)</span><br><span class="line">subject.onNext(<span class="string">"  "</span>)</span><br><span class="line">subject</span><br><span class="line">    .subscribe &#123; <span class="built_in">print</span>(<span class="string">"Subscription: 2 Event:"</span>, $<span class="number">0</span>) &#125;</span><br><span class="line">    .disposed(by: disposeBag)</span><br><span class="line">subject.onNext(<span class="string">"A "</span>)</span><br><span class="line">subject.onNext(<span class="string">"B "</span>)</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Subscription: <span class="number">1</span> Event: next(  )</span><br><span class="line">Subscription: <span class="number">1</span> Event: next(  )</span><br><span class="line">Subscription: <span class="number">1</span> Event: next(A )</span><br><span class="line">Subscription: <span class="number">2</span> Event: next(A )</span><br><span class="line">Subscription: <span class="number">1</span> Event: next(B )</span><br><span class="line">Subscription: <span class="number">2</span> Event: next(B )</span><br></pre></td></tr></table></figure></pre></details><h2 id="replaysubject"><a class="markdownIt-Anchor" href="#replaysubject"></a> ReplaySubject</h2><ol><li>特点：<ul><li><code>ReplaySubject</code> 将对观察者发送全部的元素，⽆论观察者是何时进⾏订阅的。</li></ul></li></ol><div align="left"><img src="/img/replaySubject.jpeg" alt="replaySubject" style="width:300px;height:200px"></div><details><summary>2. 演示</summary><pre><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> disposeBag = <span class="type">DisposeBag</span>()</span><br><span class="line"><span class="keyword">let</span> subject = <span class="type">ReplaySubject</span>&lt;<span class="type">String</span>&gt;.create(bufferSize: <span class="number">1</span>)</span><br><span class="line">subject</span><br><span class="line">    .subscribe &#123; <span class="built_in">print</span>(<span class="string">"Subscription: 1 Event:"</span>, $<span class="number">0</span>) &#125;</span><br><span class="line">    .disposed(by: disposeBag)</span><br><span class="line">subject.onNext(<span class="string">"  "</span>)</span><br><span class="line">subject.onNext(<span class="string">"  "</span>)</span><br><span class="line">subject</span><br><span class="line">    .subscribe &#123; <span class="built_in">print</span>(<span class="string">"Subscription: 2 Event:"</span>, $<span class="number">0</span>) &#125;</span><br><span class="line">    .disposed(by: disposeBag)</span><br><span class="line">subject.onNext(<span class="string">"A "</span>)</span><br><span class="line">subject.onNext(<span class="string">"B "</span>)</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Subscription: <span class="number">1</span> Event: next(  ) </span><br><span class="line">Subscription: <span class="number">1</span> Event: next(  ) </span><br><span class="line">Subscription: <span class="number">2</span> Event: next(  )</span><br><span class="line">Subscription: <span class="number">1</span> Event: next(A )</span><br><span class="line">Subscription: <span class="number">2</span> Event: next(A )</span><br><span class="line">Subscription: <span class="number">1</span> Event: next(B )</span><br><span class="line">Subscription: <span class="number">2</span> Event: next(B )</span><br></pre></td></tr></table></figure></pre></details><h2 id="behaviorsubject"><a class="markdownIt-Anchor" href="#behaviorsubject"></a> BehaviorSubject</h2><ol><li>特点：<ol><li>具有默认值</li><li>当订阅 BehaviorSubject 时，它会将源 Observable 中最新的元素发送出来（如果不存在最新的元素，就发出默认元素）。然后将随后产⽣的元素发送出来。</li><li>如果 Observable 发 error 事件，那么BehaviorSubject不会再发送 next 事件，而只是传递来自源 Observable 的 error 事件。</li></ol></li></ol><p>normal</p><div align="left"><img src="/img/behaviorSubject1.jpeg" alt="behaviorSubject1" style="width:300px;height:200px"></div><p>error</p><div align="left"><img src="/img/behaviorSubject2.jpeg" alt="behaviorSubject2" style="width:300px;height:200px"></div><details><summary>2. 演示</summary><pre><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> disposeBag = <span class="type">DisposeBag</span>()</span><br><span class="line"><span class="keyword">let</span> subject = <span class="type">BehaviorSubject</span>(value: <span class="string">"  "</span>)</span><br><span class="line">subject</span><br><span class="line">    .subscribe &#123; <span class="built_in">print</span>(<span class="string">"Subscription: 1 Event:"</span>, $<span class="number">0</span>) &#125; </span><br><span class="line">    .disposed(by: disposeBag)</span><br><span class="line"></span><br><span class="line">subject.onNext(<span class="string">"  "</span>) </span><br><span class="line">subject.onNext(<span class="string">"  "</span>) </span><br><span class="line">subject </span><br><span class="line">    .subscribe &#123; <span class="built_in">print</span>(<span class="string">"Subscription: 2 Event:"</span>, $<span class="number">0</span>) &#125; </span><br><span class="line">    .disposed(by: disposeBag)</span><br><span class="line"></span><br><span class="line">subject.onNext(<span class="string">"A "</span>) </span><br><span class="line">subject.onNext(<span class="string">"B "</span>) </span><br><span class="line">subject </span><br><span class="line">    .subscribe &#123; <span class="built_in">print</span>(<span class="string">"Subscription: 3 Event:"</span>, $<span class="number">0</span>) &#125; </span><br><span class="line">    .disposed(by: disposeBag) </span><br><span class="line">subject.onNext(<span class="string">"  "</span>) </span><br><span class="line">subject.onNext(<span class="string">"  "</span>)</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Subscription: <span class="number">1</span> Event: next(  )</span><br><span class="line">Subscription: <span class="number">1</span> Event: next(  )</span><br><span class="line">Subscription: <span class="number">1</span> Event: next(  )</span><br><span class="line">Subscription: <span class="number">2</span> Event: next(  )</span><br><span class="line">Subscription: <span class="number">1</span> Event: next(A )</span><br><span class="line">Subscription: <span class="number">2</span> Event: next(A )</span><br><span class="line">Subscription: <span class="number">1</span> Event: next(B )</span><br><span class="line">Subscription: <span class="number">2</span> Event: next(B )</span><br><span class="line">Subscription: <span class="number">3</span> Event: next(B )</span><br><span class="line">Subscription: <span class="number">1</span> Event: next(  )</span><br><span class="line">Subscription: <span class="number">2</span> Event: next(  )</span><br><span class="line">Subscription: <span class="number">3</span> Event: next(  )</span><br><span class="line">Subscription: <span class="number">1</span> Event: next(  )</span><br><span class="line">Subscription: <span class="number">2</span> Event: next(  )</span><br><span class="line">Subscription: <span class="number">3</span> Event: next(  )</span><br></pre></td></tr></table></figure></pre></details><h2 id="variable弃用"><a class="markdownIt-Anchor" href="#variable弃用"></a> Variable（弃用）</h2><p>在 RxSwift 5.x 中，他被官⽅的正式的弃⽤了，并且在需要时，推荐使⽤ BehaviorRelay 或者 BehaviorSubject。</p><h2 id="relay"><a class="markdownIt-Anchor" href="#relay"></a> Relay</h2><div align="left"><img src="/img/RxRelay.jpeg" alt="RxRelay" style="width:450px;height:175px"></div><br><p>RxRelay提供两种中继：PublishRelay 和 BehaviorRelay。它们的行为与对应的 Subjects 完全相同，但有两个变化：</p><ul><li>Relays never complete.</li><li>Relays never emit errors.</li></ul><p>本质上，中继仅发出.next事件，并且永不终止，有了他，我们将 API 转化为 Rx 样式时，就不必担⼼⼀个意外的终⽌事件，导致后续事件转发失效。</p><h3 id="publishrelay"><a class="markdownIt-Anchor" href="#publishrelay"></a> PublishRelay</h3><p>PublishRelay 就是 PublishSubject 去掉终⽌事件 onError 和 onCompleted。</p><p>示例：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> disposeBag = <span class="type">DisposeBag</span>() </span><br><span class="line"><span class="keyword">let</span> relay = <span class="type">PublishRelay</span>&lt;<span class="type">String</span>&gt;() </span><br><span class="line">relay </span><br><span class="line">    .subscribe &#123; <span class="built_in">print</span>(<span class="string">"Event:"</span>, $<span class="number">0</span>) &#125; </span><br><span class="line">    .disposed(by: disposeBag)</span><br><span class="line">relay.accept(<span class="string">"  "</span>)</span><br><span class="line">relay.accept(<span class="string">"  "</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// output</span></span><br><span class="line"><span class="type">Event</span>: next( )</span><br><span class="line"><span class="type">Event</span>: next( )</span><br></pre></td></tr></table></figure><h3 id="behaviorrelay"><a class="markdownIt-Anchor" href="#behaviorrelay"></a> BehaviorRelay</h3><p>BehaviorRelay 就是 BehaviorSubject 去掉终⽌事件 onError 和 onCompleted。</p><p>示例：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> disposeBag = <span class="type">DisposeBag</span>() </span><br><span class="line"><span class="keyword">let</span> relay = <span class="type">BehaviorRelay</span>(value: <span class="string">"  "</span>)</span><br><span class="line">relay </span><br><span class="line">    .subscribe &#123; <span class="built_in">print</span>(<span class="string">"Event:"</span>, $<span class="number">0</span>) &#125; </span><br><span class="line">    .disposed(by: disposeBag)</span><br><span class="line">relay.accept(<span class="string">"  "</span>)</span><br><span class="line">relay.accept(<span class="string">"  "</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// output</span></span><br><span class="line"><span class="type">Event</span>: next( )</span><br><span class="line"><span class="type">Event</span>: next( )</span><br><span class="line"><span class="type">Event</span>: next( )</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> 第三方框架 </category>
          
          <category> RxSwift </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 翻译 </tag>
            
            <tag> RxSwift </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RxSwift 2.Observer</title>
      <link href="/2018/02/02/RxSwfit+RAC/RxSwift-Observer/"/>
      <url>/2018/02/02/RxSwfit+RAC/RxSwift-Observer/</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Jun 02 2020 17:35:52 GMT+0800 (CST) --><a id="more"></a><p>Observer: 监听 Observable Sequence，接受它传来的 events</p><div align="center"><img src="/img/observer.jpeg" alt="observer" style="width:200px;height:100px"></div><h2 id="如何创建-observer"><a class="markdownIt-Anchor" href="#如何创建-observer"></a> 如何创建 Observer</h2><h3 id="observable-的-subscribe-方法"><a class="markdownIt-Anchor" href="#observable-的-subscribe-方法"></a> Observable 的 subscribe 方法</h3><p>创建观察者最直接的⽅法就是在 Observable 的 subscribe ⽅法后⾯描述，事件发⽣时，需要如 何做出响应。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">tap.subscribe(onNext: &#123; [<span class="keyword">weak</span> <span class="keyword">self</span>] <span class="keyword">in</span></span><br><span class="line">        <span class="keyword">self</span>?.showAlert()</span><br><span class="line">    &#125;, onError: &#123; error <span class="keyword">in</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"发⽣错误： \(error.localizedDescription)"</span>)</span><br><span class="line">    &#125;, onCompleted: &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"任务完成"</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>subscribe 方法内部会产生 <code>AnonymousObserver</code> 对象（RxSwift 库私有的）</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">subscribe</span><span class="params">(<span class="number">_</span> on: @escaping <span class="params">(Event&lt;Element&gt;)</span></span></span> -&gt; <span class="type">Void</span>)</span><br><span class="line">    -&gt; <span class="type">Disposable</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> observer = <span class="type">AnonymousObserver</span> &#123; e <span class="keyword">in</span></span><br><span class="line">            on(e)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">self</span>.asObservable().subscribe(observer)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="anyobserver-任意观察者"><a class="markdownIt-Anchor" href="#anyobserver-任意观察者"></a> AnyObserver-- 任意观察者</h3><p>类注释：</p><blockquote><p>A type-erased <code>ObserverType</code>.<br>将操作转发到具有相同 <code>Element</code> 类型的任意基础观察者，隐藏基础观察者类型的细节。</p></blockquote><p>AnyObserver 可以⽤来描叙任意⼀种观察者。<br>eg: 打印⽹络请求结果：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">URLSession</span>.shared.rx.data(request: <span class="type">URLRequest</span>(url: url)) </span><br><span class="line">    .subscribe(onNext: &#123; data <span class="keyword">in</span> </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"Data Task Success with count: \(data.count)"</span>) </span><br><span class="line">    &#125;, onError: &#123; error <span class="keyword">in</span> </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"Data Task Error: \(error)"</span>) </span><br><span class="line">&#125;) </span><br><span class="line">.disposed(by: disposeBag)</span><br></pre></td></tr></table></figure><p>可以看作是：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> observer: <span class="type">AnyObserver</span>&lt;<span class="type">Data</span>&gt; = <span class="type">AnyObserver</span> &#123; (event) <span class="keyword">in</span> </span><br><span class="line">    <span class="keyword">switch</span> event &#123; </span><br><span class="line">        <span class="keyword">case</span> .next(<span class="keyword">let</span> data): </span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"Data Task Success with count: \(data.count)"</span>) </span><br><span class="line">        <span class="keyword">case</span> .error(<span class="keyword">let</span> error): </span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"Data Task Error: \(error)"</span>) </span><br><span class="line">        <span class="keyword">default</span>: </span><br><span class="line">            <span class="keyword">break</span> </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">URLSession</span>.shared.rx.data(request: <span class="type">URLRequest</span>(url: url)) </span><br><span class="line">    .subscribe(observer) </span><br><span class="line">    .disposed(by: disposeBag)</span><br></pre></td></tr></table></figure><p>⽤户名提示语是否隐藏：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">usernameValid </span><br><span class="line">    .bind(to: usernameValidOutlet.rx.isHidden) </span><br><span class="line">    .disposed(by: disposeBag)</span><br></pre></td></tr></table></figure><p>可以看作是：<span id="anchor"></span></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> observer: <span class="type">AnyObserver</span>&lt;<span class="type">Bool</span>&gt; = <span class="type">AnyObserver</span> &#123; [<span class="keyword">weak</span> <span class="keyword">self</span>] (event) <span class="keyword">in</span></span><br><span class="line">    <span class="keyword">switch</span> event &#123; </span><br><span class="line">        <span class="keyword">case</span> .next(<span class="keyword">let</span> isHidden): </span><br><span class="line">            <span class="keyword">self</span>?.usernameValidOutlet.isHidden = isHidden </span><br><span class="line">        <span class="keyword">default</span>: </span><br><span class="line">            <span class="keyword">break</span> </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">usernameValid </span><br><span class="line">    .bind(to: observer) </span><br><span class="line">    .disposed(by: disposeBag)</span><br></pre></td></tr></table></figure><h3 id="binderui-观察者"><a class="markdownIt-Anchor" href="#binderui-观察者"></a> Binder–UI 观察者</h3><p>类注释：</p><blockquote><p>强制执行接口绑定规则的观察者:</p><ul><li>无法绑定错误（在调试版本中，错误的绑定会导致致命错误，在发布版本中的错误会被记录）</li><li>确保在特定的调度程序上执行绑定</li></ul><p><code>Binder</code> 不会保留目标，并且在释放目标的情况下，元素也不会绑定。</p><p>默认情况下，它绑定主调度程序上的元素</p></blockquote><ol><li>Binder 主要有以下特征：</li></ol><ul><li>处理 next 事件</li><li>不处理错误事件</li><li>确保绑定都是在给定 Scheduler 上执⾏（默认 MainScheduler）</li></ul><p>⼀旦产⽣错误事件，在调试环境下将执⾏ fatalError，在发布环境下将打印错误信息。</p><ol start="2"><li>示例，对比上面的 <a href="#anchor">AnyObserver示例</a></li></ol><p>由于这个观察者是⼀个 UI 观察者，所以它在响应事件时，只会处理 next 事件 并且更新 UI 的操作需要在主线程上执⾏。 因此⼀个更好的⽅案就是使⽤ Binder：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> observer: <span class="type">Binder</span>&lt;<span class="type">Bool</span>&gt; = <span class="type">Binder</span>(usernameValidOutlet) &#123; (view, isHidden) <span class="keyword">in</span> </span><br><span class="line">    view.isHidden = isHidden </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">usernameValid </span><br><span class="line">    .bind(to: observer) </span><br><span class="line">    .disposed(by: disposeBag)</span><br></pre></td></tr></table></figure><ol start="3"><li>RxCocoa 中的 rx 扩展对于 Binder 的使用：</li></ol><p>你也可以⽤这种⽅式来创建⾃定义的 UI 观察者。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Reactive</span> <span class="title">where</span> <span class="title">Base</span>: <span class="title">UIView</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> isHidden: <span class="type">Binder</span>&lt;<span class="type">Bool</span>&gt; &#123; </span><br><span class="line">        <span class="keyword">return</span> <span class="type">Binder</span>(<span class="keyword">self</span>.base) &#123; view, hidden <span class="keyword">in</span> </span><br><span class="line">            view.isHidden = hidden </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Reactive</span> <span class="title">where</span> <span class="title">Base</span>: <span class="title">UILabel</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> text: <span class="type">Binder</span>&lt;<span class="type">String?</span>&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">Binder</span>(<span class="keyword">self</span>.base) &#123; label, text <span class="keyword">in</span></span><br><span class="line">            label.text = text </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>引用：</p><blockquote><p><a href="https://beeth0ven.github.io/RxSwift-Chinese-Documentation/content/rxswift_core/observer.html" target="_blank" rel="noopener">Observer - 观察者</a></p></blockquote><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> 第三方框架 </category>
          
          <category> RxSwift </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 翻译 </tag>
            
            <tag> RxSwift </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hot 和 Cold Observables</title>
      <link href="/2018/02/02/RxSwfit+RAC/Hot-%E5%92%8C-Cold-Observables/"/>
      <url>/2018/02/02/RxSwfit+RAC/Hot-%E5%92%8C-Cold-Observables/</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Jun 02 2020 17:35:52 GMT+0800 (CST) --><a id="more"></a><p><a href="https://github.com/ReactiveX/RxSwift/blob/master/Documentation/HotAndColdObservables.md" target="_blank" rel="noopener">原文: Hot and Cold Observables</a></p><p>恕我直言，我建议更多地将其视为序列的属性，而不是单独的类型，因为它们由完全适合它们的相同抽象表示，即可观察序列。</p><p>这是ReactiveX.io的定义:</p><blockquote><p>Observable何时开始发出其项目序列？这取决于 Observable.<br>“hot” Observable 对象可能会在创建后立即开始发射项目，因此以后订阅该 Observable 对象的任何观察者都可以开始观察中间位置的序列。<br>“cold”Observable对象要等到观察者订阅它，然后才能开始发射项目，因此可以保证这样的观察者从一开始就可以看到整个序列。</p></blockquote><table><thead><tr><th>Hot Observables</th><th>Cold observables</th></tr></thead><tbody><tr><td>… are sequences</td><td>… are sequences</td></tr><tr><td>Use resources (“produce heat”) no matter if there is any observer subscribed.</td><td>Don’t use resources (don’t produce heat) until observer subscribes.</td></tr><tr><td>Variables / properties / constants, tap coordinates, mouse coordinates, UI control values, current time</td><td>Async operations, HTTP Connections, TCP connections, streams</td></tr><tr><td>Usually contains ~ N elements</td><td>Usually contains ~ 1 element</td></tr><tr><td>Sequence elements are produced no matter if there is any observer subscribed.</td><td>Sequence elements are produced only if there is a subscribed observer.</td></tr><tr><td>Observable Sequence 被多个订阅它的 observers 共享</td><td>每个订阅的 observer 都会有一个 Observable Sequence</td></tr><tr><td>Usually stateful</td><td>Usually stateless</td></tr></tbody></table><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> 第三方框架 </category>
          
          <category> RxSwift </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> 翻译 </tag>
            
            <tag> RAC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RxSwift 1.特征</title>
      <link href="/2018/01/31/RxSwfit+RAC/RxSwift-%E7%89%B9%E5%BE%81/"/>
      <url>/2018/01/31/RxSwfit+RAC/RxSwift-%E7%89%B9%E5%BE%81/</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Jun 02 2020 17:35:52 GMT+0800 (CST) --><a id="more"></a><p>特性完全是可选的。你可以自由地在程序中的任何地方使用原始的Observable序列，因为所有核心RxSwift / RxCocoa API都支持它们。</p><div align="center"><img src="/img/Traits.jpeg" alt="Traits" style="width:300px;height:240px"></div><h2 id="特征是如何工作的"><a class="markdownIt-Anchor" href="#特征是如何工作的"></a> 特征是如何工作的</h2><p>特性只是 Observable sequence 的包装器结构。</p><p>你可以将它们视为可观察序列的一种构建器模式实现。构建特质后，调用.asObservable() 会将其转换回原始的可观察序列。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Single</span>&lt;<span class="title">Element</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> source: <span class="type">Observable</span>&lt;<span class="type">Element</span>&gt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Driver</span>&lt;<span class="title">Element</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> source: <span class="type">Observable</span>&lt;<span class="type">Element</span>&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="可观察序列"><a class="markdownIt-Anchor" href="#可观察序列"></a> 可观察序列</h2><p>Observable Sequence: 它是信号源，产生事件，RxSwift 重视 <code>Observable&lt;T&gt;</code> 类。</p><p>下面介绍的几个类型都是在 <code>Observable&lt;T&gt;</code> 类的基础上定制化出来的特征序列。</p><p><code>Observable&lt;T&gt;</code> 可发送出来的事件类型</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">Event</span>&lt;<span class="title">Element</span>&gt; </span>&#123; </span><br><span class="line">    <span class="keyword">case</span> next(<span class="type">Element</span>) </span><br><span class="line">    <span class="keyword">case</span> error(<span class="type">Swift</span>.<span class="type">Error</span>) </span><br><span class="line">    <span class="keyword">case</span> completed </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="rxswift-特征-singlecompletablemaybe"><a class="markdownIt-Anchor" href="#rxswift-特征-singlecompletablemaybe"></a> RxSwift 特征 Single/Completable/Maybe</h3><h4 id="single"><a class="markdownIt-Anchor" href="#single"></a> Single</h4><ol><li>Single 只能发送两个事件</li></ol><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">SingleEvent</span>&lt;<span class="title">Element</span>&gt; </span>&#123;</span><br><span class="line">  <span class="comment">/// One and only sequence element is produced. (underlying observable sequence emits: `.next(Element)`, `.completed`)</span></span><br><span class="line">  <span class="keyword">case</span> success(<span class="type">Element</span>)</span><br><span class="line">  <span class="comment">/// Sequence terminated with an error. (underlying observable sequence emits: `.error(Error)`)</span></span><br><span class="line">  <span class="keyword">case</span> error(<span class="type">Swift</span>.<span class="type">Error</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>在 Single 的初始化中可以看到做了 SingleEvent -&gt; Event 的处理</li></ol><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">create</span><span class="params">(subscribe: @escaping <span class="params">(@escaping SingleObserver)</span></span></span> -&gt; <span class="type">Disposable</span>) -&gt; <span class="type">Single</span>&lt;<span class="type">Element</span>&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> source = <span class="type">Observable</span>&lt;<span class="type">Element</span>&gt;.create &#123; observer <span class="keyword">in</span></span><br><span class="line">    <span class="keyword">return</span> subscribe &#123; event <span class="keyword">in</span></span><br><span class="line">      <span class="keyword">switch</span> event &#123;</span><br><span class="line">        <span class="keyword">case</span> .success(<span class="keyword">let</span> element):</span><br><span class="line">          observer.on(.next(element))</span><br><span class="line">          observer.on(.completed)</span><br><span class="line">        <span class="keyword">case</span> .error(<span class="keyword">let</span> error):</span><br><span class="line">          observer.on(.error(error))</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="type">PrimitiveSequence</span>(raw: source)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>在 <code>.success</code> 事件中，<code>Single</code> 发送了一个 .next 后紧跟着又发送了 .completed 事件，所以:</li></ol><ul><li>success - 产⽣⼀个单独的元素</li><li>error - 产⽣⼀个错误</li><li>不会共享附加作用</li></ul><ol start="4"><li><code>Single</code> 实际场景：</li></ol><p><code>Single</code> 的例⼦就是执⾏ HTTP 请求，然后返回⼀个应答或错误。不过你也可以⽤ Single 来描述 任何只有⼀个元素的序列。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getRepo</span><span class="params">(<span class="number">_</span> repo: String)</span></span> -&gt; <span class="type">Single</span>&lt;[<span class="type">String</span>: <span class="type">Any</span>]&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="type">Single</span>&lt;[<span class="type">String</span>: <span class="type">Any</span>]&gt;.create &#123; single <span class="keyword">in</span></span><br><span class="line">        <span class="keyword">let</span> task = <span class="type">URLSession</span>.shared.dataTask(with: <span class="type">URL</span>(string: <span class="string">"https://api.github.com/repos/\(repo)"</span>)!) &#123; data, <span class="number">_</span>, error <span class="keyword">in</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">let</span> error = error &#123;</span><br><span class="line">                single(.error(error))</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">guard</span> <span class="keyword">let</span> data = data,</span><br><span class="line">                  <span class="keyword">let</span> json = <span class="keyword">try</span>? <span class="type">JSONSerialization</span>.jsonObject(with: data, options: .mutableLeaves),</span><br><span class="line">                  <span class="keyword">let</span> result = json <span class="keyword">as</span>? [<span class="type">String</span>: <span class="type">Any</span>] <span class="keyword">else</span> &#123;</span><br><span class="line">                single(.error(<span class="type">DataError</span>.cantParseJSON))</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            &#125;</span><br><span class="line">            single(.success(result))</span><br><span class="line">        &#125;</span><br><span class="line">        task.resume() </span><br><span class="line">        <span class="keyword">return</span> <span class="type">Disposables</span>.create &#123; task.cancel() &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>订阅：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">getRepo(<span class="string">"ReactiveX/RxSwift"</span>)</span><br><span class="line">    .subscribe &#123; event <span class="keyword">in</span></span><br><span class="line">        <span class="keyword">switch</span> event &#123;</span><br><span class="line">            <span class="keyword">case</span> .success(<span class="keyword">let</span> json):</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">"JSON: "</span>, json)</span><br><span class="line">            <span class="keyword">case</span> .error(<span class="keyword">let</span> error):</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">"Error: "</span>, error)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    .disposed(by: disposeBag)</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">getRepo(<span class="string">"ReactiveX/RxSwift"</span>)</span><br><span class="line">    .subscribe(onSuccess: &#123; json <span class="keyword">in</span></span><br><span class="line">                   <span class="built_in">print</span>(<span class="string">"JSON: "</span>, json)</span><br><span class="line">               &#125;,</span><br><span class="line">               onError: &#123; error <span class="keyword">in</span></span><br><span class="line">                   <span class="built_in">print</span>(<span class="string">"Error: "</span>, error)</span><br><span class="line">               &#125;)</span><br><span class="line">    .disposed(by: disposeBag)</span><br></pre></td></tr></table></figure><ol start="4"><li>可以对 Observable 调⽤ .asSingle() ⽅法，将它转换为 Single。</li></ol><h4 id="completable"><a class="markdownIt-Anchor" href="#completable"></a> Completable</h4><ol><li>Completable 也只能发送两个事件，他没有 .next 事件，所以他们有接受数据值相关的事件！</li></ol><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">CompletableEvent</span> </span>&#123;</span><br><span class="line">    <span class="comment">/// Sequence terminated with an error. (underlying observable sequence emits: `.error(Error)`)</span></span><br><span class="line">    <span class="keyword">case</span> error(<span class="type">Swift</span>.<span class="type">Error</span>)</span><br><span class="line">    <span class="comment">/// Sequence completed successfully.</span></span><br><span class="line">    <span class="keyword">case</span> completed</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>Completable 创建方法同 Single，也是做了 CompletableEvent -&gt; Event 的处理</li></ol><ul><li>没有 next 事件，不会发出元素</li><li>只发送 completed 或者 error</li><li>不会共享附加作⽤</li></ul><ol start="3"><li><code>Completable</code> 实际场景：</li></ol><p><code>Completable</code> 适⽤于那种你只关⼼任务是否完成，⽽不需要在意任务返回值的情况。它和 Observable<void>有点相似。</void></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">cacheLocally</span><span class="params">()</span></span> -&gt; <span class="type">Completable</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="type">Completable</span>.create &#123; completable <span class="keyword">in</span></span><br><span class="line">       <span class="comment">// Store some data locally</span></span><br><span class="line">       ...</span><br><span class="line">       <span class="keyword">guard</span> success <span class="keyword">else</span> &#123;</span><br><span class="line">           completable(.error(<span class="type">CacheError</span>.failedCaching))</span><br><span class="line">           <span class="keyword">return</span> <span class="type">Disposables</span>.create &#123;&#125;</span><br><span class="line">       &#125;</span><br><span class="line">       completable(.completed)</span><br><span class="line">       <span class="keyword">return</span> <span class="type">Disposables</span>.create &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>订阅</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">cacheLocally()</span><br><span class="line">    .subscribe &#123; completable <span class="keyword">in</span></span><br><span class="line">        <span class="keyword">switch</span> completable &#123;</span><br><span class="line">            <span class="keyword">case</span> .completed:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">"Completed with no error"</span>)</span><br><span class="line">            <span class="keyword">case</span> .error(<span class="keyword">let</span> error):</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">"Completed with an error: \(error.localizedDescription)"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    .disposed(by: disposeBag)</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">cacheLocally()</span><br><span class="line">    .subscribe(onCompleted: &#123;</span><br><span class="line">                   <span class="built_in">print</span>(<span class="string">"Completed with no error"</span>)</span><br><span class="line">               &#125;,</span><br><span class="line">               onError: &#123; error <span class="keyword">in</span></span><br><span class="line">                   <span class="built_in">print</span>(<span class="string">"Completed with an error: \(error.localizedDescription)"</span>)</span><br><span class="line">               &#125;)</span><br><span class="line">    .disposed(by: disposeBag)</span><br></pre></td></tr></table></figure><h4 id="maybe"><a class="markdownIt-Anchor" href="#maybe"></a> Maybe</h4><ol><li>它介于 Single 和 Completable 之间，它要么只能发出⼀个元素，要么产⽣⼀个 completed 事件，要么产⽣⼀个 error 事件。</li></ol><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">MaybeEvent</span>&lt;<span class="title">Element</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">/// One and only sequence element is produced. (underlying observable sequence emits: `.next(Element)`, `.completed`)</span></span><br><span class="line">    <span class="keyword">case</span> success(<span class="type">Element</span>) </span><br><span class="line">    <span class="comment">/// Sequence terminated with an error. (underlying observable sequence emits: `.error(Error)`)</span></span><br><span class="line">    <span class="keyword">case</span> error(<span class="type">Swift</span>.<span class="type">Error</span>)</span><br><span class="line">    <span class="comment">/// Sequence completed successfully.</span></span><br><span class="line">    <span class="keyword">case</span> completed</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>Maybe 初始化方法，做了 MaybeEvent -&gt; Event 的处理</li></ol><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">create</span><span class="params">(subscribe: @escaping <span class="params">(@escaping MaybeObserver)</span></span></span> -&gt; <span class="type">Disposable</span>) -&gt; <span class="type">PrimitiveSequence</span>&lt;<span class="type">Trait</span>, <span class="type">Element</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> source = <span class="type">Observable</span>&lt;<span class="type">Element</span>&gt;.create &#123; observer <span class="keyword">in</span></span><br><span class="line">        <span class="keyword">return</span> subscribe &#123; event <span class="keyword">in</span></span><br><span class="line">            <span class="keyword">switch</span> event &#123;</span><br><span class="line">            <span class="keyword">case</span> .success(<span class="keyword">let</span> element):</span><br><span class="line">                observer.on(.next(element))</span><br><span class="line">                observer.on(.completed)</span><br><span class="line">            <span class="keyword">case</span> .error(<span class="keyword">let</span> error):</span><br><span class="line">                observer.on(.error(error))</span><br><span class="line">            <span class="keyword">case</span> .completed:</span><br><span class="line">                observer.on(.completed)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="type">PrimitiveSequence</span>(raw: source)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li><p>使用场景</p></li><li><p>Observable 调⽤ .asMaybe() ⽅法，将它转换为 Maybe。</p></li></ol><h3 id="rxcocoa-特征-driversignalcontrolevent"><a class="markdownIt-Anchor" href="#rxcocoa-特征-driversignalcontrolevent"></a> RxCocoa 特征 Driver/Signal/ControlEvent</h3><h4 id="driver"><a class="markdownIt-Anchor" href="#driver"></a> Driver</h4><ol><li>主要是为了简化 UI 层的代码。不过如果你遇到的序 列具有以下特征，你也可以使⽤它：</li></ol><ul><li>不会产⽣ error 事件</li><li>⼀定在 MainScheduler 监听（主线程监听）</li><li>共享附加作⽤</li></ul><ol start="2"><li>为什么要叫 Driver 呢？</li></ol><p>它的目的是让 model 数据层驱动 UI 变化。</p><p>E.g.</p><ul><li>Drive UI from CoreData model.</li><li>Drive UI using values from other UI elements (bindings). …</li></ul><p>初学者会使用这样的：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> results = query.rx.text</span><br><span class="line">    .throttle(.milliseconds(<span class="number">300</span>), scheduler: <span class="type">MainScheduler</span>.instance)</span><br><span class="line">    .flatMapLatest &#123; query <span class="keyword">in</span></span><br><span class="line">        fetchAutoCompleteItems(query)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">results</span><br><span class="line">    .<span class="built_in">map</span> &#123; <span class="string">"\($0.count)"</span> &#125;</span><br><span class="line">    .bind(to: resultCount.rx.text)</span><br><span class="line">    .disposed(by: disposeBag)</span><br><span class="line"></span><br><span class="line">results</span><br><span class="line">    .bind(to: resultsTableView.rx.items(cellIdentifier: <span class="string">"Cell"</span>)) &#123; (<span class="number">_</span>, result, cell) <span class="keyword">in</span></span><br><span class="line">        cell.textLabel?.text = <span class="string">"\(result)"</span></span><br><span class="line">    &#125;</span><br><span class="line">    .disposed(by: disposeBag)</span><br></pre></td></tr></table></figure><p>上面的代码会有什么问题？</p><ul><li>如果 fetchAutoCompleteItems observable sequence 发出 error (eg连接失败，解析错误), 这样的错误不会解绑订阅，UI再也不会响应新的查询</li><li>如果 fetchAutoCompleteItems 返回的结果在某个后台线程，后台线程返回的结果会绑定到 UI元素，导致确定性的 crashs</li><li>结果绑定到两个 UI 元素上，意味着每次用户查询都会发送 2次 HTTP 请求，这不是开发者的本意</li></ul><p>该代码的更合适版本如下所示：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> results = query.rx.text</span><br><span class="line">    .throttle(.milliseconds(<span class="number">300</span>), scheduler: <span class="type">MainScheduler</span>.instance)</span><br><span class="line">    .flatMapLatest &#123; query <span class="keyword">in</span></span><br><span class="line">        fetchAutoCompleteItems(query)</span><br><span class="line">            .observeOn(<span class="type">MainScheduler</span>.instance)</span><br><span class="line">            <span class="comment">// results are returned on MainScheduler</span></span><br><span class="line">            .catchErrorJustReturn([])</span><br><span class="line">            <span class="comment">// in the worst case, errors are handled</span></span><br><span class="line">    &#125;</span><br><span class="line">    .share(replay: <span class="number">1</span>)</span><br><span class="line">    <span class="comment">// HTTP requests are shared and results replayed</span></span><br><span class="line">    <span class="comment">// to all UI elements</span></span><br><span class="line"></span><br><span class="line">results</span><br><span class="line">    .<span class="built_in">map</span> &#123; <span class="string">"\($0.count)"</span> &#125;</span><br><span class="line">    .bind(to: resultCount.rx.text)</span><br><span class="line">    .disposed(by: disposeBag)</span><br><span class="line"></span><br><span class="line">results</span><br><span class="line">    .bind(to: resultsTableView.rx.items(cellIdentifier: <span class="string">"Cell"</span>)) &#123; (<span class="number">_</span>, result, cell) <span class="keyword">in</span></span><br><span class="line">        cell.textLabel?.text = <span class="string">"\(result)"</span></span><br><span class="line">    &#125;</span><br><span class="line">    .disposed(by: disposeBag)</span><br></pre></td></tr></table></figure><p>确保在大型系统中正确处理所有需求很具有挑战性，但是有一种更简单的方法，使用编译器和特征来证明满足这些要求。</p><p>以下代码：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> results = query.rx.text.asDriver()</span><br><span class="line"><span class="comment">// This converts a normal sequence into a `Driver` sequence.</span></span><br><span class="line">    .throttle(.milliseconds(<span class="number">300</span>), scheduler: <span class="type">MainScheduler</span>.instance)</span><br><span class="line">    .flatMapLatest &#123; query <span class="keyword">in</span></span><br><span class="line">        fetchAutoCompleteItems(query)</span><br><span class="line">            .asDriver(onErrorJustReturn: [])  </span><br><span class="line">            <span class="comment">// Builder just needs info about what to return in case of error.</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">results</span><br><span class="line">    .<span class="built_in">map</span> &#123; <span class="string">"\($0.count)"</span> &#125;</span><br><span class="line">    <span class="comment">//Driver 的订阅要使用 drive来做</span></span><br><span class="line">    .drive(resultCount.rx.text)</span><br><span class="line">    <span class="comment">// If there is a `drive` method available instead of `bind(to:)`,</span></span><br><span class="line">    .disposed(by: disposeBag)</span><br><span class="line">    <span class="comment">// that means that the compiler has proven that all properties</span></span><br><span class="line">    <span class="comment">// are satisfied.</span></span><br><span class="line">results</span><br><span class="line">    .drive(resultsTableView.rx.items(cellIdentifier: <span class="string">"Cell"</span>)) &#123; (<span class="number">_</span>, result, cell) <span class="keyword">in</span></span><br><span class="line">        cell.textLabel?.text = <span class="string">"\(result)"</span></span><br><span class="line">    &#125;</span><br><span class="line">    .disposed(by: disposeBag)</span><br></pre></td></tr></table></figure><p>所以上面代码发生了什么？</p><ol><li>asDriver方法将ControlProperty特性转换为Driver特性。</li></ol><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">query.rx.text.asDriver()</span><br></pre></td></tr></table></figure><p>注意，没有什么特别的事情要做。<br>Driver 具有 ControlProperty 特性的所有属性，以及其他一些属性。底层的 observable sequence 只是包装为Driver trait，仅此而已。</p><ol start="2"><li>observable sequence 转化为 Driver</li></ol><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.asDriver(onErrorJustReturn: [])</span><br></pre></td></tr></table></figure><p>P.S. 任何 observable sequence 转化为 Driver 都必须满足下面三点</p><ul><li>Can’t error out.</li><li>Observe on main scheduler.</li><li>Sharing side effects (share(replay: 1, scope: .whileConnected)).</li></ul><p>那么，如何确保满足这些呢？只需使用普通的Rx运算符即可。asDriver(onErrorJustReturn:[])等效于以下代码。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> safeSequence = xs</span><br><span class="line">  .observeOn(<span class="type">MainScheduler</span>.instance)        <span class="comment">// observe events on main scheduler</span></span><br><span class="line">  .catchErrorJustReturn(onErrorJustReturn)  <span class="comment">// can't error out</span></span><br><span class="line">  .share(replay: <span class="number">1</span>, scope: .whileConnected) <span class="comment">// side effects sharing</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="type">Driver</span>(raw: safeSequence)            <span class="comment">// wrap it up</span></span><br></pre></td></tr></table></figure><p>最后一步是使用 <code>drive</code> ，而不是使用 <code>bind(to:)</code>。</p><h4 id="signal"><a class="markdownIt-Anchor" href="#signal"></a> Signal</h4><ol><li>Signal 和 Driver 相似，唯⼀的区别是，Driver 会对新观察者回放（重新发送）上⼀个元素，⽽ Signal 不会对新观察者回放上⼀个元素。</li></ol><ul><li>不会产⽣ error 事件</li><li>在 MainScheduler 监听（主线程监听）</li><li>共享附加作⽤</li></ul><ol start="2"><li>Signal 和 Driver 的区别示例</li></ol><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> textField: <span class="type">UITextField</span> = ... </span><br><span class="line"><span class="keyword">let</span> nameLabel: <span class="type">UILabel</span> = ... </span><br><span class="line"><span class="keyword">let</span> nameSizeLabel: <span class="type">UILabel</span> = ... </span><br><span class="line"><span class="keyword">let</span> state: <span class="type">Driver</span>&lt;<span class="type">String?</span>&gt; = textField.rx.text.asDriver() </span><br><span class="line"><span class="keyword">let</span> observer = nameLabel.rx.text </span><br><span class="line">state.drive(observer) </span><br><span class="line"><span class="comment">// ... 假设以下代码是在⽤户输⼊姓名后运⾏ </span></span><br><span class="line"><span class="keyword">let</span> newObserver = nameSizeLabel.rx.text </span><br><span class="line">state.<span class="built_in">map</span> &#123; $<span class="number">0</span>?.<span class="built_in">count</span>.description &#125;.drive(newObserver)</span><br></pre></td></tr></table></figure><p>这个例⼦是将⽤户输⼊的姓名绑定到对应的标签上。当⽤户输⼊姓名后，我们创建了⼀个新的观察者，⽤于订阅姓名的字数。<br>那么问题来了，订阅时，展示字数的标签会⽴即更新吗？ 因为 Driver 会对新观察者回放上⼀个元素（当前姓名），所以这⾥是会更新的。在对他进⾏订阅时，标签的默认⽂本会被刷新。这是合理的。</p><p>那如果我们⽤ Driver 来描述点击事件呢，这样合理吗？</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> button: <span class="type">UIButton</span> = ... </span><br><span class="line"><span class="keyword">let</span> showAlert: (<span class="type">String</span>) -&gt; <span class="type">Void</span> = ... </span><br><span class="line"><span class="keyword">let</span> event: <span class="type">Driver</span>&lt;<span class="type">Void</span>&gt; = button.rx.tap.asDriver() </span><br><span class="line"><span class="keyword">let</span> observer: () -&gt; <span class="type">Void</span> = &#123; showAlert(<span class="string">"弹出提示框1"</span>) &#125; </span><br><span class="line">event.drive(onNext: observer) </span><br><span class="line"><span class="comment">// ... 假设以下代码是在⽤户点击 button 后运⾏ </span></span><br><span class="line"><span class="keyword">let</span> newObserver: () -&gt; <span class="type">Void</span> = &#123; showAlert(<span class="string">"弹出提示框2"</span>) &#125; </span><br><span class="line">event.drive(onNext: newObserver)</span><br></pre></td></tr></table></figure><p>当⽤户点击⼀个按钮后，创建⼀个新的观察者，来响应点击事件。此时会发⽣什么？<br>Driver 会把上⼀次的点击事件回放给新观察者。所以，这⾥的 newObserver 在订阅时，就会接受到上次的点击事件，然后弹出提示框。这似乎不太合理。</p><p>于是我们就引⼊了 Signal:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">let</span> event: <span class="type">Signal</span>&lt;<span class="type">Void</span>&gt; = button.rx.tap.asSignal()</span><br><span class="line"><span class="keyword">let</span> observer: () -&gt; <span class="type">Void</span> = &#123; showAlert(<span class="string">"弹出提示框1"</span>) &#125; </span><br><span class="line">event.emit(onNext: observer) </span><br><span class="line"><span class="comment">// ... 假设以下代码是在⽤户点击 button 后运⾏ </span></span><br><span class="line"><span class="keyword">let</span> newObserver: () -&gt; <span class="type">Void</span> = &#123; showAlert(<span class="string">"弹出提示框2"</span>) &#125; </span><br><span class="line">event.emit(onNext: newObserver)</span><br></pre></td></tr></table></figure><p>在同样的场景中，Signal 不会把上⼀次的点击事件回放给新观察者，⽽只会将订阅后产⽣的点击事件，发布给新观察者。这正是我们所需要的。</p><ol start="3"><li>结论: ⼀般情况下状态序列我们会选⽤ Driver 这个类型，事件序列我们会选⽤ Signal 这个类型。</li></ol><h4 id="controlproperty"><a class="markdownIt-Anchor" href="#controlproperty"></a> ControlProperty</h4><ol><li>它是 Observable / ObservableType 特性，表示UI元素的属性。</li></ol><p>值序列仅表示初始控制值和用户启动的值更改。程序化价值的变化将不会报告。</p><ol start="2"><li><p>它的特点：</p><ul><li>永远不会失败</li><li>share(replay: 1)共享最新值<ul><li>它是有状态的，一旦订阅如果有产生过值，那么最新的值会立即重播</li></ul></li><li>当控件销毁的时候发送 complete 事件</li><li>不发送 error 事件</li><li>在主线程上传播 events</li></ul></li><li><p>实际使用案例</p></li></ol><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Reactive</span> <span class="title">where</span> <span class="title">Base</span>: <span class="title">UISearchBar</span> </span>&#123;</span><br><span class="line">    <span class="comment">/// Reactive wrapper for `text` property.</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> value: <span class="type">ControlProperty</span>&lt;<span class="type">String?</span>&gt; &#123;</span><br><span class="line">        <span class="keyword">let</span> source: <span class="type">Observable</span>&lt;<span class="type">String?</span>&gt; = <span class="type">Observable</span>.deferred &#123; [<span class="keyword">weak</span> searchBar = <span class="keyword">self</span>.base <span class="keyword">as</span> <span class="type">UISearchBar</span>] () -&gt; <span class="type">Observable</span>&lt;<span class="type">String?</span>&gt; <span class="keyword">in</span></span><br><span class="line">            <span class="keyword">let</span> text = searchBar?.text</span><br><span class="line">            <span class="keyword">return</span> (searchBar?.rx.delegate.methodInvoked(#selector(<span class="type">UISearchBarDelegate</span>.searchBar(<span class="number">_</span>:textDidChange:))) ?? <span class="type">Observable</span>.empty())</span><br><span class="line">                    .<span class="built_in">map</span> &#123; a <span class="keyword">in</span></span><br><span class="line">                        <span class="keyword">return</span> a[<span class="number">1</span>] <span class="keyword">as</span>? <span class="type">String</span></span><br><span class="line">                    &#125;</span><br><span class="line">                    .startWith(text)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> bindingObserver = <span class="type">Binder</span>(<span class="keyword">self</span>.base) &#123; (searchBar, text: <span class="type">String?</span>) <span class="keyword">in</span></span><br><span class="line">            searchBar.text = text</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">ControlProperty</span>(values: source, valueSink: bindingObserver)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Reactive</span> <span class="title">where</span> <span class="title">Base</span>: <span class="title">UISegmentedControl</span> </span>&#123;</span><br><span class="line">    <span class="comment">/// Reactive wrapper for `selectedSegmentIndex` property.</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> selectedSegmentIndex: <span class="type">ControlProperty</span>&lt;<span class="type">Int</span>&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> value</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// Reactive wrapper for `selectedSegmentIndex` property.</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> value: <span class="type">ControlProperty</span>&lt;<span class="type">Int</span>&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">UIControl</span>.rx.value(</span><br><span class="line">            <span class="keyword">self</span>.base,</span><br><span class="line">            getter: &#123; segmentedControl <span class="keyword">in</span></span><br><span class="line">                segmentedControl.selectedSegmentIndex</span><br><span class="line">            &#125;, setter: &#123; segmentedControl, value <span class="keyword">in</span></span><br><span class="line">                segmentedControl.selectedSegmentIndex = value</span><br><span class="line">            &#125;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="controlevent"><a class="markdownIt-Anchor" href="#controlevent"></a> ControlEvent</h4><ol><li><p>它是 Observable / ObservableType 特性，表示UI元素的事件。</p></li><li><p>特点：</p><ul><li>永不失败</li><li>订阅的时候不会发送初试值</li><li>当控件销毁时，发送 complete</li><li>不发送 errors 事件</li><li>在主线程发送 events</li></ul></li><li><p>实际使用案例</p></li></ol><p>这是一个典型的示例，你可以在开发中使用它：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">extension</span> <span class="title">Reactive</span> <span class="title">where</span> <span class="title">Base</span>: <span class="title">UIViewController</span> </span>&#123;</span><br><span class="line">    <span class="comment">/// Reactive wrapper for `viewDidLoad` message `UIViewController:viewDidLoad:`.</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> viewDidLoad: <span class="type">ControlEvent</span>&lt;<span class="type">Void</span>&gt; &#123;</span><br><span class="line">        <span class="keyword">let</span> source = <span class="keyword">self</span>.methodInvoked(#selector(<span class="type">Base</span>.viewDidLoad)).<span class="built_in">map</span> &#123; <span class="number">_</span> <span class="keyword">in</span> &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">ControlEvent</span>(events: source)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在UICollectionView + Rx中，我们可以通过以下方式找到它：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Reactive</span> <span class="title">where</span> <span class="title">Base</span>: <span class="title">UICollectionView</span> </span>&#123;</span><br><span class="line">    <span class="comment">/// Reactive wrapper for `delegate` message `collectionView:didSelectItemAtIndexPath:`.</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> itemSelected: <span class="type">ControlEvent</span>&lt;<span class="type">IndexPath</span>&gt; &#123;</span><br><span class="line">        <span class="keyword">let</span> source = delegate.methodInvoked(#selector(<span class="type">UICollectionViewDelegate</span>.collectionView(<span class="number">_</span>:didSelectItemAt:)))</span><br><span class="line">            .<span class="built_in">map</span> &#123; a <span class="keyword">in</span></span><br><span class="line">                <span class="keyword">return</span> a[<span class="number">1</span>] <span class="keyword">as</span>! <span class="type">IndexPath</span></span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">ControlEvent</span>(events: source)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>引用：</p><blockquote><p><a href="https://github.com/ReactiveX/RxSwift/blob/master/Documentation/Traits.md" target="_blank" rel="noopener">Traits</a></p></blockquote><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> 第三方框架 </category>
          
          <category> RxSwift </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 翻译 </tag>
            
            <tag> RxSwift </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>协调器 Redux</title>
      <link href="/2018/01/24/architecture/%E5%8D%8F%E8%B0%83%E5%99%A8-Redux/"/>
      <url>/2018/01/24/architecture/%E5%8D%8F%E8%B0%83%E5%99%A8-Redux/</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Jun 02 2020 17:35:52 GMT+0800 (CST) --><a id="more"></a><p><a href="http://khanlou.com/2015/10/coordinators-redux/" target="_blank" rel="noopener">原文：Coordinators Redux</a></p><p>今年年初我写过关于 <a href="http://khanlou.com/2015/01/the-coordinator/" target="_blank" rel="noopener">协调器</a>的文章, 但是自从那以后对于协调器的思考已经成熟了很多，我想通过这几个月所学的东西来来重新介绍这个话题。</p><p>这是根据我<a href="http://nsspain.com/2015/" target="_blank" rel="noopener">今年在NSSpain</a>的一次演讲改编而成。<a href="https://www.slideshare.net/secret/3jJlEE1weo0RRl" target="_blank" rel="noopener">此处</a>找到幻灯片。在<a href="https://vimeo.com/144116310" target="_blank" rel="noopener">这里</a>找到视频。</p><h2 id="三个问题"><a class="markdownIt-Anchor" href="#三个问题"></a> 三个问题</h2><h3 id="1-app-delegates-中放的东西太多了"><a class="markdownIt-Anchor" href="#1-app-delegates-中放的东西太多了"></a> 1. App Delegates 中放的东西太多了</h3><p>苹果公司在指导我们将代码放在合适的地方方面做得非常糟糕。弄清如何构建 App 完全由我们自己决定。最开始写代码的地方显而易见是 app’s delegate.</p><p>app delegate 是每个 App 的入口。它的主要职责是从操作系统到应用程序的子系统来回传递消息。不幸的是，由于它位于所有事物的中心，因此很容易在东西放在这。这样设计方式中的一个受害者就是 rootViewController 的配置。如果你的使用 tabbarController 作为 root，那么你必须要在某个配置所有的 tabbarController 的 children，并且 App delegate 就是个很好的场所。</p><p>我写的第一个 App（对于大多数读者我猜测，这是真的），我在我的AppDelegate中，为 rootviewcontroller 配置了所有配置。那些代码真的不属于这里，写在这里只是为了方便。</p><p>在我写完我第一个 app 以后我意识到了这个，然后我变得聪明了，我是用了这样的技巧：</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">SKTabBarController</span> : <span class="title">UITabBarController</span></span></span><br></pre></td></tr></table></figure><p>我会创建一个我想要使用的 rootViewController 子类，然后我会把代码挪到这里。这只是关于这个问题的临时补丁，最后发现这也不是此代码该放的地方。我建议我们研究这个对象——rootViewController，从责任的角度。管理子视图控制器属于这些职责，但分配和配置它们的职责不多。我们正在对一个从未打算进行子类化的东西进行子类化，只是为了我们可以隐藏一些无家可归的代码。</p><p>对于此应用程序配置逻辑，我们需要一个更好的家。</p><h3 id="2太多责任"><a class="markdownIt-Anchor" href="#2太多责任"></a> 2.太多责任</h3><p>这里有另外一个问题。单个ViewController也遇到这样的问题，把大量的责任放倾倒App delegate里面。</p><p>ViewController 中负责的一些事情：</p><ol><li>模型视图绑定</li><li>子视图分配内存</li><li>获取数据</li><li>布局</li><li>数据转换</li><li>导航流程</li><li>用户输入</li><li>模型变化</li><li>还有更多</li></ol><p>我提过一些方法将这些责任藏到 ViewController 的 children中，方法在<a href="http://khanlou.com/2014/09/8-patterns-to-help-you-destroy-massive-view-controller/" target="_blank" rel="noopener">8 Patterns to Help You Destroy Massive View Controller</a>中. 所有责任不能在一个地方，这样 ViewController 中的代码就会少于 3000行了。</p><p>哪些东西应该在这个类？哪些应该在别的地方？ViewController的工作是什么？这些问题还没有理清楚。</p><p>引用 Graham Lee 说的一句话，我很喜欢。</p><blockquote><p>When you get overly attached to MVC, then you look at every class you create and ask the question “is this a model, a view, or a controller?”. Because this question makes no sense, the answer doesn’t either: anything that isn’t evidently data or evidently graphics gets put into the amorphous “controller” collection, which eventually sucks your entire codebase into its innards like a black hole collapsing under its own weight.</p></blockquote><p>什么是ViewController？Smalltalkian意义上的控制器<a href="http://khanlou.com/2014/03/model-view-whatever/" target="_blank" rel="noopener">最初严格是为用户输入而设计</a>的。甚至“控制”一词也给我们带来了麻烦。如我<a href="http://khanlou.com/2014/11/a-controller-by-any-other-name/" target="_blank" rel="noopener">之前所写</a>：</p><blockquote><p>When you call something a Controller, it absolves you of the need to separate your concerns. Nothing is out of scope, since its purpose is to control things. Your code quickly devolves into a procedure, reaching deep into other objects to query their state and manipulate them from afar. Boundless, it begins absorbing responsibilities.</p></blockquote><h3 id="平缓的-flow"><a class="markdownIt-Anchor" href="#平缓的-flow"></a> 平缓的 Flow</h3><p>最后一个我想要讨论的问题是：navigation flow</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)tableView:(<span class="built_in">UITableView</span> *)tableView didSelectRowAtIndexPath:(<span class="built_in">NSIndexPath</span> *)indexPath &#123;  </span><br><span class="line">  <span class="keyword">id</span> object = [<span class="keyword">self</span>.dataSource objectAtIndexPath:indexPath];  </span><br><span class="line">  <span class="built_in">SKDetailViewController</span> *detailViewController = [[<span class="built_in">SKDetailViewController</span> alloc] initWithDetailObject:object];  </span><br><span class="line">  [<span class="keyword">self</span>.navigationController pushViewController:detailViewController animated:<span class="literal">YES</span>];  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这事一段很常见的代码，不幸的是，他是垃圾代码。让我们一行行看：</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">id</span> object = [<span class="keyword">self</span>.dataSource objectAtIndexPath:indexPath];</span><br></pre></td></tr></table></figure><p>第一行的 <code>dataSource</code> 是 ViewController 逻辑上的 child，然后我们正在跟他要我们需要引用的的对象。</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">SKDetailViewController</span> *detailViewController = [[<span class="built_in">SKDetailViewController</span> alloc] initWithDetailObject:object];</span><br></pre></td></tr></table></figure><p>这里事情开始变得麻烦。ViewController 正在实例化一个新的 ViewController，然后配置它。这个 ViewController ”知道“ 在 flow 中接下来会流出什么。他知道新的 ViewController 是怎么配置的。正在执行 Presenting 的 ViewController 知道他所在 App 位置中的大量细节（新 ViewController的配置细节）。</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="keyword">self</span>.navigationController pushViewController:detailViewController animated:<span class="literal">YES</span>];</span><br></pre></td></tr></table></figure><p>第三行是它完全偏离轨道的地方。这个 ViewController 知道了他的父级 ViewController，因为请记住，这些视图控制器在同一层次结构中，子 ViewController 会向父 ViewController 发送消息，告诉他要做什么。子 ViewController 正在指挥他的父亲。在现实世界里，孩子不应该到处指挥自己的父亲。<strong>在编程中，我会说孩子甚至不应该知道他们的父亲是谁！</strong></p><p>在<a href="http://khanlou.com/2014/09/8-patterns-to-help-you-destroy-massive-view-controller/" target="_blank" rel="noopener">8种模式帮助你干掉大量的ViewController</a>, 我建议使用一个 <code>Navigator</code> 类型，它可以注入到那些包含导航逻辑的 ViewControllers 中。如果你想要把导航逻辑放到同一个地方， <code>Navigators</code> 是一个不错的解决方案，但是我们很快遇到一个导航器没办法帮我们解决的问题。</p><p>在这三行代码中有很多逻辑，但是 ViewController 不是这些逻辑发生的地方。想象你有个编辑图像的 app</p><p>你的 <code>PhotoSelectionViewController</code> presents <code>StraighteningViewController</code> presents <code>FilteringViewController</code> presents <code>CaptioningViewController</code>。你的导航 flow 现在分布在三个不同的对象之间。进一步说，某个 ViewController presenting <code>PhotoSelectionViewController</code> ，但是 dismissal 逻辑必须要在 <code>CaptioningViewController</code> 中处理。</p><p>传递 <code>Navigator</code> 使这些 ViewControllers 保持链状连接在一起，并不能真正解决每个 ViewController 知道链中下一个的问题。</p><p>我们也需要解决这个问题。</p><h3 id="libraries-vs-frameworks"><a class="markdownIt-Anchor" href="#libraries-vs-frameworks"></a> Libraries vs Frameworks</h3><p>我认为Apple 希望我们以所有这些方式编写代码。他们希望我们使用 ViewController 成为世界中心，因为所有以相同样式编写的 app 都可以通过更改SDK发挥最大的影响力。不幸的是，对于开发者，这并不总是最好的举动。我们是负责将来维护 app 的人，可靠的设计和代码可扩展性是我们最看重的。</p><p>他们说libraries 和 frameworks 的区别是，你调用 libraries，frameworks 调用你。我想尽可能像依赖 libraries 的方式，对待 3rd-party 依赖。</p><p>当使用 <code>UIKit</code> ，你不需要负责什么。调用 <code>-pushViewController:animated:</code> 然后它做一些工作。并且在将来的某个不确定的时间，下一个ViewController出现他会调用 <code>viewDidLoad:</code> 在这里面你可做更多事。你不应该让 <code>UIKit</code> 决定何时运行代码，而是应尽快退出 <code>UIKit</code> -land, 以便你可以完全控制代码的流向。</p><p>我曾经将ViewController为 app 中最高等级的东西，这些东西知道如何运行整个app。但是我开始想颠覆这个想法后他会是什么样子。view 对其 ViewController是透明的。view 由 ViewController 控制。如果我们以相同的方式使视图控制器只是另一透明的东西怎么办？</p><h2 id="coordinators"><a class="markdownIt-Anchor" href="#coordinators"></a> Coordinators</h2><p><strong>什么是 Coordinators ？</strong></p><p>Coordinator 是用于管理一个or 多个ViewController的对象。将所有驱动逻辑从 ViewController中移除，并将这些内容向上移动一层，这会使你的生活变得更加美好。</p><p>这一切都从 app Coordinator 开始。Coordinator解决 app delegate 中内容过多的问题。app delegate 可以保留app Coordinator并启动它。app Coordinator 将为app 设置主视图控制器。可以在文献中找到这种模式，例如<a href="https://www.amazon.com/Patterns-Enterprise-Application-Architecture-Martin/dp/0321127420" target="_blank" rel="noopener">企业应用程序体系结构模式</a>之类的书。他们把 Coordinator 叫做 <a href="http://martinfowler.com/eaaCatalog/applicationController.html" target="_blank" rel="noopener">Application Controller</a>. app coordinator 是 Application Controller 的特别版，尤其对于 iOS。app coordinator 可以创建并配置 ViewController，或者它可以长生新的子 Coordinator来执行子任务。</p><p>coordinators 可以接管 ViewController的哪些任务？主要是 navigation 和 model 变化.(我的意思是通过模型变化将用户的更改保存在数据库中，或者对 API 进行 <code>PUT</code> or <code>POST</code> 请求，这些都会破坏性地修改用户的数据。)</p><p>当你把这些任务从ViewController中拿走，我们最终得到了一个惰性的 ViewController。它可以呈现，可以获取数据，对其进行转换以进行呈现、显示，但至关重要的是无法对其进行更改。现在我们知道，每当展示 ViewController 时，都不会让他自己控制。每当需要让我们知道事件或用户输入时，它都会使用委托方法。让我们看一个代码示例。</p><h3 id="代码示例"><a class="markdownIt-Anchor" href="#代码示例"></a> 代码示例</h3><p>让我们从 App delegate开始</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="built_in">BOOL</span>)application:(<span class="built_in">UIApplication</span> *)application didFinishLaunchingWithOptions:(<span class="built_in">NSDictionary</span> *)launchOptions &#123;  </span><br><span class="line">  <span class="keyword">self</span>.window = [[<span class="built_in">UIWindow</span> alloc] initWithFrame:[<span class="built_in">UIScreen</span> mainScreen].bounds];  </span><br><span class="line">  <span class="keyword">self</span>.rootViewController = [[<span class="built_in">UINavigationController</span> alloc] init];</span><br><span class="line">  <span class="keyword">self</span>.appCoordinator = [[<span class="built_in">SKAppCoordinator</span> alloc] initWithNavigationController:<span class="keyword">self</span>.rootViewController];  </span><br><span class="line">  [<span class="keyword">self</span>.appCoordinator start]; </span><br><span class="line">  [<span class="keyword">self</span>.window makeKeyAndVisible];  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>app delegate 构建 app 的window 和 root ViewController，然后开启 app Coordinator。Coordinator的初始化与开始工作是分开的。这样我们就可以按自己的意愿（懒惰，贪婪等）创建它，并且只有在准备好后才能启动它。</p><p>Coordinator 就是一个 NSObject:</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">SKAppCoordinator</span> : <span class="title">NSObject</span></span></span><br></pre></td></tr></table></figure><p>这很棒，这里没有秘密，<code>UIViewController</code> 有上千行代码，我们不知道当我们调用他的方法时会发生什么，因为他是闭源的。简单的 <code>NSObject</code> 类型对象运行app，可使一切变得更加简单。</p><p>app coordinator 使用他需要的数据初始化，这些数据包括 root ViewController</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">instancetype</span>)initWithNavigationController:(<span class="built_in">UINavigationController</span> *)navigationController &#123;  </span><br><span class="line">  <span class="keyword">self</span> = [<span class="keyword">super</span> init];  </span><br><span class="line">  <span class="keyword">if</span> (!<span class="keyword">self</span>) <span class="keyword">return</span> <span class="literal">nil</span>; </span><br><span class="line">  _navigationController = navigationController; </span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">self</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一旦我们调用 <code>-start</code> 方法，coordinator就会开始工作</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)start &#123;  </span><br><span class="line">  <span class="keyword">if</span> ([<span class="keyword">self</span> isLoggedIn]) &#123;  </span><br><span class="line">    [<span class="keyword">self</span> showContent];  </span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">    [<span class="keyword">self</span> showAuthentication];  </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从一开始 Coordinator 就做决定！以前像这样的逻辑没有固定位置，你可以把他放在 appdelegate中或者 ViewController中，但是放这两个地方都有各自的缺陷。在 ViewController中，你有一个 ViewController做超出它本身责任的事情。在 appdelegate中，你会放入一些与他不相关的代码污染他。</p><p>让我们研究一下 <code>-showAuthentication</code> 方法。在这里，base Coordinator 生成 子 Coordinator，并让其执行子任务</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)showAuthentication &#123;  </span><br><span class="line">  <span class="built_in">SKAuthenticationCoordinator</span> *authCoordinator = [[<span class="built_in">SKKAuthenticationCoordinator</span> alloc] initWithNavigationViewController:<span class="keyword">self</span>.navigationController];  </span><br><span class="line">  authCoordinator.delegate = <span class="keyword">self</span>;  </span><br><span class="line">  [authCoordinator start];  </span><br><span class="line">  [<span class="keyword">self</span>.childCoordinators addObject:authCoordinator];  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们使用 <code>childCoordinators</code> 数组引用 Coordinators，防止其被销毁。</p><p>ViewController存在一棵树中，并且每个 ViewController都包含一个 view。 view存在于 subViews 树中，而且每个 subview 有一个 layer。layers也存在于一棵树中。因为 <code>childCoordinators</code> ，你也会得到一棵 Coordinators 树。</p><p>子 Coordinator 会创建一些 ViewControllers，等待他们工作，viewcontroller 工作完后 Coordinator会通知我们。当 Coordinator 发送信号告知ViewController工作完时，它会清理自己，弹出他添加的所有 ViewController，然后使用委托将消息发送到父级。</p><p>一旦我们已认证，我们会得到一个 delegate 消息，然后我们允许子 Coordinator 销毁，然后我们返回平常的程序中。</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)coordinatorDidAuthenticate:(<span class="built_in">SKAuthenticationCoordinator</span> *)coordinator &#123;  </span><br><span class="line">  [<span class="keyword">self</span>.childCoordinators removeObject:coordinator];  </span><br><span class="line">  [<span class="keyword">self</span> showContent];  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在身份验证 Coordinator 内部，它创建所需的任何Viewcontroller，并将其推入导航控制器。让我们看一下。</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">AuthCoordinator</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">instancetype</span>)initWithNavigationController:(<span class="built_in">UINavigationController</span> *)navigationController &#123;  </span><br><span class="line">  <span class="keyword">self</span> = [<span class="keyword">super</span> init];  </span><br><span class="line">  <span class="keyword">if</span> (!<span class="keyword">self</span>) <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">  </span><br><span class="line">  _navigationController = navigationController;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">self</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>初始化类似于app coordinator.</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)start &#123;  </span><br><span class="line">  <span class="built_in">SKFirstRunViewController</span> *firstRunViewcontroller = [<span class="built_in">SKFirstRunViewController</span> new];  </span><br><span class="line">  firstRunViewcontroller.delegate = <span class="keyword">self</span>;  </span><br><span class="line">  [<span class="keyword">self</span>.navigationController pushViewController:firstRunViewcontroller animated:<span class="literal">NO</span>];  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>身份验证需要从“首次运行 viewcontroller”开始。该viewcontroller具有用于注册和登录的按钮，还可能包含一些幻灯片，解释了app。让我们继续使用该Viewcontroller 并成为其代表。</p><p>该ViewController 有一个 delegate，因此当用户点击“注册”按钮时，我们可以得到通知。Coordinator 将处理该操作，而不是ViewController需要知道要创建和呈现的注册ViewController。</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)firstRunViewControllerDidTapSignup:(<span class="built_in">SKFirstRunViewController</span> *)firstRunViewController &#123;  </span><br><span class="line">  <span class="built_in">SKSignUpViewController</span> *signUpViewController = [[<span class="built_in">SKSignUpViewController</span> alloc] init];  </span><br><span class="line">  signupViewController.delegate = <span class="keyword">self</span>;  </span><br><span class="line">  [<span class="keyword">self</span>.navigationController pushViewController:signupViewController animated:<span class="literal">YES</span>];  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Coordinator 成为这个注册过的 ViewController的代理，为了它可以在按下按钮时通知我们。</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)signUpViewController:(<span class="built_in">SKSignUpViewController</span> *)signupViewController didTapSignupWithEmail:(<span class="built_in">NSString</span> *)email password:(<span class="built_in">NSString</span> *)password &#123;  </span><br><span class="line">  <span class="comment">//...  </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>诸如此类。在这里，我们实际上执行了注册API请求并保存了身份验证 token，然后通知了父coordinator。</p><p>每当ViewController发生任何事情（例如用户输入）时，ViewController都会告诉其delegate（在这种情况下为Coordinator），并且Coordinator将执行用户想要的实际任务。让Coordinator来完成这项工作很重要，以便 ViewController 保持惰性。</p><h3 id="为什么-coordinators-很好用"><a class="markdownIt-Anchor" href="#为什么-coordinators-很好用"></a> 为什么 Coordinators 很好用</h3><h4 id="1每个-viewcontroller-现在是孤立的"><a class="markdownIt-Anchor" href="#1每个-viewcontroller-现在是孤立的"></a> 1.每个 ViewController 现在是孤立的</h4><p>除了知道如何呈现数据，ViewController 啥都不知道。每当有什么事发生时，它都会通知 delegate，但是当然它不知道其 delegate 是谁。</p><p>以前，当分支时，ViewController 需要问“好吧，我在iPad还是iPhone上？”。“用户是否正在接受A / B测试？” 他们不再需要提这样的问题。我们是否只是将这个有条件的问题推给了 Coordinator ？从某种意义上讲，但是我们可以以更好的方式解决它。</p><p>当确实需要一次具有两个 flow 时，对于A / B测试或多个 size classes，你可以交换整个 Coordinator 对象，而不必在整个 ViewController 上粘贴一堆条件。</p><p>如果你想了解 flow 的工作方式，那么这非常容易，因为所有代码都在一个地方。</p><h4 id="2viewcontrollers-现在可以复用"><a class="markdownIt-Anchor" href="#2viewcontrollers-现在可以复用"></a> 2.ViewControllers 现在可以复用</h4><p>ViewControllers 对要显示的上下文或按钮的用途不承担任何责任。它们可以被使用和重新使用，以保持其美观，而不会拖累任何逻辑。</p><p>如果你要编写iPad版本的app，则只需替换 Coordinator 即可，并且可以重复使用所有ViewControllers。</p><h4 id="3app中每个任务和子任务都有一种专用的封装方式"><a class="markdownIt-Anchor" href="#3app中每个任务和子任务都有一种专用的封装方式"></a> 3.app中每个任务和子任务都有一种专用的封装方式</h4><p>即使任务可以在多个 ViewControllers 上运行，它也会被封装。如果你的iPad版本重复使用了其中的一些子任务，但没有重复使用，则仅使用这些子任务就非常容易。</p><h4 id="4coordinator-将显示绑定与副作用分开"><a class="markdownIt-Anchor" href="#4coordinator-将显示绑定与副作用分开"></a> 4.Coordinator 将显示绑定与副作用分开</h4><p>你再也不必担心在呈现 ViewController时，ViewController破坏数据了。它只能读取和显示，不能写入或破坏数据。这与<a href="https://en.wikipedia.org/wiki/Command%E2%80%93query_separation" target="_blank" rel="noopener">命令查询分离</a>相似。</p><h4 id="5-coordinator是完全由你控制的对象"><a class="markdownIt-Anchor" href="#5-coordinator是完全由你控制的对象"></a> 5. Coordinator是完全由你控制的对象</h4><p>你不必等待 <code>-viewDidLoad</code> 调用了，才可以进行工作。现在完全可以自己控制工作。在UIViewController超类中没有看不见的代码在做你不知道的事。取代被调用，你开始这个调用。</p><p>翻转此模型可以更轻松地了解发生了什么。app的行为对你完全透明，<code>UIKit</code> 现在只是你要使用它时调用的库。</p><p><a href="https://github.com/backchannel/BackchannelSDK-iOS" target="_blank" rel="noopener">Backchannel SDK</a> 使用此模式来管理其所有 ViewControllers。app coordinator 和身份验证 coordinator 示例来自该项目。</p><p>最后，Coordinator 只是一种组织模式。没有你能使用的 Coordinator 库，因为它很简单。没有可以 <code>pod</code> 的 Coordinator库，也米有可以继承的子类。甚至没有一个可遵循的协议。这不是缺点，而是使用像Coordinator这样的模式的优点：它只是你的代码，没有依赖项。</p><p>他们将使你的app和代码更易于管理。ViewController将具有更高的可重用性，并且比以往任何时候都更容易开发你的 app。</p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> 设计思想 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 翻译 </tag>
            
            <tag> 设计思想 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RxFlow 3: 提示和技巧</title>
      <link href="/2018/01/22/RxSwfit+RAC/RxFlow-3-%E6%8F%90%E7%A4%BA%E5%92%8C%E6%8A%80%E5%B7%A7/"/>
      <url>/2018/01/22/RxSwfit+RAC/RxFlow-3-%E6%8F%90%E7%A4%BA%E5%92%8C%E6%8A%80%E5%B7%A7/</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Jun 02 2020 17:35:52 GMT+0800 (CST) --><a id="more"></a><p><img src="https://twittemb.github.io/uploads/Weavy_part3.png" alt="-"></p><p>这篇是 RxFlow 系列文章的最后一章。在前两篇文章中，我已经介绍了所有关键功能/原理</p><p>让我们深入探讨我在响应式编程中发现的技巧和窍门。</p><h2 id="uiviewcontroller-支持-reactive"><a class="markdownIt-Anchor" href="#uiviewcontroller-支持-reactive"></a> UIViewController 支持 Reactive</h2><p>正如我们在第2篇中所看到的，我们有时需要以响应方式知道何时显示一个Presentable。一个 <strong>Presentable</strong> 暴露三个 Observables：</p><details><summary>code</summary><pre><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// Observable that triggers a bool indicating if</span></span><br><span class="line"><span class="comment">/// the current Presentable is being displayed</span></span><br><span class="line"><span class="keyword">var</span> rxVisible: <span class="type">Observable</span>&lt;<span class="type">Bool</span>&gt; &#123; <span class="keyword">get</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// Single triggered when this presentable is displayed</span></span><br><span class="line"><span class="comment">/// for the first time</span></span><br><span class="line"><span class="keyword">var</span> rxFirstTimeVisible: <span class="type">Single</span>&lt;<span class="type">Void</span>&gt; &#123; <span class="keyword">get</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// Single triggered when this presentable is dismissed</span></span><br><span class="line"><span class="keyword">var</span> rxDismissed: <span class="type">Single</span>&lt;<span class="type">Void</span>&gt; &#123; <span class="keyword">get</span> &#125;</span><br></pre></td></tr></table></figure></pre></details><p>在 <strong>RxFlow</strong> 中，UIViewController 遵从 <strong>Presentable</strong> 协议，因此我们必须找到方法让他们支持 Reactive。</p><p>幸运的是在此过程中发现的一个项目在此方面起到了很大作用：<a href="https://github.com/devxoul/RxViewController" target="_blank" rel="noopener">RxViewController</a>.</p><p>通过应用我在这篇文章中(<a href="https://twittemb.github.io/swift/generics/reactive/rxswift/pattern/name%20space/2017/11/22/versatile-namespace/" target="_blank" rel="noopener">Swift中的静态名称空间</a>)描述的模式，它为UIViewControllers提供了Reactive扩展。它使用RxCocoa内置函数允许观察选择器调用。一旦理解了这一概念，便对UIViewController进行了自己的扩展。</p><details><summary>code</summary><pre><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Reactive</span> <span class="title">where</span> <span class="title">Base</span>: <span class="title">UIViewController</span> </span>&#123;</span><br><span class="line">    <span class="comment">/// Observable, triggered when the view has appeared for the first time</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> firstTimeViewDidAppear: <span class="type">Single</span>&lt;<span class="type">Void</span>&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> sentMessage(#selector(<span class="type">Base</span>.viewDidAppear)).<span class="built_in">map</span> &#123; <span class="number">_</span> <span class="keyword">in</span></span><br><span class="line">            <span class="keyword">return</span> <span class="type">Void</span>()</span><br><span class="line">        &#125;.take(<span class="number">1</span>).asSingle()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// Observable, triggered when the view is being dismissed</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> dismissed: <span class="type">ControlEvent</span>&lt;<span class="type">Bool</span>&gt; &#123;</span><br><span class="line">        <span class="keyword">let</span> source = sentMessage(#selector(<span class="type">Base</span>.dismiss))</span><br><span class="line">                     .<span class="built_in">map</span> &#123; $<span class="number">0</span>.first <span class="keyword">as</span>? <span class="type">Bool</span> ?? <span class="literal">false</span> &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">ControlEvent</span>(events: source)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// Observable, triggered when the view appearance state changes</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> displayed: <span class="type">Observable</span>&lt;<span class="type">Bool</span>&gt; &#123;</span><br><span class="line">        <span class="keyword">let</span> viewDidAppearObs = sentMessage(#selector(<span class="type">Base</span>.viewDidAppear))</span><br><span class="line">                               .<span class="built_in">map</span> &#123; <span class="number">_</span> <span class="keyword">in</span> <span class="literal">true</span> &#125;</span><br><span class="line">        <span class="keyword">let</span> viewWillDisappearObs = sentMessage(#selector(<span class="type">Base</span>.viewWillDisappear))</span><br><span class="line">                                   .<span class="built_in">map</span> &#123; <span class="number">_</span> <span class="keyword">in</span> <span class="literal">false</span> &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">Observable</span>&lt;<span class="type">Bool</span>&gt;.merge(viewDidAppearObs, viewWillDisappearObs)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></pre></details><p>作为记录，这就是 <strong>Coordinator</strong> 的用法，其中 <strong>“nextPresentable”</strong> 是由 <strong>Flow</strong> 上的 <strong>“navigate（to : )”</strong> 函数生成的 <strong>Presentable</strong> 。在已经关联的Presentable首次显示之后，我们仅监听下一个Stepper。</p><details><summary>code</summary><pre><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">nextPresentable.rxFirstTimeVisible.subscribe(onSuccess: &#123; [<span class="keyword">unowned</span> <span class="keyword">self</span>,</span><br><span class="line">                                                           <span class="keyword">unowned</span> nextPresentable,</span><br><span class="line">                                                           <span class="keyword">unowned</span> nextStepper] (<span class="number">_</span>) <span class="keyword">in</span></span><br><span class="line">    <span class="comment">// we listen to the presentable's Stepper.</span></span><br><span class="line">    <span class="comment">// For each new Step value, we trigger a new navigation process</span></span><br><span class="line">    <span class="comment">// this is the core principle of the whole RxFlow mechanism</span></span><br><span class="line">    <span class="comment">// The process is paused each time the presentable is not currently displayed</span></span><br><span class="line">    <span class="comment">// for instance when another presentable is above it in the VCs hierarchy.</span></span><br><span class="line">    nextStepper.steps</span><br><span class="line">        .pausable(nextPresentable.rxVisible.startWith(<span class="literal">true</span>))</span><br><span class="line">        .asDriver(onErrorJustReturn: <span class="type">NoStep</span>())</span><br><span class="line">        .drive(onNext: &#123; [<span class="keyword">unowned</span> <span class="keyword">self</span>] (step) <span class="keyword">in</span></span><br><span class="line">            <span class="comment">// the nextPresentable's Stepper fires a new Step</span></span><br><span class="line">            <span class="keyword">self</span>.steps.onNext(step)</span><br><span class="line">        &#125;).disposed(by: nextPresentable.disposeBag)</span><br><span class="line"></span><br><span class="line">&#125;).disposed(by: <span class="keyword">self</span>.disposeBag)</span><br></pre></td></tr></table></figure></pre></details><h2 id="暂停"><a class="markdownIt-Anchor" href="#暂停"></a> 暂停</h2><p>在 RxFlow 中另一个关键原则：<strong>Flow</strong> 中发生什么就要停留在 <strong>Flow</strong> 中。因此我必须找到一个方式</p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> 第三方框架 </category>
          
          <category> RxSwift </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 翻译 </tag>
            
            <tag> RxSwift </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RxFlow 2: 实践</title>
      <link href="/2018/01/21/RxSwfit+RAC/RxFlow-2-%E5%AE%9E%E8%B7%B5/"/>
      <url>/2018/01/21/RxSwfit+RAC/RxFlow-2-%E5%AE%9E%E8%B7%B5/</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Jun 02 2020 17:35:52 GMT+0800 (CST) --><a id="more"></a><p><strong>注意！！！</strong></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">typealias</span> <span class="type">NextFlowItems</span> = <span class="type">FlowContributors</span></span><br></pre></td></tr></table></figure><p><a href="https://twittemb.github.io/swift/coordinator/reactive/rxflow/reactive%20programming/2017/12/09/rxflow-part-2-in-practice/" target="_blank" rel="noopener">原文RxFlow Part 2: In Practice</a><br><img src="https://twittemb.github.io/uploads/RxFlowPart2.png" alt="-"></p><p>上篇：<a href="../RxFlow-1-%E5%8E%9F%E7%90%86">RxFlow-1-原理</a></p><p>几周前我介绍了 RxFlow 框架，我已经在这个框架上工作了几个月，现在可以使用了。如果您尚未阅读，建议您看一下这篇<a href="https://twittemb.github.io/swift/coordinator/rxswift/rxflow/reactive%20programming/2017/11/08/rxflow-part-1-in-theory/" target="_blank" rel="noopener">文章</a>。</p><p>总结，RxFlow 旨在：</p><ul><li>轻松的将你的导航切成逻辑部分</li><li>把导航代码从 ViewController 中删除</li><li>鼓励 ViewController 复用性</li><li>促进 响应式编程</li><li>促进 依赖注入</li></ul><p>快速回忆下以下术语：</p><ul><li>Flow: 每个 Flow 都在应用程序中定义了一个导航区域。</li><li>Step: 在应用中，每个 Step 就是一个导航状态，Flows 和 Steps 的结合描述了有所导航操作的可能。</li><li>Stepper: 任何可以发出 Steps 的东西。Steppers 负责触发每个在 Flows 中的导航操作</li><li>Presentable: 可以被呈现出来的事物的抽象（基本上是 UIViewController 和 可以呈现的 Flow）</li><li>NextFlowItem(FlowContributors): 他会告诉 Coordinator，在他的响应机制中，接下来将会是什么产生新的 Steps</li><li>Coordinator: Coordinator 的工作是以一种一直的方式混合Flows and Steps组合</li></ul><p>同样重要的是要记住，RxFlow使用面向协议的程序设计，这样它才不会将代码冻结在继承层次结构中。</p><p>在 <a href="https://github.com/RxSwiftCommunity/RxFlow" target="_blank" rel="noopener">RxFlow repo</a> 中，你将找到一个演示应用程序。它几乎显示了每种可能的导航类型</p><ul><li>Navigation stack</li><li>Tab bar</li><li>Master / detail</li><li>Modal popup</li></ul><p><img src="https://twittemb.github.io/uploads/versions/demoweavy-mov---x----185-400x---.gif" alt="-"></p><h2 id="都是关于-states"><a class="markdownIt-Anchor" href="#都是关于-states"></a> 都是关于 States</h2><p><strong>RxFlow</strong> 主要是使用响应式的方式处理导航状态。为了在多个上下文中复用，这些状态一定要不知道当前使用的导航 Flow。因此，状态不是表示“我要跳转到此屏幕”，而是表示“某人或某物执行此操作”，然后RxFlow会根据当前导航 Flow 选择正确的screen。对于 RxFlow，这个导航状态称为“<strong>Steps</strong>”。</p><p>枚举是描述 <strong>Steps</strong> 的好方法:</p><ul><li>枚举方便使用</li><li>一个 value 只可以被定义一次(因此一个状态是惟一的)</li><li>枚举可以安全使用，因为Swift在 switch 语法中要求你实现所有可能值</li><li>枚举可以关联 value，这些value 可以从一个 screen 传到另一个 screen</li><li>枚举是值类型，因此不存在传递不受控制的共享参考</li></ul><details><summary>eg: 在 demo App 中，这些都是我们涵盖导航可能性所需的所有 Steps。</summary><pre><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> RxFlow</span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">DemoStep</span>: <span class="title">Step</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> apiKey</span><br><span class="line">    <span class="keyword">case</span> apiKeyIsComplete</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> movieList</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> moviePicked (withMovieId: <span class="type">Int</span>)</span><br><span class="line">    <span class="keyword">case</span> castPicked (withCastId: <span class="type">Int</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> settings</span><br><span class="line">    <span class="keyword">case</span> settingsDone</span><br><span class="line">    <span class="keyword">case</span> about</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></pre></details><h2 id="使用-flow"><a class="markdownIt-Anchor" href="#使用-flow"></a> 使用 Flow</h2><p>对于 <strong>RxFlow</strong>，所有导航代码都在 Flow 中声明，eg：presenting 或者 pushing ViewController。在你的 App 中一个 <strong>Flow</strong> 代表了导航逻辑段，当 Flow 和一个明确的 Step 结合后，Flow触发导航动作。</p><p>为此，<strong>Flow</strong> 要实现：</p><ul><li>一个 “<strong>navigate(to:)</strong>” 方法根据 Flow 和 Step，执行导航操作</li><li>一个 “<strong>root</strong>” UIViewController，他将基于在此 <strong>Flow</strong> 中的导航</li></ul><p>有个 <strong>Flow</strong> 控制 UINavigationController 和 stack的例子。</p><details><summary>在这个 Flow 中，可以执行3个导航操作。</summary><pre><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> RxFlow</span><br><span class="line"><span class="keyword">import</span> UIKit</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WatchedFlow</span>: <span class="title">Flow</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> root: <span class="type">UIViewController</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">self</span>.rootViewController</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">let</span> rootViewController = <span class="type">UINavigationController</span>()</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">let</span> service: <span class="type">MoviesService</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">init</span>(withService service: <span class="type">MoviesService</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.service = service</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">navigate</span><span class="params">(to step: Step)</span></span> -&gt; [<span class="type">NextFlowItem</span>] <span class="comment">/*FlowContributors*/</span> &#123;</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> step = step <span class="keyword">as</span>? <span class="type">DemoStep</span> <span class="keyword">else</span> &#123; <span class="keyword">return</span> <span class="type">NextFlowItem</span>.noNavigation &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span> step &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> .movieList:</span><br><span class="line">            <span class="keyword">return</span> navigateToMovieListScreen()</span><br><span class="line">        <span class="keyword">case</span> .moviePicked(<span class="keyword">let</span> movieId):</span><br><span class="line">            <span class="keyword">return</span> navigateToMovieDetailScreen(with: movieId)</span><br><span class="line">        <span class="keyword">case</span> .castPicked(<span class="keyword">let</span> castId):</span><br><span class="line">            <span class="keyword">return</span> navigateToCastDetailScreen(with: castId)</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="type">NextFlowItem</span>.noNavigation</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">navigateToMovieListScreen</span> <span class="params">()</span></span> -&gt; [<span class="type">NextFlowItem</span>]<span class="comment">/*FlowContributors*/</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> viewModel = <span class="type">WatchedViewModel</span>(with: <span class="keyword">self</span>.service)</span><br><span class="line">        <span class="keyword">let</span> viewController = <span class="type">WatchedViewController</span>.instantiate(with: viewModel)</span><br><span class="line">        viewController.title = <span class="string">"Watched"</span></span><br><span class="line">        <span class="keyword">self</span>.rootViewController.pushViewController(viewController, animated: <span class="literal">true</span>)</span><br><span class="line">        <span class="keyword">return</span> [<span class="type">NextFlowItem</span>(nextPresentable: viewController, nextStepper: viewModel)]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">navigateToMovieDetailScreen</span> <span class="params">(with movieId: Int)</span></span> -&gt; [<span class="type">NextFlowItem</span>]<span class="comment">/*FlowContributors*/</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> viewModel = <span class="type">MovieDetailViewModel</span>(withService: <span class="keyword">self</span>.service,</span><br><span class="line">                                             andMovieId: movieId)</span><br><span class="line">        <span class="keyword">let</span> viewController = <span class="type">MovieDetailViewController</span>.instantiate(with: viewModel)</span><br><span class="line">        viewController.title = viewModel.title</span><br><span class="line">        <span class="keyword">self</span>.rootViewController.pushViewController(viewController, animated: <span class="literal">true</span>)</span><br><span class="line">        <span class="keyword">return</span> [<span class="type">NextFlowItem</span>(nextPresentable: viewController, nextStepper: viewModel)]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">navigateToCastDetailScreen</span> <span class="params">(with castId: Int)</span></span> -&gt; [<span class="type">NextFlowItem</span>]<span class="comment">/*FlowContributors*/</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> viewModel = <span class="type">CastDetailViewModel</span>(withService: <span class="keyword">self</span>.service,</span><br><span class="line">                                            andCastId: castId)</span><br><span class="line">        <span class="keyword">let</span> viewController = <span class="type">CastDetailViewController</span>.instantiate(with: viewModel)</span><br><span class="line">        viewController.title = viewModel.name</span><br><span class="line">        <span class="keyword">self</span>.rootViewController.pushViewController(viewController, animated: <span class="literal">true</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="type">NextFlowItem</span>.noNavigation</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></pre></details><h2 id="导航是一个副作用"><a class="markdownIt-Anchor" href="#导航是一个副作用"></a> 导航是一个副作用</h2><p>在学习函数响应式编程的时候，我们经常读到 <strong>副作用</strong>。FRP 的目的是传递事件，然后再整过程中使用 FRP 的函数处理事件。这些functions 可以转换事件，最终(但是不是必须)将执行你想要的任何功能的代码(网络请求，保存文件，显示一个 alert……)：这些是 <strong>副作用</strong></p><p>因为 RxFlow 依赖响应式编程，我们可以轻松地识别出固有的概念：</p><ul><li>events：发出 Steps</li><li>function：就是 “<strong>navigate(to:)</strong>” function</li><li>transformation：“<strong>navigate(to:)</strong>” 将 Step 转换成另一个 <strong>NextFlowItem</strong> (FlowContributors)</li><li>side effects：执行在“<strong>navigate(to:)</strong>”中的导航操作（eg: <strong>“navigateToMovieListScreen()”</strong> 方法在navigation stack 上 push 一个新的UIViewController）</li></ul><h2 id="navigating-是为了生成-nextflowitemsflowcontributors"><a class="markdownIt-Anchor" href="#navigating-是为了生成-nextflowitemsflowcontributors"></a> Navigating 是为了生成 NextFlowItems(FlowContributors)</h2><p>接着来说，一个 NextFlowItem(FlowContributors) 是一个持有一个 Presentable 和一个 Stepper 简单的数据结构。</p><ul><li><strong>Presentable</strong> 告诉 <strong>Coordinator</strong> 接下来你要 present 出来的是什么</li><li><strong>Stepper</strong> 告诉 <strong>Coordinator</strong> 接下来是什么东西发出 <strong>Steps</strong></li></ul><p>默认情况，所有的 UIViewController 都是 <strong>Presentable</strong>. <strong>Flows</strong> 也是 <strong>Presentable</strong>，因为有事，你想启动一个新的导航区域，该区域在他自己的 <strong>Flow</strong> 中描述，所以 RxFlow 也会把他当做可以被 present 的东西</p><p>为什么 <strong>Coordinator</strong> 要知道 <strong>Presentables</strong>？</p><p><strong>Presentable</strong> 是一个描述可以被呈现的事物的抽象类。因为 <strong>Step</strong> 不会被发出，除非他关联的 <strong>Presentable</strong> 被显示，<strong>Presentable</strong> 提供 Observables，<strong>Coordinator</strong> 会订阅这个 Observables（所以 <strong>Coordinator</strong> 会知道 <strong>Presentable</strong> 的显示状态）。因此 <strong>Presentable</strong> 没有完全显示的时候发送一个 <strong>Step</strong> 不存在任何危险。</p><p><strong>Stepper</strong> 可以是任何东西：自定义的 UIViewController，ViewModel，Presenter…… 一旦他在 <strong>Coordinator</strong> 中注册，<strong>Stepper</strong> 就可以通过他的 ”<strong>step</strong>&quot; 属性发送 <strong>Steps</strong>(step 是 RxSwift 中的 subject)。 <strong>Coordinator</strong> 会监听 <strong>Stepper</strong> 发送出来的 <strong>Steps</strong>，调用 <strong>Flow’s “navigate(to:)”</strong></p><details><summary>在 demo App 中有一个 Stepper 例子：</summary><pre><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> RxFlow</span><br><span class="line"><span class="keyword">import</span> RxSwift</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WatchedViewModel</span>: <span class="title">Stepper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> movies: [<span class="type">MovieViewModel</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">init</span>(with service: <span class="type">MoviesService</span>) &#123;</span><br><span class="line">        <span class="comment">// we can do some data refactoring in order to display</span></span><br><span class="line">        <span class="comment">// things exactly the way we want (this is the aim of a ViewModel)</span></span><br><span class="line">        <span class="keyword">self</span>.movies = service.watchedMovies().<span class="built_in">map</span>(&#123; (movie) -&gt; <span class="type">MovieViewModel</span> <span class="keyword">in</span></span><br><span class="line">            <span class="keyword">return</span> <span class="type">MovieViewModel</span>(id: movie.id,</span><br><span class="line">                                  title: movie.title,</span><br><span class="line">                                  image: movie.image)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">pick</span> <span class="params">(movieId: Int)</span></span> &#123;</span><br><span class="line">        <span class="keyword">self</span>.step.onNext(<span class="type">DemoStep</span>.moviePicked(withMovieId: movieId))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></pre></details><p>在这个例子中，当用户选择一个 movie的时候会调用 pick 函数。这个函数在 <strong>“self.step”</strong> Rx Stream 中发出一个new value。</p><p>总结导航过程：</p><ul><li><strong>navigate(to:)</strong> 函数调用时，传入一个 <strong>Step</strong> 作为参数</li><li>根据这个 <strong>Step</strong>，一些导航代码被调用（<strong>side effects</strong>）</li><li>也根据这个 <strong>Step</strong>，产生 <strong>NextFlowItems</strong> (FlowContributors)。因此，<strong>Presentables</strong> 和 <strong>Steppers</strong> 被注册进 <strong>Coordinator</strong> 中</li><li><strong>Steppers</strong> 发出新的 <strong>Steps</strong>，然后再来一次以上过程</li></ul><h2 id="为什么对与一个-flow-step-组合产生多个-nextflowitems-flowcontributors是可以的"><a class="markdownIt-Anchor" href="#为什么对与一个-flow-step-组合产生多个-nextflowitems-flowcontributors是可以的"></a> 为什么对与一个 Flow &amp; Step 组合产生多个 <strong>NextFlowItems</strong> (FlowContributors)是可以的？</h2><p>因为在某一个时间没有什么禁止一个app有多个导航。eg: tab bar上面的每一个item 多会导向一个 navigation stack。<strong>Step</strong> 触发UITabbarController 显示，将在每个navigation stack 中生成一个 NextFlowItem (FlowContributors)。</p><details><summary>你可以看一下 demo app 理解一下概念。这里有我们把一个 UITabbarController 和 2个Flows连接的一段代码。</summary><pre><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">navigationToDashboardScreen</span> <span class="params">()</span></span> -&gt; [<span class="type">NextFlowItem</span>] <span class="comment">/*(FlowContributors)*/</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> tabbarController = <span class="type">UITabBarController</span>()</span><br><span class="line">    <span class="keyword">let</span> wishlistStepper = <span class="type">WishlistStepper</span>()</span><br><span class="line">    <span class="keyword">let</span> wishListFlow = <span class="type">WishlistWarp</span>(withService: <span class="keyword">self</span>.service,</span><br><span class="line">                                    andStepper: wishlistStepper)</span><br><span class="line">    <span class="keyword">let</span> watchedFlow = <span class="type">WatchedFlow</span>(withService: <span class="keyword">self</span>.service)</span><br><span class="line"></span><br><span class="line">    <span class="type">Flows</span>.whenReady(flow1: wishListFlow, flow2: watchedFlow, block: &#123; [<span class="keyword">unowned</span> <span class="keyword">self</span>]</span><br><span class="line">    (root1: <span class="type">UINavigationController</span>, root2: <span class="type">UINavigationController</span>) <span class="keyword">in</span></span><br><span class="line">        <span class="keyword">let</span> tabBarItem1 = <span class="type">UITabBarItem</span>(title: <span class="string">"Wishlist"</span>,</span><br><span class="line">                                       image: <span class="type">UIImage</span>(named: <span class="string">"wishlist"</span>),</span><br><span class="line">                                       selectedImage: <span class="literal">nil</span>)</span><br><span class="line">        <span class="keyword">let</span> tabBarItem2 = <span class="type">UITabBarItem</span>(title: <span class="string">"Watched"</span>,</span><br><span class="line">                                       image: <span class="type">UIImage</span>(named: <span class="string">"watched"</span>),</span><br><span class="line">                                       selectedImage: <span class="literal">nil</span>)</span><br><span class="line">        root1.tabBarItem = tabBarItem1</span><br><span class="line">        root1.title = <span class="string">"Wishlist"</span></span><br><span class="line">        root2.tabBarItem = tabBarItem2</span><br><span class="line">        root2.title = <span class="string">"Watched"</span></span><br><span class="line"></span><br><span class="line">        tabbarController.setViewControllers([root1, root2], animated: <span class="literal">false</span>)</span><br><span class="line">        <span class="keyword">self</span>.rootViewController.pushViewController(tabbarController, animated: <span class="literal">true</span>)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ([<span class="type">NextFlowItem</span>(nextPresentable: wishListFlow,</span><br><span class="line">                      nextStepper: wishlistStepper),</span><br><span class="line">             <span class="type">NextFlowItem</span>(nextPresentable: watchedFlow,</span><br><span class="line">                      nextStepper: <span class="type">OneStepper</span>(withSingleStep: <span class="type">DemoStep</span>.movieList))])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></pre></details><br><p>静态方法 <strong>“Flows.whenReady()”</strong> 带着参数 <strong>Flows</strong> 启动还带有一个闭包，当 <strong>Flows</strong> 准备显示的时候回调（即当Flow的第一个屏幕被选中的时候）</p><h2 id="为什么对于flow和step的组合完全不产生nextflowitemflowcontributors为什么可以"><a class="markdownIt-Anchor" href="#为什么对于flow和step的组合完全不产生nextflowitemflowcontributors为什么可以"></a> 为什么对于Flow和Step的组合完全不产生NextFlowItem(FlowContributors)，为什么可以？</h2><p>因为导航 Flow 必须要有一个终点！eg 导航stack的最后一个屏幕不会再向下导航，他只可以 pop back。在这种情况，<strong>“navigate(to:)”</strong> 返回 <strong>NextFlowItem.noNavigation</strong>。</p><h2 id="在-flow-中会发生什么停留在-flow-中"><a class="markdownIt-Anchor" href="#在-flow-中会发生什么停留在-flow-中"></a> 在 Flow 中会发生什么……停留在 Flow 中！</h2><p>正如我们已经看到的，在同一时间有多个 <strong>Flows</strong> 被导航是可以的。eg：在 navigation stack 中的一个 screen 可以启动弹出窗口，该弹出窗口也可以包含另一个navigation stack。从 UIKit 的角度上看，UIViewController的层级结构非常重要，我们不能弄混 Coordinator 内部的层次结构。</p><p>这就是为什么当一个 <strong>Flow</strong> 没有显示（在我们的例子中，就是当第一个 navigation stack 在弹出窗口之下），Coordinator将忽视 <strong>Flow</strong> 中可能发出来的 <strong>Steps</strong>。</p><p>从更一般的角度来看，在 <strong>Flow</strong> 上下文中发出的 <strong>Steps</strong> 只能在该 <strong>Flow</strong> 上下文中解释（它们不能被其他 <strong>Flow</strong> 捕获）。</p><h2 id="依赖注入变得容易"><a class="markdownIt-Anchor" href="#依赖注入变得容易"></a> 依赖注入变得容易</h2><p>DI 是RxFlow的一个主要目标。基本上，依赖注入可以通过将某种实现（服务，管理器等）作为参数传递给初始化程序或方法来完成（也可以通过属性来完成）。</p><p>在 <strong>RxFlow</strong> 中, 开发人员负责实例化UIViewControllers，ViewModels，Presenter等,这是一个注入你所需代码的绝佳机会。</p><details><summary>下面是ViewModel中依赖项注入的示例。</summary><pre><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> RxFlow</span><br><span class="line"><span class="keyword">import</span> UIKit</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WatchedFlow</span>: <span class="title">Flow</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">let</span> service: <span class="type">MoviesService</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">init</span>(withService service: <span class="type">MoviesService</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.service = service</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">navigateToMovieListScreen</span> <span class="params">()</span></span> -&gt; [<span class="type">NextFlowItem</span>] <span class="comment">/*(FlowContributors)*/</span> &#123;</span><br><span class="line">        <span class="comment">// inject Service into ViewModel</span></span><br><span class="line">        <span class="keyword">let</span> viewModel = <span class="type">WatchedViewModel</span>(with: <span class="keyword">self</span>.service)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// injecy ViewMNodel into UIViewController</span></span><br><span class="line">        <span class="keyword">let</span> viewController = <span class="type">WatchedViewController</span>.instantiate(with: viewModel)</span><br><span class="line"></span><br><span class="line">        viewController.title = <span class="string">"Watched"</span></span><br><span class="line">        <span class="keyword">self</span>.rootViewController.pushViewController(viewController, animated: <span class="literal">true</span>)</span><br><span class="line">        <span class="keyword">return</span> [<span class="type">NextFlowItem</span>(nextPresentable: viewController, nextStepper: viewModel)]</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></pre></details><h2 id="如何引导导航过程"><a class="markdownIt-Anchor" href="#如何引导导航过程"></a> 如何引导导航过程</h2><p>既然已经知道如何将事物组合在一起，将 <strong>Flows</strong> 和 <strong>Steps</strong> 混合在一起以触发导航动作并产生NextFlowItems (FlowContributors)，剩下要做的一件事：在应用程序启动时引导导航过程。</p><p>一切都在AppDelegate中发生，并且会发现这非常简单：</p><ul><li>实例化 <strong>Coordinator</strong></li><li>实例化要导航的第一个 <strong>Flow</strong></li><li>让 <strong>Coordinator</strong> 使用第一个 <strong>Step</strong> 来调度 <strong>Flow</strong></li><li>当第一个 <strong>Flow</strong> 准本好了，把他的 root 配置成 Window的 rootViewController</li></ul><details><summary>在 demo App 中：</summary><pre><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> UIKit</span><br><span class="line"><span class="keyword">import</span> RxFlow</span><br><span class="line"><span class="keyword">import</span> RxSwift</span><br><span class="line"><span class="keyword">import</span> RxCocoa</span><br><span class="line"></span><br><span class="line"><span class="meta">@UIApplicationMain</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AppDelegate</span>: <span class="title">UIResponder</span>, <span class="title">UIApplicationDelegate</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> disposeBag = <span class="type">DisposeBag</span>()</span><br><span class="line">    <span class="keyword">var</span> window: <span class="type">UIWindow?</span></span><br><span class="line">    <span class="keyword">var</span> coordinator = <span class="type">Coordinator</span>()</span><br><span class="line">    <span class="keyword">let</span> movieService = <span class="type">MoviesService</span>()</span><br><span class="line">    <span class="built_in">lazy</span> <span class="keyword">var</span> mainFlow = &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">MainFlow</span>(with: <span class="keyword">self</span>.movieService)</span><br><span class="line">    &#125;()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">application</span><span class="params">(<span class="number">_</span> application: UIApplication,</span></span></span><br><span class="line"><span class="function"><span class="params">                     didFinishWithOptions options: [UIApplicationLaunchOptionsKey: <span class="keyword">Any</span>]?)</span></span></span><br><span class="line">                     -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> window = <span class="keyword">self</span>.window <span class="keyword">else</span> &#123; <span class="keyword">return</span> <span class="literal">false</span> &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">Flows</span>.whenReady(flow: mainFlow, block: &#123; [<span class="keyword">unowned</span> window] (root) <span class="keyword">in</span></span><br><span class="line">            window.rootViewController = root</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        coordinator.coordinate(flow: mainFlow,</span><br><span class="line">                               withStepper: <span class="type">OneStepper</span>(withSingleStep: <span class="type">DemoStep</span>.apiKey))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></pre></details><h2 id="奖励"><a class="markdownIt-Anchor" href="#奖励"></a> 奖励</h2><p>协调器有两个响应式扩展：willNavigate和didNavigate。例如，你可以在AppDelegate中订阅它们。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">coordinator.rx.didNavigate.subscribe(onNext: &#123; (flow, step) <span class="keyword">in</span></span><br><span class="line">    <span class="built_in">print</span> (<span class="string">"did navigate to flow=\(flow) and step=\(step)"</span>)</span><br><span class="line">&#125;).disposed</span><br></pre></td></tr></table></figure><details><summary>将会生成如下 log：</summary><pre><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">did navigate flow=<span class="type">RxFlowDemo</span>.<span class="type">MainFlow</span> step=apiKeyIsComplete</span><br><span class="line">did navigate flow=<span class="type">RxFlowDemo</span>.<span class="type">WishlistFlow</span> step=movieList</span><br><span class="line">did navigate flow=<span class="type">RxFlowDemo</span>.<span class="type">WatchedFlow</span> step=movieList</span><br><span class="line">did navigate flow=<span class="type">RxFlowDemo</span>.<span class="type">WishlistFlow</span> step=moviePicked(<span class="number">23452</span>)</span><br><span class="line">did navigate flow=<span class="type">RxFlowDemo</span>.<span class="type">WishlistFlow</span> step=castPicked(<span class="number">2</span>)</span><br><span class="line">did navigate flow=<span class="type">RxFlowDemo</span>.<span class="type">WatchedFlow</span> step=moviePicked(<span class="number">55423</span>)</span><br><span class="line">did navigate flow=<span class="type">RxFlowDemo</span>.<span class="type">WatchedFlow</span> step=castPicked(<span class="number">5</span>)</span><br><span class="line">did navigate flow=<span class="type">RxFlowDemo</span>.<span class="type">WishlistFlow</span> step=settings</span><br><span class="line">did navigate flow=<span class="type">RxFlowDemo</span>.<span class="type">SettingsFlow</span> step=settings</span><br><span class="line">did navigate flow=<span class="type">RxFlowDemo</span>.<span class="type">SettingsFlow</span> step=apiKey</span><br><span class="line">did navigate flow=<span class="type">RxFlowDemo</span>.<span class="type">SettingsFlow</span> step=about</span><br><span class="line">did navigate flow=<span class="type">RxFlowDemo</span>.<span class="type">SettingsFlow</span> step=apiKey</span><br><span class="line">did navigate flow=<span class="type">RxFlowDemo</span>.<span class="type">SettingsFlow</span> step=settingsDone</span><br></pre></td></tr></table></figure></pre></details><p>日志对于分析和debug 程序很有帮助</p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> 第三方框架 </category>
          
          <category> RxSwift </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 翻译 </tag>
            
            <tag> RxSwift </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RxFlow 1: 原理</title>
      <link href="/2018/01/21/RxSwfit+RAC/RxFlow-1-%E5%8E%9F%E7%90%86/"/>
      <url>/2018/01/21/RxSwfit+RAC/RxFlow-1-%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Jun 02 2020 17:35:52 GMT+0800 (CST) --><a id="more"></a><p><img src="https://twittemb.github.io/uploads/RxFlow_Logo.png" alt="-"><br><a href="https://twittemb.github.io/swift/coordinator/rxswift/rxflow/reactive%20programming/2017/11/08/rxflow-part-1-in-theory/" target="_blank" rel="noopener">原文RxFlow Part 1: In Theory</a></p><p>这篇是该系列文章的第一篇，该篇也是该系列文章的核心。我会介绍 <code>RxFlow</code> ：它是一个我基于 iOS App上设计实现的响应式流中介器(Reactive Flow Coordinator)</p><h2 id="事实"><a class="markdownIt-Anchor" href="#事实"></a> 事实</h2><p>关于iOS应用程序中的导航，有两种选择：</p><ul><li>使用 Apple Xcode 提供的内建机制：storyboards 和 segues</li><li>用代码实现一个自定义机制</li></ul><p>这两种解决方案的缺点：</p><ul><li>内建机制：navigation 相对来说静止，storyboards 相对来说过于庞大。导航代码污染了 UIViewControllers</li><li>自定义机制：代码可能难以设置，也可能很复杂，具体取决于所选的设计模式（Router，Coordinator）</li></ul><h4 id="rxflow-旨在"><a class="markdownIt-Anchor" href="#rxflow-旨在"></a> RxFlow 旨在</h4><ul><li>促进将 storyboards 切割成原子单元，以实现UIViewControllers的协作和可重用性</li><li>允许 UIViewController 根据导航上下文以不同方式呈现</li><li>简化依赖注入的实现</li><li>从UIViewControllers删除导航机制</li><li>促进响应式编程</li><li>在处理大多数导航案例的同时，以声明的方式表示导航（以声明式的方式处理导航过程）</li><li>促进将应用程序切成逻辑导航块</li></ul><h2 id="从-storyboard-到-coordinator-模式"><a class="markdownIt-Anchor" href="#从-storyboard-到-coordinator-模式"></a> 从 Storyboard 到 Coordinator 模式</h2><p>作为 iOS 开发人员，随着开发能力提高（Android或者web），我经常遇到关于导航的同样疑问。对于其他所有概念问题，有很多模式可以解决常见的体系结构问题和关注点分离需求（MVC,MVP,MVVM,VIPER)</p><p>但是，一旦设计导航，我就犯愁了：</p><ul><li>如何在Storyboard / Segues中使用依赖项注入？</li><li>如何控制应用程序的流程？</li><li>如何摆脱UIViewControllers中的导航样板代码？</li></ul><p>随着时间的流逝，我对iOS应用程序从 MVC模式带一个Storyboard 到 MVC模式待多个 Storyboards，最后到 MVVM模式 + Flow Coordinator —— 目前来说他是我们可以叫上名字的最佳实践了。MVVM模式 + Flow Coordinator 好是因为我们可以进行依赖注入，UIViewController 可复用行，可测试性。我有机会将此模式应用于生产中的大型复杂应用程序。但是最后，仍然有一些问题困扰着我：</p><ul><li>我总是不得不一次次地写 Coordinator 模式</li><li>使用大量 delegate 模式，让 ViewModels 得到 Coordinator 回调信息</li><li>一开始我看 Redux 模式，尤其是导航状态机。我们可以有个全局导航状态，使用 RxSwift Observables暴露出来，然后监听状态驱动导航。唯一困扰我的是导航状态的唯一性，以及它可能具有不受控制的责任（以及它可以存储的海量数据）</li></ul><p>出现了这样的一个想法：导航只是一种状态的反射，这种状态可以一步步修改。</p><p>一个状态，在整个应用程序结构中传播，不是存储在单个位置中，而是由观察者统一起来，可以对它作出反应并因此驱动导航。文章之后，这些分散在应用程序中的小状态称为“Steps”，观察者称为“Coordinator”。</p><p>RxFlow 来自经验总结，他解决了传统中仍然存在的两个主要问题;Coordinator pattern:</p><ul><li>开发人员不必再编写Coordinator，他只需要声明导航及其所针对的状态</li><li>不需要 delegate，因为 state 是由 Loom 监听 RxSwift Observable</li></ul><h2 id="关键原则"><a class="markdownIt-Anchor" href="#关键原则"></a> 关键原则</h2><p>要了解有关 Coordinator 模式的更多信息，我建议你开一下这篇文章 <a href="http://khanlou.com/2015/10/coordinators-redux/" target="_blank" rel="noopener">Coordinator Redux</a></p><p>尽管这是一个非常好的架构，但是Coordinator模式也有一些缺点：</p><ul><li>每次引导应用程序时都必须编写协调机制</li><li>因为要使用 delegate 模式来处理与 Coordinator 之间通信，所以会有很多样板代码</li></ul><p>RxFlow 是一个以响应式方式实现的 Coordinator 模式，它有 Coordinator 模式架构中的所有重要功能，但进行了一些改进：</p><ul><li>使导航更具声明性</li><li>提供一个内置的协调器，用于处理你声明的导航流</li><li>使用响应式编程处理和 Coordinator 通讯的问题</li></ul><h4 id="必须熟悉6个术语才能理解rxflow"><a class="markdownIt-Anchor" href="#必须熟悉6个术语才能理解rxflow"></a> 必须熟悉6个术语才能理解RxFlow</h4><ul><li>Flow：每个 Flow 都在应用程序中定义了一个导航区域。这是你声明导航动作的地方</li><li>Step：每个 Step 在 App 中是一个导航状态。Flows 和 Steps 的组合描述了所有可能的导航操作。Step 甚至可以内嵌值（eg：Ids，URLs…）将会传播到 Flows 中声明的屏幕</li><li>Stepper：它可以是任何发出 Steps 的东西，Steppers 负责触发 Flows中的每个导航过程。</li><li>Presentable：它是可以呈现的事物的抽象类（基本上是UIViewController和Flow是可呈现的）。Presentables 提供响应式 Observables， Coordinator 将以兼容 UIKit 的方式，订阅这个 Observables 来控制Flow的 Steps</li><li>Flowable：它是一个结合了Presentable和Stepper的简单数据结构。它告诉 Coordinator 下一步将发生什么，这将在您的响应式机制中产生新的 Steps</li><li>Coordinator：一旦开发人员定义完 代表导航可能性的流程和步骤的组合，Coordinator 的工作就是以一致的方式混合这些组合。</li></ul><p>第一篇文章只是说明框架的 概念理论，接下的文章将会从源码的角度讨论更多 有关 RxFlow 的技术点。</p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> 第三方框架 </category>
          
          <category> RxSwift </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 翻译 </tag>
            
            <tag> RxSwift </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OC 对象分析</title>
      <link href="/2018/01/09/deep%20analyse/OC-%E5%AF%B9%E8%B1%A1%E5%88%86%E6%9E%90/"/>
      <url>/2018/01/09/deep%20analyse/OC-%E5%AF%B9%E8%B1%A1%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Jun 02 2020 17:35:52 GMT+0800 (CST) --><p>引用源码：<a href="https://opensource.apple.com/tarballs/objc4/" target="_blank" rel="noopener">objc4</a></p><p><img src="/img/oc_object.jpg" alt="oc对象结构"></p><p>思考：问自己的问题</p><ol><li>实例对象，类对象，元类对象之间的关系</li><li>对象的属性&amp;方法是怎么传的</li><li>对象方法是如何查询的</li><li>oc 的消息机制是什么样的</li><li>这些理论可以应用到什么地方？</li></ol><h2 id="objective-c中的对象有哪些"><a class="markdownIt-Anchor" href="#objective-c中的对象有哪些"></a> Objective-C中的对象有哪些</h2><p>Objective-C中万物接对象，对象主要分为3种</p><ul><li>instance对象</li><li>class对象</li><li>meta-class对象</li></ul><h2 id="objc_object-源码结构"><a class="markdownIt-Anchor" href="#objc_object-源码结构"></a> objc_object 源码结构</h2><p><img src="/img/objc_object_struct.jpg" alt="objc_object"></p><h2 id="objc_class-源码结构"><a class="markdownIt-Anchor" href="#objc_class-源码结构"></a> objc_class 源码结构</h2><p><img src="/img/objc_class_struct.jpg" alt="objc_class"></p><p>class 和 meta-class 的结构相同</p><h3 id="isa-和-superclass-指针"><a class="markdownIt-Anchor" href="#isa-和-superclass-指针"></a> isa 和 superclass 指针</h3><p><img src="/img/isa_superclass.jpg" alt=""></p><p>isa 指向生产他这个对象的对象：</p><ol><li>instance 对象的isa 是class 对象</li><li>class 对象的 isa 是 meta-class 对象</li><li>meta-class 的 isa 是 root-metaclass 对象（所有元类的 isa 都指向他）</li></ol><p><img src="/img/message-searching.jpg" alt=""></p><h3 id="class_rw_t-和-class_ro_t"><a class="markdownIt-Anchor" href="#class_rw_t-和-class_ro_t"></a> class_rw_t 和 class_ro_t</h3><p>见上图 👆</p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> iOS Programming </category>
          
          <category> objc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> 底层 </tag>
            
            <tag> objc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Meta Class</title>
      <link href="/2018/01/03/deep%20analyse/Meta-Class/"/>
      <url>/2018/01/03/deep%20analyse/Meta-Class/</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Jun 02 2020 17:35:52 GMT+0800 (CST) --><a id="more"></a><p>smallTalk 中 Metaclass 的 7个要素</p><ol><li>object 是 class 的实例</li><li>class 最终继承自 object</li><li>class 是 metaclass 的实例</li><li>metaclass 和 class 的继承是平行的</li><li>metaclass 继承自 class 和 behavior</li><li>metaclass 是 Metaclass 的实例</li><li>Metaclass 的 metaclass 是 Metaclass 的实例</li></ol><h2 id="object-是-class-的实例"><a class="markdownIt-Anchor" href="#object-是-class-的实例"></a> object 是 class 的实例</h2><p><img src="/img/object_is_class.jpeg" alt="object 是 class 的实例"></p><h2 id="每个-class-都继承自-object"><a class="markdownIt-Anchor" href="#每个-class-都继承自-object"></a> 每个 class 都继承自 Object</h2><p>实例对象的 class 都继承自 Object<br><img src="/img/classInheritsObject.jpeg" alt="objc_class: objc_object"></p><h3 id="is-a-的含义"><a class="markdownIt-Anchor" href="#is-a-的含义"></a> is-a 的含义</h3><p>当 Object 接收 msg 的时候，在他的 class 对象方法列表中找，一直沿着 superclasses ，知道 Object 对象查找这个消息<br><img src="/img/is-a.jpeg" alt="is-a用于查找消息"></p><h3 id="object-的责任"><a class="markdownIt-Anchor" href="#object-的责任"></a> Object 的责任</h3><ol><li>描述 Object 的公共行为<ul><li>error-handling, halting …</li></ul></li><li>所有类最终都继承自 Object</li></ol><h2 id="class-是-metaclass-的实例"><a class="markdownIt-Anchor" href="#class-是-metaclass-的实例"></a> class 是 metaclass 的实例</h2><p>Class 也是对象：每个 class A 是他的 metaclass 的唯一实例，叫做 A class<br><img src="/img/metaclass.jpeg" alt=""></p><h3 id="metaclasses-是隐式的"><a class="markdownIt-Anchor" href="#metaclasses-是隐式的"></a> metaclasses 是隐式的</h3><ol><li>当创建 class 的是时候，会隐式创建 Metaclass</li><li>没有共享的 metaclass(class 和 metaclass 是一一对应的)</li></ol><h2 id="metaclass-和-class-的继承是平行的"><a class="markdownIt-Anchor" href="#metaclass-和-class-的继承是平行的"></a> metaclass 和 class 的继承是平行的</h2><p>class 和 object 的一致性</p><ol><li><strong>object 有的东西，class 也有</strong></li><li><strong>同样的方法查询策略</strong><ol><li>object 在class 的 method 字典中查找</li><li>class 在 metaclass 的method 字典中查找</li></ol></li></ol><h2 id="metaclass-继承自-class-和-behavior"><a class="markdownIt-Anchor" href="#metaclass-继承自-class-和-behavior"></a> metaclass 继承自 class 和 behavior</h2><h2 id="metaclass-是-metaclass-的实例"><a class="markdownIt-Anchor" href="#metaclass-是-metaclass-的实例"></a> metaclass 是 Metaclass 的实例</h2><h2 id="metaclass-的-metaclass-是-metaclass-的实例"><a class="markdownIt-Anchor" href="#metaclass-的-metaclass-是-metaclass-的实例"></a> Metaclass 的 metaclass 是 Metaclass 的实例</h2><p><img src="/img/metaclass_relation.jpeg" alt=""></p><h2 id="为什么要有-metaclass"><a class="markdownIt-Anchor" href="#为什么要有-metaclass"></a> 为什么要有 MetaClass</h2><p>objc_class: objc_object, 所以object 有的东西 class 也有</p><ol><li>object 是 class 的实例，class 是 metaclass 的实例</li><li>object 方法，属性，协议方法都保存在 class 对象中；class方法，属性，协议方法都保存在 metaclass 对象中</li><li>class 是 object 的工厂，metaclass 是class 的工厂</li><li>因为class 继承自 object 所以消息查找方式相同</li></ol><p>如果没有 metaclass 呢？</p><ol><li>smalltalk-76，类的类都是 <code>Class</code> ，该类实现了任何类都需要的方法-eg. new方法。如果想添加一个类方法，必须添加到 <code>Class</code></li><li>objc_msgSend(void /* id self, SEL op, … */) 复用消息通道，类方法也可以放在Class里，但发送消息时，需要增加一个参数</li></ol><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> iOS Programming </category>
          
          <category> objc </category>
          
          <category> runtime </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> 底层 </tag>
            
            <tag> objc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>flexbox model</title>
      <link href="/2017/12/09/flexbox-model/"/>
      <url>/2017/12/09/flexbox-model/</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Jun 02 2020 17:35:51 GMT+0800 (CST) --><a id="more"></a><p><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/align-content" target="_blank" rel="noopener">flex-container 属性demo</a><br><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/flex" target="_blank" rel="noopener">flex-item 属性demo</a></p><h2 id="基础术语"><a class="markdownIt-Anchor" href="#基础术语"></a> 基础&amp;术语</h2><div align="center"><img src="/img/flex_terms.jpeg" alt="flex_terms" style="width:300px;height:180px"></div><ul><li>main axis - flex container 主轴，<code>flex-items</code> 沿着这个轴布局。具体哪个方向取决于 <code>flex-direction</code> 属性 (see below).</li><li>main-start | main-end - <code>flex-items</code> 在 flex-container 中从 main-start 到 main-end 布局.</li><li>main size - flex-item <code>main-axis</code> 方向的长度</li><li>cross axis - 垂直于 <code>main-axis</code> 的轴。即垂直于 <code>flex-items</code> 排列布局方向的轴。</li><li>cross-start | cross-end - <code>Flex-item</code> 布局垂直方向布局从 cross-start 到 cross-end.</li><li>cross size - flex-item <code>cross-axis</code> 方向长度</li></ul><h2 id="属性"><a class="markdownIt-Anchor" href="#属性"></a> 属性</h2><table><thead><tr><th>属性</th><th>描述</th><th>可取值</th></tr></thead><tbody><tr><td>display</td><td>指定 HTML 元素盒子类型</td><td>flex,inline-flex</td></tr><tr><td>flex-direction</td><td>指定了弹性容器中子元素的排列方式</td><td>row,column</td></tr><tr><td>flex-wrap</td><td>设置弹性盒子的子元素超出父容器时是否换行</td><td>wrap,nowrap,wrap-reverse</td></tr><tr><td>justify-content</td><td>设置弹性盒子元素在主轴（横轴）方向上的对齐方式</td><td>flex-start,flex-end,center,space-around,space-between</td></tr><tr><td>align-self</td><td>在弹性子元素上使用覆盖容器的 align-items 属性</td><td>flex-start,flex-end,center</td></tr><tr><td>align-items</td><td>设置弹性盒子元素在侧轴（纵轴）方向上的对齐方式</td><td>flex-start ,flex-end,center,stretch,baseline</td></tr><tr><td>align-content</td><td>修改 flex-wrap 属性的行为，类似align-items, 但不是设置子元素对齐，而是设置行对齐</td><td>flex-start,flex-end,center,space-around,space-between,stretch</td></tr><tr><td>order</td><td>设置弹性盒子的子元素排列顺序</td><td>integer</td></tr><tr><td>flex</td><td>设置弹性盒子的子元素如何分配空间</td><td>integer</td></tr><tr><td>flex-basis</td><td>指定 flex 元素在主轴方向上的初始大小。如果不使用 box-sizing 改变盒模型的话，那么这个属性就决定了 flex 元素的内容盒（content-box）的尺寸。</td><td>integer</td></tr><tr><td>flex-grow</td><td>元素的扩大比率</td><td>integer</td></tr><tr><td>flex-shrink</td><td>元素的收缩比率</td><td>integer</td></tr></tbody></table><h3 id="父级的属性flex-container"><a class="markdownIt-Anchor" href="#父级的属性flex-container"></a> 父级的属性–flex-container</h3><h4 id="flex-direction"><a class="markdownIt-Anchor" href="#flex-direction"></a> flex-direction</h4><div align="left"><img src="/img/flex-direction.jpeg" alt="direction" style="width:200px;height:83"></div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">flex-direction</span>: row | row-reverse | column | column-reverse;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="flex-wrap"><a class="markdownIt-Anchor" href="#flex-wrap"></a> flex-wrap</h4><div align="left"><img src="/img/flex-wrap.jpeg" alt="runloop" style="width:200px;height:93"></div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">  <span class="attribute">flex-wrap</span>: nowrap | wrap | wrap-reverse;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>nowrap (default): 所有 items 都在一行显示</li><li>wrap: flex items 将从上到下多行显示。</li><li>wrap-reverse: 将从下到上多行显示。</li></ul><p><a href="https://codepen.io/team/css-tricks/pen/1ea1ef35d942d0041b0467b4d39888d3/" target="_blank" rel="noopener">flex-wrap 可视化demo</a><br>使用 demo的时候调整浏览器大小</p><h4 id="justify-content"><a class="markdownIt-Anchor" href="#justify-content"></a> justify-content</h4><p>main-axis 方向 flex-items 布局方式。</p><div align="left"><img src="/img/flex-justify-content.jpeg" alt="runloop" style="width:150px;height:240"></div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">justify-content</span>: flex-start | flex-end | center | space-between | space-around | space-evenly | start | end | left | right ... + safe | unsafe;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/justify-content" target="_blank" rel="noopener">justify-content: demo</a></p><h4 id="align-items"><a class="markdownIt-Anchor" href="#align-items"></a> align-items</h4><p>cross-axis 方向 flex-items 布局方式</p><div align="left"><img src="/img/flex-align-items.jpeg" alt="runloop" style="width:156px;height:200"></div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">align-items</span>: stretch | flex-start | flex-end | center | baseline | first baseline | last baseline | start | end | self-start | self-end + ... safe | unsafe;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="align-content"><a class="markdownIt-Anchor" href="#align-content"></a> align-content</h4><p>类似align-items, 但不是设置子元素对齐，而是设置行对齐</p><div align="left"><img src="/img/flex-align-content.jpeg" alt="content" style="width:156px;height:190"></div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">align-content</span>: flex-start | flex-end | center | space-between | space-around | space-evenly | stretch | start | end | baseline | first baseline | last baseline + ... safe | unsafe;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="次级属性flex-items"><a class="markdownIt-Anchor" href="#次级属性flex-items"></a> 次级属性(flex items)</h3><h4 id="order"><a class="markdownIt-Anchor" href="#order"></a> order</h4><p>元素排列顺序</p><div align="left"><img src="/img/flex-order.jpeg" alt="order" style="width:156px;height:190"></div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">order</span>: &lt;integer&gt;; <span class="comment">/* default is 0 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="flex-grow"><a class="markdownIt-Anchor" href="#flex-grow"></a> flex-grow</h4><p>元素的扩展比率</p><div align="left"><img src="/img/flex-grow.jpeg" alt="content" style="width:156px;height:60"></div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">flex-grow</span>: &lt;number&gt;; <span class="comment">/* default 0 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="flex-shrink"><a class="markdownIt-Anchor" href="#flex-shrink"></a> flex-shrink</h4><p>元素的收缩比率</p><h4 id="flex-basis"><a class="markdownIt-Anchor" href="#flex-basis"></a> flex-basis</h4><p>flex-basis 指定了 flex 元素在主轴方向上的初始大小。如果不使用 box-sizing 改变盒模型的话，那么这个属性就决定了 flex 元素的内容盒（content-box）的尺寸。</p><h4 id="align-self"><a class="markdownIt-Anchor" href="#align-self"></a> align-self</h4><p>在弹性子元素上使用。覆盖容器的 align-items 属性。</p><div align="left"><img src="/img/flex-align-self.jpeg" alt="content" style="width:156px;height:77"></div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">align-self</span>: auto | flex-start | flex-end | center | baseline | stretch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>引用：</p><blockquote><p><a href="https://www.w3cschool.cn/css3/2h6g5xoy.html" target="_blank" rel="noopener">CSS3 弹性盒子(Flex Box)</a><br><a href="https://css-tricks.com/snippets/css/a-guide-to-flexbox/" target="_blank" rel="noopener">A Complete Guide to Flexbox</a><br><a href="https://codebond.co/tutorial/css/complete-guide-to-flexbox" target="_blank" rel="noopener">Complete Guide to Flexbox</a></p></blockquote><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> 设计思想 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计思想 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TCP/IP</title>
      <link href="/2017/11/18/TCP-IP/"/>
      <url>/2017/11/18/TCP-IP/</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Jun 02 2020 17:35:51 GMT+0800 (CST) --><a id="more"></a><h2 id="tcpip"><a class="markdownIt-Anchor" href="#tcpip"></a> TCP/IP</h2><h3 id="tcpip-三次握手"><a class="markdownIt-Anchor" href="#tcpip-三次握手"></a> TCP/IP 三次握手</h3><p>http 是基于 TCP/IP 协议，双全工</p><p><img src="/img/TCP-IP-Connection.JPG" alt="tcp/ip 三次握手，四次挥手"></p><ul><li><p>为什么要3次握手？</p><ul><li>最简单的回答，后一个次握手都是确定前一次握手的接受成功！除了第一次是有 seq=x，其他每次握手都要带上 ack=x+1，确定上一次的 seq接受成功</li><li>这也说明最后一次握手永远是否能够接受都是无法保障的，但是 &gt;= 三次握手基本满足需求，无需再浪费资源</li></ul></li><li><p>为什么要4次挥手？三次就可以满足双方都知道结果了呀？</p><ul><li>分手要双方都提出，我要分手，每一方提出都要对方确认一下！所以有了一对 (fin=x – ack=x+1), (fin=y – ack=y+1)</li><li>fin=x 是提出分手，编号x，ack=x+1 是确定受到 fin=x报文数据，然后我也要发一次我要分手</li><li>为什么要双方都要主动发送 fin 呢？因为一方发送 fin 以后，另一发有可能还有没有发完的数据，确认双方都是没有事要做了</li></ul></li></ul><h3 id="wireshark-使用验证-tcpip-连接"><a class="markdownIt-Anchor" href="#wireshark-使用验证-tcpip-连接"></a> WireShark 使用验证 TCP/IP 连接</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nc -l 12345        //监听</span><br><span class="line">nc 127.0.0.1 12345 //建立连接</span><br></pre></td></tr></table></figure><p>WireShark, Loopback:lo0</p><p><img src="/img/tcp-ip-wireshark1.jpeg" alt="tcp/ip wire-shark1 建立连接三次握手"></p><p><img src="/img/tcp-ip-wireshark2.jpeg" alt="tcp/ip wire-shark2 全流程"></p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> 计算机基础知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Category分析</title>
      <link href="/2017/11/17/deep%20analyse/Category%E5%88%86%E6%9E%90/"/>
      <url>/2017/11/17/deep%20analyse/Category%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Jun 02 2020 17:35:52 GMT+0800 (CST) --><a id="more"></a><p>当给类添加方法的时候，一般会想到使用 category，给类添加方法</p><p>oc 的在runtime 的时候</p><h2 id="分类是如何加载的"><a class="markdownIt-Anchor" href="#分类是如何加载的"></a> 分类是如何加载的</h2><p>查看 objc 源码调用过程</p><ol><li><p><a href="http://objc-os.mm" target="_blank" rel="noopener">objc-os.mm</a><br>_objc_init<br>map_images<br>map_images_nolock</p></li><li><p><a href="http://objc-runtime-new.mm" target="_blank" rel="noopener">objc-runtime-new.mm</a><br>_read_images<br>remethodizeClass<br>attachCategories<br>attachLists<br>realloc、memmove、 memcpy</p></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">category_t</span> &#123;</span></span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span> *name;</span><br><span class="line">  <span class="keyword">classref_t</span> cls;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">method_list_t</span> *<span class="title">instanceMethods</span>;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">method_list_t</span> *<span class="title">classMethods</span>;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">protocol_list_t</span> *<span class="title">protocols</span>;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">property_list_t</span> *<span class="title">instanceProperties</span>;</span></span><br><span class="line">  <span class="comment">// Fields below this point are not always present on disk.</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">property_list_t</span> *_<span class="title">classProperties</span>;</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">method_list_t</span> *methodsForMeta(<span class="keyword">bool</span> isMeta) &#123;</span><br><span class="line">    <span class="keyword">if</span> (isMeta) <span class="keyword">return</span> classMethods;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> instanceMethods;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">property_list_t</span> *propertiesForMeta(<span class="keyword">bool</span> isMeta, struct header_info *hi);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> iOS Programming </category>
          
          <category> objc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> 底层 </tag>
            
            <tag> objc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CAShapeLayer 画图</title>
      <link href="/2017/10/27/UI%20%E7%9B%B8%E5%85%B3/CAShapeLayer-%E7%94%BB%E5%9B%BE/"/>
      <url>/2017/10/27/UI%20%E7%9B%B8%E5%85%B3/CAShapeLayer-%E7%94%BB%E5%9B%BE/</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Jun 02 2020 17:35:52 GMT+0800 (CST) --><a id="more"></a><h2 id="为什么要有-shapelayer"><a class="markdownIt-Anchor" href="#为什么要有-shapelayer"></a> 为什么要有 ShapeLayer？</h2><p>因为平常开发中 主要是 矩形的绘制，很少用到其他多边形的（一般都用图片代替）<br>使用 ShapeLayer，通过 path 来定义自己的图形<br>嗯 shapelayer 就是一个 绘制 path 的工具</p><p>也可以用 <code>Core Graphics</code> 直接向原始的CALyer的内容中绘制路径<br>CAShapeLayer是一个通过 <code>矢量</code> 图形而不是 <code>bitmap</code> 来绘制的图层CALayer的子类。</p><p>相比直下，使用CAShapeLayer有以下一些优点：</p><ul><li>渲染快速: CAShapeLayer使用了硬件加速，绘制同一图形会比用Core Graphics快很多</li><li>高效使用内存: 一个CAShapeLayer不需要像普通CALayer一样创建一个寄宿图形，所以无论有多大，都不会占用太多的内存</li><li>不会被图层边界剪裁掉: 一个CAShapeLayer可以在边界之外绘制:你的图层路径不会像在使用Core Graphics的普通CALayer一样被剪裁掉</li><li>不会出现像素化: 当你给CAShapeLayer做3D变换时，它不像一个有寄宿图的普通图层一样变得像素化</li></ul><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> iOS Programming </category>
          
          <category> UI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> 性能 </tag>
            
            <tag> UI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自动布局包裹视图</title>
      <link href="/2017/09/21/%E8%87%AA%E5%8A%A8%E5%B8%83%E5%B1%80%E5%8C%85%E8%A3%B9%E8%A7%86%E5%9B%BE/"/>
      <url>/2017/09/21/%E8%87%AA%E5%8A%A8%E5%B8%83%E5%B1%80%E5%8C%85%E8%A3%B9%E8%A7%86%E5%9B%BE/</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Jun 02 2020 17:35:52 GMT+0800 (CST) --><a id="more"></a><p><a href="http://devetc.org/code/2014/07/07/auto-layout-and-views-that-wrap.html" target="_blank" rel="noopener">原文 Auto Layout and Views that Wrap</a><br>理解包裹文本和其他流动布局。<br>在视屏中，盒子里的面，当container resized 的时候，UILabel (或者 Mac 系统里面的 NSTextField) 包裹的文字的行为像这样：</p><p><a href="http://devetc.org/assets/2014-07-07-auto-layout-and-views-that-wrap/label-default-resize.webm" target="_blank" rel="noopener">video1</a></p><p>这篇文章将会讲解，当 container resized 的时候 UILabel 的行为会是这样的：<br><a href="http://devetc.org/assets/2014-07-07-auto-layout-and-views-that-wrap/label-dynamic-preferred-max-layout-width.webm" target="_blank" rel="noopener">video2</a></p><h1 id="为什么没有这样的效果"><a class="markdownIt-Anchor" href="#为什么没有这样的效果"></a> 为什么没有这样的效果</h1><p>在自动布局中，view 有一个“固有尺寸”（intrinsic content size）的概念：宽和高（都有，或有其一，或都没有）刚好满足view 的大小。布局系统根据view的 “compression resistance”的 优先级，至少会给view 一个足够大的空间。<br>布局系统分别对待 width 和 height。<br>举例：如果一个 segmented control’s的文本很长以至于超出包裹view的宽度，它的固有高度仍然尝试满足 在view的高度。<br>这种效果对于已经定义size的 view 非常好，such as buttons, sliders, and small labels.<br>但是包裹的view 会有十分复杂的行为：他们的 width 和 height 相互关联，系统有的时候会让固有 width 照顾固有 height，反过来也是。<br>这种情况不能单纯的用 布局限制来解释<br><strong>证明:</strong> 思考一个简化模型，忽略word 截断和复杂的文本内容。我们想要一个有固定面积的 view,<br>i.e. <em>width</em> × <em>height</em> = <em>constant</em>. 布局限制一定要这也样的格式：<br><em>attribute1</em> = <em>multiplier</em> × <em>attribute2</em>+ <em>constant</em> (为了让系统可以提供确定的执行效果). 没有啥方式使用第二个等式来表示第一个等式。因此也没有啥方式描述布局限制包裹的 view。<br>我们必须使用布局引擎计算出来的 width 和 height 作为自由变量。<br>最简单的方式–也是apple 使用的一种–是固定 width，然后让 height 自适应（取决label 的内容大小）</p><h1 id="推断最大-布局-宽度"><a class="markdownIt-Anchor" href="#推断最大-布局-宽度"></a> 推断最大 布局 宽度</h1><p>UILabel 和 NSTextField 有 <strong>preferredMaxLayoutWidth</strong> 这个属性。如果它 非 0，他就会作为label 的固有尺寸的最大宽度，当 label有超过 container View 容量的文字是，label可以适配到 这个 width 上。这个 label 将会返回一个更大的<br>固有 height。(如果 label 只有少量文字，那么label 的固有width 就回小于__preferredMaxLayoutWidth__)<br>iOS 上，UILabel 的 <strong>preferredMaxLayoutWidth__被设置为label 的width在 它显示在nib 上的时候（即使在 runtime 它的size 改变）<br>OS X 上, NSTextField 可选__preferredMaxLayoutWidth</strong>，在布局之后。<br>如果 label 的有效空间可以改变，像最上面 video1里面的demo，或者如果container 可以resized （或者rotated），你就需要动态的改变 <strong>preferredMaxLayoutWidth</strong>。</p><h1 id="调整-preferredmaxlayoutwidth"><a class="markdownIt-Anchor" href="#调整-preferredmaxlayoutwidth"></a> 调整 <strong>preferredMaxLayoutWidth</strong></h1><p>为了动态的设置preferredMaxLayoutWidth, 需要重载 label 的父类方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> -[UIView layoutSubviews]</span><br><span class="line"> -[NSView layout]</span><br></pre></td></tr></table></figure><p>为了得到最上面video2的效果，要将__preferredMaxLayoutWidth__设置为有效的label<br>例子的布局，label 要有这几个限制:<br><img src="http://upload-images.jianshu.io/upload_images/4042439-28f753957e39d9b4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="layout"><br>固定左右限制，使label占据整个水平空间，<br><em>代码里不要使用 数字 硬编码你的 constrain</em>. 这会是你的布局十分脆弱。取而代替的, 可以利用布局系统来达到效果，需要做两步。<br>上面 video2里面，在label 中 使用下面的代码：</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)layoutSubviews &#123;</span><br><span class="line">  [<span class="keyword">super</span> layoutSubviews]; </span><br><span class="line">  <span class="built_in">CGFloat</span> availableLabelWidth = <span class="keyword">self</span>.label.frame.size.width; </span><br><span class="line">  <span class="keyword">self</span>.label.preferredMaxLayoutWidth = availableLabelWidth; </span><br><span class="line">  [<span class="keyword">super</span> layoutSubviews];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现调用 [super layoutSubviews]，将会计算label上的 constraints（因为他是一个间接的子view）相应的改变它的frame。此时 width 是有用的，但是height不是；height 用的是label 的固有height，它依赖 以前 preferredMaxLayoutWidth 的值。<br>现在我们知道了 label 的实际width，我们设置它的最大布局width. 在内部,在下一次查询label 的固有尺寸时， label的固有尺寸是无效的，而对于当前的 width会有 精确的 height。<br>所有布局信息就绪, 再次调用 [super layoutSubviews]<br>again.</p><h1 id="创建属于你自己的-包裹view"><a class="markdownIt-Anchor" href="#创建属于你自己的-包裹view"></a> 创建属于你自己的 包裹view</h1><p><a href="https://github.com/jmah/WrapDemo" target="_blank" rel="noopener">WrapDemo</a><br>. 这个例子有一个 preferredMaxLayoutWidth 属性 that the superview sets, 和 一个共享布局方法 (-[MyWrappingView enumerateItemRectsForLayoutWidth:usingBlock:]<br>). 这个方法在 -intrinsicContentSize 中调用–通过preferredMaxLayoutWidth 计算基本尺寸。在 -layoutSubviews 中调用，算出那些 找色的item 的实际 size 和 位置<br><a href="http://devetc.org/assets/2014-07-07-auto-layout-and-views-that-wrap/custom-wrapping-view.webm" target="_blank" rel="noopener">video3</a></p><h1 id="压缩-包裹"><a class="markdownIt-Anchor" href="#压缩-包裹"></a> 压缩 包裹</h1><p>最后，有很多次我们想把包裹view 和内容抱紧 contenthugging 的方式组合。<br>可以添加约束，以使它以中心为中心，并<em>至少</em>有一些距离，而不是固定 label 的leading和trailing空间位置。<br><img src="http://upload-images.jianshu.io/upload_images/4042439-3195a7f9882b084a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Label shrink-wrap constraints"><br>将其与上面的- layoutsubviews结合起来实现提供以下行为:<br><a href="http://devetc.org/assets/2014-07-07-auto-layout-and-views-that-wrap/shrink-wrap-buggy.webm" target="_blank" rel="noopener">video4</a></p><p>边缘的空间是充足的，如果它大于或等于常数-它只会把标签推进去，它就不会把它拉出来。我们想要做的是找到标签可以占用的宽度，而不需要占用所有的宽度。<br>自动布局API只提供一种计算距离的方法:布局，然后测量。因此，为了找出标签的宽度，我们告诉它要变得非常宽(仔细选择优先级)，把它放在外面，测量它，然后使用结果作为首选的最大布局宽度。该标签的内在尺寸将完成其余部分。</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)layoutSubviews &#123;</span><br><span class="line">    <span class="built_in">NSLayoutConstraint</span> *labelAsWideAsPossibleConstraint =</span><br><span class="line">         [<span class="built_in">NSLayoutConstraint</span> constraintWithItem:<span class="keyword">self</span>.label</span><br><span class="line">                                      attribute:<span class="built_in">NSLayoutAttributeWidth</span></span><br><span class="line">                                      relatedBy:<span class="built_in">NSLayoutRelationGreaterThanOrEqual</span></span><br><span class="line">                                         toItem:<span class="literal">nil</span></span><br><span class="line">                                      attribute:<span class="number">0</span></span><br><span class="line">                                     multiplier:<span class="number">1.0</span></span><br><span class="line">                                       constant:<span class="number">1e8</span>]; <span class="comment">// a big number</span></span><br><span class="line">    labelAsWideAsPossibleConstraint.priority =</span><br><span class="line">        [<span class="keyword">self</span>.label contentCompressionResistancePriorityForAxis:<span class="built_in">UILayoutConstraintAxisHorizontal</span>];</span><br><span class="line">    [<span class="keyword">self</span>.label addConstraint:labelAsWideAsPossibleConstraint];</span><br><span class="line"></span><br><span class="line">    [<span class="keyword">super</span> layoutSubviews];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">CGFloat</span> availableLabelWidth = <span class="keyword">self</span>.label.frame.size.width;</span><br><span class="line">    <span class="keyword">self</span>.label.preferredMaxLayoutWidth = availableLabelWidth;</span><br><span class="line">    [<span class="keyword">self</span>.label removeConstraint:labelAsWideAsPossibleConstraint];</span><br><span class="line"></span><br><span class="line">    [<span class="keyword">super</span> layoutSubviews];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所有例子代码 <a href="https://github.com/jmah/WrapDemo" target="_blank" rel="noopener">WrapDemo</a> project on GitHub.<br>感谢Kevin Cathey在布局方面的帮助和见解。</p><p>总结：UILabel 的 preferredMaxLayoutWidth<br>当应用布局约束时，这个属性会影响标签的大小。在布局中，如果文本超出了该属性指定的宽度，则额外的文本将流向一个或多个新行，从而增加标签的高度。</p><h1 id="其他参考文章"><a class="markdownIt-Anchor" href="#其他参考文章"></a> 其他参考文章</h1><p><a href="https://developer.apple.com/documentation/uikit/uilabel#//apple_ref/occ/instp/UILabel/preferredMaxLayoutWidth" target="_blank" rel="noopener">Apple: iOS UILabel</a><br><a href="https://stackoverflow.com/questions/12789013/ios-multi-line-uilabel-in-auto-layout" target="_blank" rel="noopener">iOS: Multi-line UILabel in Auto Layout</a><br><a href="https://www.objc.io/issues/3-views/advanced-auto-layout-toolbox/" target="_blank" rel="noopener">Advanced Auto Layout Toolbox</a></p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> iOS Programming </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> 翻译 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS 离屏渲染</title>
      <link href="/2017/09/20/UI%20%E7%9B%B8%E5%85%B3/iOS-%E7%A6%BB%E5%B1%8F%E6%B8%B2%E6%9F%93/"/>
      <url>/2017/09/20/UI%20%E7%9B%B8%E5%85%B3/iOS-%E7%A6%BB%E5%B1%8F%E6%B8%B2%E6%9F%93/</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Jun 02 2020 17:35:52 GMT+0800 (CST) --><a id="more"></a><p>什么是离屏渲染？<br>他对性能有什么影响？<br>如何避免离屏渲染？</p><h2 id="ios-渲染"><a class="markdownIt-Anchor" href="#ios-渲染"></a> iOS 渲染</h2><p>如果想要了解离屏渲染，应该先知道iOS渲染框架是什么样的。</p><p><img src="/img/core-animation-pipline.jpg" alt="core animation pipeline"><br>让屏幕页面流畅应该保证页面刷新率为 60 帧/秒，1 帧的时间大概就是 16.67 ms了。<br>iOS 的渲染框架： Core Animation</p><ul><li>组合屏幕上的内容，追踪视图结构和内容的变化。</li><li>流程图中 Commit Transaction 前面的红框代表触发视图内容变化的事件，比如点击按钮</li><li>之后Core Animation 框架会捕获到屏幕内容的变化并提交给 Render Server（渲染服务器）</li><li>Render Server 里另外一个版本的 Core Animation 框架负责解码并绘制内容。</li><li>CPU 解码完成后将数据交给 GPU</li><li>GPU 渲染完成后显示</li></ul><p>离屏渲染是为了 缓存的<br>离屏渲染空间只有屏幕的 2.5倍<br>100ms 以后如果缓存没有使用就会被释放掉</p><p>圆角图片</p><p>由于GPU的浮点运算能力比CPU强，CPU渲染的效率可能不如离屏渲染。但如果仅仅是实现一个简单的效果，直接使用 CPU 渲染的效率又可能比离屏渲染好，毕竟普通的离屏渲染要涉及到缓冲区创建和上下文切换等耗时操作。对一些简单的绘制过程来说，这个过程有可能用CoreGraphics，全部用CPU来完成反而会比GPU做得更好。</p><p>一个常见的 CPU 渲染的例子是：重写 drawRect 方法，并且使用任何 Core Graphics 的技术进行了绘制操作，就涉及到了 CPU 渲染。整个渲染过程由 CPU 在 App 内同步地完成，渲染得到的bitmap最后再交由GPU用于显示。总之，具体使用 CPU 渲染还是使用 GPU 离屏渲染更多的时候需要进行性能上的具体比较才可以。</p><p>一个常见的性能优化的例子就是如何给 UIView/UIImageView 加圆角。</p><p>如下是三种加圆角的方式：</p><p>设置 cornerRadius<br>UIBezierPath<br>Core Graphics(为 UIView 加圆角)与直接截取图片(为 UIImageView 加圆角)<br>如下是这三种方法的比较：</p><p><a href="https://hit-alibaba.github.io/interview/iOS/Cocoa-Touch/Performance.html" target="_blank" rel="noopener">—</a></p><p>Advanced Graphics and Animations for iOS Apps（WWDC14 419)</p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> iOS Programming </category>
          
          <category> UI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> 性能 </tag>
            
            <tag> UI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何使用 RunLoop</title>
      <link href="/2017/08/30/runloop/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8-RunLoop/"/>
      <url>/2017/08/30/runloop/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8-RunLoop/</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Jun 02 2020 17:35:52 GMT+0800 (CST) --><p><img src="/img/runLoop_class_struct.jpeg" alt="runloop结构"></p><p>本文主要以翻译为主，有翻译or理解错的地方请提出，3Q</p><h2 id="使用-runloop-对象"><a class="markdownIt-Anchor" href="#使用-runloop-对象"></a> 使用 RunLoop 对象</h2><p>Apple 框架中是如何描述 RunLoop 的:</p><table><thead><tr><th>框架</th><th>RunLoop</th><th>线程安全</th></tr></thead><tbody><tr><td>Cocoa</td><td>NSRunLoop 实例对象</td><td>不安全</td></tr><tr><td>Core Foundation</td><td>CFRunLoopRef指针</td><td>安全</td></tr></tbody></table><p>带着问题？</p><ol><li>runloop 使用需要注意什么？</li><li>什么时候使用 runloop</li><li>系统框架哪些地方使用了 runloop？</li><li>runloop 运行时的内部实体结构分析？</li></ol><h3 id="获得一个-runloop-对象"><a class="markdownIt-Anchor" href="#获得一个-runloop-对象"></a> 获得一个 runloop 对象</h3><p>swift</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="type">RunLoop</span>.current</span><br><span class="line"><span class="keyword">var</span> b = <span class="type">CFRunLoopGetCurrent</span>()</span><br></pre></td></tr></table></figure><p>oc</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">id</span> a = [<span class="built_in">NSRunLoop</span> currentRunLoop];</span><br><span class="line"><span class="keyword">id</span> b = <span class="built_in">CFRunLoopGetCurrent</span>();</span><br></pre></td></tr></table></figure><details><summary>__CFRunLoop 结构体</summary><pre><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> __<span class="title">CFRunLoop</span> &#123;</span></span><br><span class="line">  CFRuntimeBase _base;</span><br><span class="line">  <span class="keyword">pthread_mutex_t</span> _lock;    <span class="comment">//* locked for accessing mode list */</span></span><br><span class="line">  __CFPort _wakeUpPort;     <span class="comment">// used for CFRunLoopWakeUp </span></span><br><span class="line">  Boolean _unused;</span><br><span class="line">  <span class="keyword">volatile</span> _per_run_data *_perRunData;<span class="comment">// reset for runs of the run loop</span></span><br><span class="line">  <span class="keyword">pthread_t</span> _pthread;</span><br><span class="line">  <span class="keyword">uint32_t</span> _winthread;</span><br><span class="line">  CFMutableSetRef _commonModes;     <span class="comment">// 当前 runloop 要监听的 mode</span></span><br><span class="line">  CFMutableSetRef _commonModeItems; <span class="comment">// 所有模式下 要监听的 source0,source1,observer, timer</span></span><br><span class="line">  CFRunLoopModeRef _currentMode;</span><br><span class="line">  CFMutableSetRef _modes;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">block_item</span> *_<span class="title">blocks_head</span>;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">block_item</span> *_<span class="title">blocks_tail</span>;</span></span><br><span class="line">  CFAbsoluteTime _runTime;</span><br><span class="line">  CFAbsoluteTime _sleepTime;</span><br><span class="line">  CFTypeRef _counterpart;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></pre></details><details><summary>app 运行时 CFRunLoop 内部样子简版</summary><pre><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">CFRunLoop</span> &#123;</span><br><span class="line">  current mode = kCFRunLoopDefaultMode</span><br><span class="line">  common modes = &#123;</span><br><span class="line">  <span class="built_in">UITrackingRunLoopMode</span></span><br><span class="line">  kCFRunLoopDefaultMode</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  common mode items = &#123;</span><br><span class="line">  <span class="comment">// source0 (manual)</span></span><br><span class="line">  <span class="built_in">CFRunLoopSource</span> &#123;order =<span class="number">-1</span>, &#123;</span><br><span class="line">    callout = _UIApplicationHandleEventQueue&#125;&#125;</span><br><span class="line">  <span class="built_in">CFRunLoopSource</span> &#123;order =<span class="number">-1</span>, &#123;</span><br><span class="line">    callout = PurpleEventSignalCallback &#125;&#125;</span><br><span class="line">  <span class="built_in">CFRunLoopSource</span> &#123;order = <span class="number">0</span>, &#123;</span><br><span class="line">    callout = FBSSerialQueueRunLoopSourceHandler&#125;&#125;</span><br><span class="line"> </span><br><span class="line">  <span class="comment">// source1 (mach port)</span></span><br><span class="line">  <span class="built_in">CFRunLoopSource</span> &#123;order = <span class="number">0</span>,  &#123;port = <span class="number">17923</span>&#125;&#125;</span><br><span class="line">  <span class="built_in">CFRunLoopSource</span> &#123;order = <span class="number">0</span>,  &#123;port = <span class="number">12039</span>&#125;&#125;</span><br><span class="line">  <span class="built_in">CFRunLoopSource</span> &#123;order = <span class="number">0</span>,  &#123;port = <span class="number">16647</span>&#125;&#125;</span><br><span class="line">  <span class="built_in">CFRunLoopSource</span> &#123;order =<span class="number">-1</span>, &#123;</span><br><span class="line">    callout = PurpleEventCallback&#125;&#125;</span><br><span class="line">  <span class="built_in">CFRunLoopSource</span> &#123;order = <span class="number">0</span>, &#123;port = <span class="number">2407</span>,</span><br><span class="line">    callout = _ZL20notify_port_callbackP12__CFMachPortPvlS1_&#125;&#125;</span><br><span class="line">  <span class="built_in">CFRunLoopSource</span> &#123;order = <span class="number">0</span>, &#123;port = <span class="number">1</span>c03,</span><br><span class="line">    callout = __IOHIDEventSystemClientAvailabilityCallback&#125;&#125;</span><br><span class="line">  <span class="built_in">CFRunLoopSource</span> &#123;order = <span class="number">0</span>, &#123;port = <span class="number">1</span>b03,</span><br><span class="line">    callout = __IOHIDEventSystemClientQueueCallback&#125;&#125;</span><br><span class="line">  <span class="built_in">CFRunLoopSource</span> &#123;order = <span class="number">1</span>, &#123;port = <span class="number">1903</span>,</span><br><span class="line">    callout = __IOMIGMachPortPortCallback&#125;&#125;</span><br><span class="line"> </span><br><span class="line">  <span class="comment">// Ovserver</span></span><br><span class="line">  <span class="built_in">CFRunLoopObserver</span> &#123;order = <span class="number">-2147483647</span>, activities = <span class="number">0x1</span>, <span class="comment">// Entry</span></span><br><span class="line">    callout = _wrapRunLoopWithAutoreleasePoolHandler&#125;</span><br><span class="line">  <span class="built_in">CFRunLoopObserver</span> &#123;order = <span class="number">0</span>, activities = <span class="number">0x20</span>,    <span class="comment">// BeforeWaiting</span></span><br><span class="line">    callout = _UIGestureRecognizerUpdateObserver&#125;</span><br><span class="line">  <span class="built_in">CFRunLoopObserver</span> &#123;order = <span class="number">1999000</span>, activities = <span class="number">0xa0</span>,  <span class="comment">// BeforeWaiting | Exit</span></span><br><span class="line">    callout = _afterCACommitHandler&#125;</span><br><span class="line">  <span class="built_in">CFRunLoopObserver</span> &#123;order = <span class="number">2000000</span>, activities = <span class="number">0xa0</span>,  <span class="comment">// BeforeWaiting | Exit</span></span><br><span class="line">    callout = _ZN2CA11Transaction17observer_callbackEP19__CFRunLoopObservermPv&#125;</span><br><span class="line">  <span class="built_in">CFRunLoopObserver</span> &#123;order = <span class="number">2147483647</span>, activities = <span class="number">0xa0</span>, <span class="comment">// BeforeWaiting | Exit</span></span><br><span class="line">    callout = _wrapRunLoopWithAutoreleasePoolHandler&#125;</span><br><span class="line"> </span><br><span class="line">  <span class="comment">// Timer</span></span><br><span class="line">  <span class="built_in">CFRunLoopTimer</span> &#123;firing = No, interval = <span class="number">3.1536e+09</span>, tolerance = <span class="number">0</span>,</span><br><span class="line">    next fire date = <span class="number">453098071</span> (<span class="number">-4421.76019</span> @ <span class="number">96223387169499</span>),</span><br><span class="line">    callout = _ZN2CAL14timer_callbackEP16__CFRunLoopTimerPv (QuartzCore.framework)&#125;</span><br><span class="line">  &#125;,</span><br><span class="line"> </span><br><span class="line">  modes ＝ &#123;</span><br><span class="line">  <span class="built_in">CFRunLoopMode</span>  &#123;</span><br><span class="line">    sources0 =  &#123; <span class="comment">/* same as 'common mode items' */</span> &#125;,</span><br><span class="line">    sources1 =  &#123; <span class="comment">/* same as 'common mode items' */</span> &#125;,</span><br><span class="line">    observers = &#123; <span class="comment">/* same as 'common mode items' */</span> &#125;,</span><br><span class="line">    timers =  &#123; <span class="comment">/* same as 'common mode items' */</span> &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line"> </span><br><span class="line">  <span class="built_in">CFRunLoopMode</span>  &#123;</span><br><span class="line">    sources0 =  &#123; <span class="comment">/* same as 'common mode items' */</span> &#125;,</span><br><span class="line">    sources1 =  &#123; <span class="comment">/* same as 'common mode items' */</span> &#125;,</span><br><span class="line">    observers = &#123; <span class="comment">/* same as 'common mode items' */</span> &#125;,</span><br><span class="line">    timers =  &#123; <span class="comment">/* same as 'common mode items' */</span> &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line"> </span><br><span class="line">  <span class="built_in">CFRunLoopMode</span>  &#123;</span><br><span class="line">    sources0 = &#123;</span><br><span class="line">    <span class="built_in">CFRunLoopSource</span> &#123;order = <span class="number">0</span>, &#123;</span><br><span class="line">      callout = FBSSerialQueueRunLoopSourceHandler&#125;&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    sources1 = (null),</span><br><span class="line">    observers = &#123;</span><br><span class="line">    <span class="built_in">CFRunLoopObserver</span> &gt;&#123;activities = <span class="number">0xa0</span>, order = <span class="number">2000000</span>,</span><br><span class="line">      callout = _ZN2CA11Transaction17observer_callbackEP19__CFRunLoopObservermPv&#125;</span><br><span class="line">    )&#125;,</span><br><span class="line">    timers = (null),</span><br><span class="line">  &#125;,</span><br><span class="line"> </span><br><span class="line">  <span class="built_in">CFRunLoopMode</span>  &#123;</span><br><span class="line">    sources0 = &#123;</span><br><span class="line">    <span class="built_in">CFRunLoopSource</span> &#123;order = <span class="number">-1</span>, &#123;</span><br><span class="line">      callout = PurpleEventSignalCallback&#125;&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    sources1 = &#123;</span><br><span class="line">    <span class="built_in">CFRunLoopSource</span> &#123;order = <span class="number">-1</span>, &#123;</span><br><span class="line">      callout = PurpleEventCallback&#125;&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    observers = (null),</span><br><span class="line">    timers = (null),</span><br><span class="line">  &#125;,</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">CFRunLoopMode</span>  &#123;</span><br><span class="line">    sources0 = (null),</span><br><span class="line">    sources1 = (null),</span><br><span class="line">    observers = (null),</span><br><span class="line">    timers = (null),</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，系统默认注册了5个Mode:</p><ol><li>kCFRunLoopDefaultMode: App的默认 Mode，通常主线程是在这个 Mode 下运行的。</li><li>UITrackingRunLoopMode: 界面跟踪 Mode，用于 ScrollView 追踪触摸滑动，保证界面滑动时不受其他 Mode 影响。</li><li>UIInitializationRunLoopMode: 在刚启动 App 时第进入的第一个 Mode，启动完成后就不再使用。</li><li>GSEventReceiveRunLoopMode: 接受系统事件的内部 Mode，通常用不到。</li><li>kCFRunLoopCommonModes: 这是一个占位的 Mode，没有实际作用。<br></li></ol></pre></details><details><summary>app 运行时 CFRunLoop 内部样子，打印 runloop 对象</summary><pre><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br></pre></td><td class="code"><pre><span class="line">&lt;CFRunLoop <span class="number">0x6000008b0000</span> [<span class="number">0x7fff80615350</span>]&gt;&#123;</span><br><span class="line">  wakeup port = <span class="number">0x2703</span>, </span><br><span class="line">  stopped = <span class="literal">false</span>, </span><br><span class="line">  ignoreWakeUps = <span class="literal">true</span>, </span><br><span class="line">  current mode = (none),</span><br><span class="line">  common modes = &lt;CFBasicHash <span class="number">0x600003afbb70</span> [<span class="number">0x7fff80615350</span>]&gt;&#123;</span><br><span class="line">  type = <span class="keyword">mutable</span> <span class="built_in">set</span>, </span><br><span class="line">  count = <span class="number">2</span>,</span><br><span class="line">  entries =&gt;</span><br><span class="line">  <span class="number">0</span> : &lt;CFString <span class="number">0x7fff86743f40</span> [<span class="number">0x7fff80615350</span>]&gt;&#123;</span><br><span class="line">    contents = <span class="string">"UITrackingRunLoopMode"</span>&#125;</span><br><span class="line">  <span class="number">2</span> : &lt;CFString <span class="number">0x7fff80628740</span> [<span class="number">0x7fff80615350</span>]&gt;&#123;</span><br><span class="line">    contents = <span class="string">"kCFRunLoopDefaultMode"</span>&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  common mode items = &lt;CFBasicHash <span class="number">0x600003aa7690</span> [<span class="number">0x7fff80615350</span>]&gt;&#123;</span><br><span class="line">  type = <span class="keyword">mutable</span> <span class="built_in">set</span>, </span><br><span class="line">  count = <span class="number">13</span>,</span><br><span class="line">  entries =&gt;</span><br><span class="line">  <span class="number">0</span> : &lt;CFRunLoopSource <span class="number">0x6000001bc180</span> [<span class="number">0x7fff80615350</span>]&gt;&#123;</span><br><span class="line">    signalled = No, </span><br><span class="line">    valid = Yes, </span><br><span class="line">    order = <span class="number">-1</span>, </span><br><span class="line">    context = &lt;CFRunLoopSource context&gt;&#123;</span><br><span class="line">      version = <span class="number">0</span>, </span><br><span class="line">      info = <span class="number">0x0</span>, </span><br><span class="line">      callout = PurpleEventSignalCallback (<span class="number">0x7fff384399f5</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="number">1</span> : &lt;CFRunLoopSource <span class="number">0x6000001b0240</span> [<span class="number">0x7fff80615350</span>]&gt;&#123;</span><br><span class="line">    signalled = Yes, </span><br><span class="line">    valid = Yes, </span><br><span class="line">    order = <span class="number">0</span>, </span><br><span class="line">    context = &lt;CFRunLoopSource context&gt;&#123;</span><br><span class="line">      version = <span class="number">0</span>, </span><br><span class="line">      info = <span class="number">0x6000010b8e40</span>, </span><br><span class="line">      callout = FBSSerialQueueRunLoopSourceHandler (<span class="number">0x7fff365a092a</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="number">2</span> : &lt;CFRunLoopSource <span class="number">0x6000001b40c0</span> [<span class="number">0x7fff80615350</span>]&gt;&#123;</span><br><span class="line">    signalled = No, </span><br><span class="line">    valid = Yes, </span><br><span class="line">    order = <span class="number">-1</span>, </span><br><span class="line">    context = &lt;CFRunLoopSource context&gt;&#123;</span><br><span class="line">      version = <span class="number">1</span>, </span><br><span class="line">      info = <span class="number">0x510b</span>, </span><br><span class="line">      callout = PurpleEventCallback (<span class="number">0x7fff38439a01</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="number">5</span> : &lt;CFRunLoopSource <span class="number">0x6000001b80c0</span> [<span class="number">0x7fff80615350</span>]&gt;&#123;</span><br><span class="line">    signalled = No, </span><br><span class="line">    valid = Yes, </span><br><span class="line">    order = <span class="number">0</span>, </span><br><span class="line">    context = &lt;MSHRunLoopSource <span class="number">0x600003ae95f0</span>&gt; &#123;</span><br><span class="line">      port = <span class="number">430b</span>, callback = <span class="number">0x0</span></span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="number">7</span> : &lt;CFRunLoopObserver <span class="number">0x6000005b0820</span> [<span class="number">0x7fff80615350</span>]&gt;&#123;</span><br><span class="line">    valid = Yes, </span><br><span class="line">    activities = <span class="number">0xa0</span>, </span><br><span class="line">    repeats = Yes, </span><br><span class="line">    order = <span class="number">2147483647</span>, </span><br><span class="line">    callout = _wrapRunLoopWithAutoreleasePoolHandler (<span class="number">0x7fff47848c8c</span>), </span><br><span class="line">    context = &lt;CFArray <span class="number">0x600003ae9bf0</span> [<span class="number">0x7fff80615350</span>]&gt;&#123;</span><br><span class="line">      type = <span class="keyword">mutable</span>-small, </span><br><span class="line">      count = <span class="number">0</span>, </span><br><span class="line">      values = ()</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="number">8</span> : &lt;CFRunLoopObserver <span class="number">0x6000005b0780</span> [<span class="number">0x7fff80615350</span>]&gt;&#123;</span><br><span class="line">    valid = Yes, </span><br><span class="line">    activities = <span class="number">0x1</span>,</span><br><span class="line">    repeats = Yes, </span><br><span class="line">    order = <span class="number">-2147483647</span>, </span><br><span class="line">    callout = _wrapRunLoopWithAutoreleasePoolHandler (<span class="number">0x7fff47848c8c</span>), </span><br><span class="line">    context = &lt;CFArray <span class="number">0x600003ae9bf0</span> [<span class="number">0x7fff80615350</span>]&gt;&#123;</span><br><span class="line">      type = <span class="keyword">mutable</span>-small,</span><br><span class="line">      count = <span class="number">0</span>,</span><br><span class="line">      values = ()</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="number">9</span> : &lt;CFRunLoopObserver <span class="number">0x6000005b06e0</span> [<span class="number">0x7fff80615350</span>]&gt;&#123;</span><br><span class="line">    valid = Yes,</span><br><span class="line">    activities = <span class="number">0xa0</span>,</span><br><span class="line">    repeats = Yes,</span><br><span class="line">    order = <span class="number">2001000</span>,</span><br><span class="line">    callout = _afterCACommitHandler (<span class="number">0x7fff47879310</span>),</span><br><span class="line">    context = &lt;CFRunLoopObserver context <span class="number">0x7fc5adc01e40</span>&gt;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="number">10</span> : &lt;CFRunLoopObserver <span class="number">0x6000005b0640</span> [<span class="number">0x7fff80615350</span>]&gt;&#123;</span><br><span class="line">    valid = Yes, </span><br><span class="line">    activities = <span class="number">0xa0</span>, </span><br><span class="line">    repeats = Yes, </span><br><span class="line">    order = <span class="number">1999000</span>, </span><br><span class="line">    callout = _beforeCACommitHandler (<span class="number">0x7fff478792a7</span>), </span><br><span class="line">    context = &lt;CFRunLoopObserver context <span class="number">0x7fc5adc01e40</span>&gt;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="number">12</span> : &lt;CFRunLoopSource <span class="number">0x6000001b8b40</span> [<span class="number">0x7fff80615350</span>]&gt;&#123;</span><br><span class="line">    signalled = No, </span><br><span class="line">    valid = Yes, </span><br><span class="line">    order = <span class="number">-1</span>, </span><br><span class="line">    context = &lt;CFRunLoopSource context&gt;&#123;</span><br><span class="line">      version = <span class="number">0</span>, </span><br><span class="line">      info = <span class="number">0x6000001b0180</span>, </span><br><span class="line">      callout = __handleEventQueue (<span class="number">0x7fff478e3efb</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="number">16</span> : &lt;CFRunLoopSource <span class="number">0x6000001b89c0</span> [<span class="number">0x7fff80615350</span>]&gt;&#123;</span><br><span class="line">    signalled = No, </span><br><span class="line">    valid = Yes, </span><br><span class="line">    order = <span class="number">0</span>, </span><br><span class="line">    context = &lt;MSHRunLoopSource <span class="number">0x600003ae9650</span>&gt; &#123;</span><br><span class="line">      port = <span class="number">3f</span>0b, </span><br><span class="line">      callback = <span class="number">0x0</span></span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="number">18</span> : &lt;CFRunLoopObserver <span class="number">0x6000005b0140</span> [<span class="number">0x7fff80615350</span>]&gt;&#123;</span><br><span class="line">    valid = Yes, </span><br><span class="line">    activities = <span class="number">0x20</span>, </span><br><span class="line">    repeats = Yes, </span><br><span class="line">    order = <span class="number">0</span>, </span><br><span class="line">    callout = _UIGestureRecognizerUpdateObserver (<span class="number">0x7fff473eda72</span>), context = &lt;CFRunLoopObserver context <span class="number">0x600001fb5180</span>&gt;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="number">21</span> : &lt;CFRunLoopSource <span class="number">0x6000001b8a80</span> [<span class="number">0x7fff80615350</span>]&gt;&#123;</span><br><span class="line">    signalled = No, </span><br><span class="line">    valid = Yes, </span><br><span class="line">    order = <span class="number">0</span>, </span><br><span class="line">    context = &lt;MSHRunLoopSource <span class="number">0x6000034a8160</span>&gt; &#123;</span><br><span class="line">      port = <span class="number">4207</span>, </span><br><span class="line">      callback = <span class="number">0x7fff2e3fdd33</span></span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="number">22</span> : &lt;CFRunLoopSource <span class="number">0x6000001b8cc0</span> [<span class="number">0x7fff80615350</span>]&gt;&#123;</span><br><span class="line">    signalled = No, </span><br><span class="line">    valid = Yes, </span><br><span class="line">    order = <span class="number">-2</span>, </span><br><span class="line">    context = &lt;CFRunLoopSource context&gt;&#123;</span><br><span class="line">      version = <span class="number">0</span>, </span><br><span class="line">      info = <span class="number">0x600003a9fe70</span>, </span><br><span class="line">      callout = __handleHIDEventFetcherDrain (<span class="number">0x7fff478e3f07</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  modes = &lt;CFBasicHash <span class="number">0x600003afbba0</span> [<span class="number">0x7fff80615350</span>]&gt;&#123;</span><br><span class="line">    type = <span class="keyword">mutable</span> <span class="built_in">set</span>, </span><br><span class="line">    count = <span class="number">3</span>,</span><br><span class="line">    entries =&gt;</span><br><span class="line">    <span class="number">0</span> : &lt;CFRunLoopMode <span class="number">0x600000fb8270</span> [<span class="number">0x7fff80615350</span>]&gt;&#123;</span><br><span class="line">      name = UITrackingRunLoopMode, </span><br><span class="line">      port <span class="built_in">set</span> = <span class="number">0x2c03</span>, </span><br><span class="line">      <span class="built_in">queue</span> = <span class="number">0x600001ab9180</span>, </span><br><span class="line">      source = <span class="number">0x600001ab9200</span> (<span class="keyword">not</span> fired), </span><br><span class="line">      timer port = <span class="number">0x5303</span>, </span><br><span class="line">    sources0 = &lt;CFBasicHash <span class="number">0x600003aa76f0</span> [<span class="number">0x7fff80615350</span>]&gt;&#123;</span><br><span class="line">      type = <span class="keyword">mutable</span> <span class="built_in">set</span>, </span><br><span class="line">      count = <span class="number">4</span>,</span><br><span class="line">      entries =&gt;</span><br><span class="line">      <span class="number">0</span> : &lt;CFRunLoopSource <span class="number">0x6000001bc180</span> [<span class="number">0x7fff80615350</span>]&gt;&#123;</span><br><span class="line">        signalled = No, </span><br><span class="line">        valid = Yes, </span><br><span class="line">        order = <span class="number">-1</span>, </span><br><span class="line">        context = &lt;CFRunLoopSource context&gt;&#123;</span><br><span class="line">        version = <span class="number">0</span>, </span><br><span class="line">        info = <span class="number">0x0</span>, </span><br><span class="line">        callout = PurpleEventSignalCallback (<span class="number">0x7fff384399f5</span>)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="number">1</span> : &lt;CFRunLoopSource <span class="number">0x6000001b8b40</span> [<span class="number">0x7fff80615350</span>]&gt;&#123;</span><br><span class="line">        signalled = No, </span><br><span class="line">        valid = Yes, </span><br><span class="line">        order = <span class="number">-1</span>, </span><br><span class="line">        context = &lt;CFRunLoopSource context&gt;&#123;</span><br><span class="line">        version = <span class="number">0</span>, </span><br><span class="line">        info = <span class="number">0x6000001b0180</span>, </span><br><span class="line">        callout = __handleEventQueue (<span class="number">0x7fff478e3efb</span>)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="number">2</span> : &lt;CFRunLoopSource <span class="number">0x6000001b0240</span> [<span class="number">0x7fff80615350</span>]&gt;&#123;</span><br><span class="line">        signalled = Yes, </span><br><span class="line">        valid = Yes, </span><br><span class="line">        order = <span class="number">0</span>, </span><br><span class="line">        context = &lt;CFRunLoopSource context&gt;&#123;</span><br><span class="line">        version = <span class="number">0</span>, </span><br><span class="line">        info = <span class="number">0x6000010b8e40</span>, </span><br><span class="line">        callout = FBSSerialQueueRunLoopSourceHandler (<span class="number">0x7fff365a092a</span>)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="number">3</span> : &lt;CFRunLoopSource <span class="number">0x6000001b8cc0</span> [<span class="number">0x7fff80615350</span>]&gt;&#123;</span><br><span class="line">        signalled = No, </span><br><span class="line">        valid = Yes, </span><br><span class="line">        order = <span class="number">-2</span>, </span><br><span class="line">        context = &lt;CFRunLoopSource context&gt;&#123;</span><br><span class="line">        version = <span class="number">0</span>, </span><br><span class="line">        info = <span class="number">0x600003a9fe70</span>, </span><br><span class="line">        callout = __handleHIDEventFetcherDrain (<span class="number">0x7fff478e3f07</span>)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">    sources1 = &lt;CFBasicHash <span class="number">0x600003aa7720</span> [<span class="number">0x7fff80615350</span>]&gt;&#123;</span><br><span class="line">      type = <span class="keyword">mutable</span> <span class="built_in">set</span>, </span><br><span class="line">      count = <span class="number">4</span>,</span><br><span class="line">      entries =&gt;</span><br><span class="line">      <span class="number">0</span> : &lt;CFRunLoopSource <span class="number">0x6000001b40c0</span> [<span class="number">0x7fff80615350</span>]&gt;&#123;</span><br><span class="line">        signalled = No, </span><br><span class="line">        valid = Yes, </span><br><span class="line">        order = <span class="number">-1</span>, </span><br><span class="line">        context = &lt;CFRunLoopSource context&gt;&#123;</span><br><span class="line">        version = <span class="number">1</span>, </span><br><span class="line">        info = <span class="number">0x510b</span>, </span><br><span class="line">        callout = PurpleEventCallback (<span class="number">0x7fff38439a01</span>)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="number">4</span> : &lt;CFRunLoopSource <span class="number">0x6000001b89c0</span> [<span class="number">0x7fff80615350</span>]&gt;&#123;</span><br><span class="line">        signalled = No, </span><br><span class="line">        valid = Yes, </span><br><span class="line">        order = <span class="number">0</span>, </span><br><span class="line">        context = &lt;MSHRunLoopSource <span class="number">0x600003ae9650</span>&gt; &#123;</span><br><span class="line">        port = <span class="number">3f</span>0b, </span><br><span class="line">        callback = <span class="number">0x0</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="number">5</span> : &lt;CFRunLoopSource <span class="number">0x6000001b8a80</span> [<span class="number">0x7fff80615350</span>]&gt;&#123;</span><br><span class="line">        signalled = No, </span><br><span class="line">        valid = Yes, </span><br><span class="line">        order = <span class="number">0</span>, </span><br><span class="line">        context = &lt;MSHRunLoopSource <span class="number">0x6000034a8160</span>&gt; &#123;</span><br><span class="line">        port = <span class="number">4207</span>, </span><br><span class="line">        callback = <span class="number">0x7fff2e3fdd33</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="number">6</span> : &lt;CFRunLoopSource <span class="number">0x6000001b80c0</span> [<span class="number">0x7fff80615350</span>]&gt;&#123;</span><br><span class="line">        signalled = No, </span><br><span class="line">        valid = Yes, </span><br><span class="line">        order = <span class="number">0</span>, </span><br><span class="line">        context = &lt;MSHRunLoopSource <span class="number">0x600003ae95f0</span>&gt; &#123;</span><br><span class="line">        port = <span class="number">430b</span>, </span><br><span class="line">        callback = <span class="number">0x0</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      &#125; ,</span><br><span class="line">    observers = (</span><br><span class="line">      <span class="string">"&lt;CFRunLoopObserver 0x6000005b0780 [0x7fff80615350]&gt;&#123;</span></span><br><span class="line"><span class="string">      valid = Yes, </span></span><br><span class="line"><span class="string">      activities = 0x1, </span></span><br><span class="line"><span class="string">      repeats = Yes, </span></span><br><span class="line"><span class="string">      order = -2147483647, </span></span><br><span class="line"><span class="string">      callout = _wrapRunLoopWithAutoreleasePoolHandler (0x7fff47848c8c), </span></span><br><span class="line"><span class="string">      context = &lt;CFArray 0x600003ae9bf0 [0x7fff80615350]&gt;&#123;type = mutable-small, count = 0, values = ()</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">      &#125;"</span>,</span><br><span class="line">      <span class="string">"&lt;CFRunLoopObserver 0x6000005b0140 [0x7fff80615350]&gt;&#123;</span></span><br><span class="line"><span class="string">      valid = Yes, </span></span><br><span class="line"><span class="string">      activities = 0x20, </span></span><br><span class="line"><span class="string">      repeats = Yes, </span></span><br><span class="line"><span class="string">      order = 0, </span></span><br><span class="line"><span class="string">      callout = _UIGestureRecognizerUpdateObserver (0x7fff473eda72), </span></span><br><span class="line"><span class="string">      context = &lt;CFRunLoopObserver context 0x600001fb5180&gt;</span></span><br><span class="line"><span class="string">      &#125;"</span>,</span><br><span class="line">      <span class="string">"&lt;CFRunLoopObserver 0x6000005b0640 [0x7fff80615350]&gt;&#123;</span></span><br><span class="line"><span class="string">      valid = Yes, </span></span><br><span class="line"><span class="string">      activities = 0xa0, </span></span><br><span class="line"><span class="string">      repeats = Yes, </span></span><br><span class="line"><span class="string">      order = 1999000, </span></span><br><span class="line"><span class="string">      callout = _beforeCACommitHandler (0x7fff478792a7), </span></span><br><span class="line"><span class="string">      context = &lt;CFRunLoopObserver context 0x7fc5adc01e40&gt;</span></span><br><span class="line"><span class="string">      &#125;"</span>,</span><br><span class="line">      <span class="string">"&lt;CFRunLoopObserver 0x6000005b06e0 [0x7fff80615350]&gt;&#123;</span></span><br><span class="line"><span class="string">      valid = Yes, </span></span><br><span class="line"><span class="string">      activities = 0xa0, </span></span><br><span class="line"><span class="string">      repeats = Yes, </span></span><br><span class="line"><span class="string">      order = 2001000, </span></span><br><span class="line"><span class="string">      callout = _afterCACommitHandler (0x7fff47879310), </span></span><br><span class="line"><span class="string">      context = &lt;CFRunLoopObserver context 0x7fc5adc01e40&gt;</span></span><br><span class="line"><span class="string">      &#125;"</span>,</span><br><span class="line">      <span class="string">"&lt;CFRunLoopObserver 0x6000005b0820 [0x7fff80615350]&gt;&#123;</span></span><br><span class="line"><span class="string">      valid = Yes, </span></span><br><span class="line"><span class="string">      activities = 0xa0, </span></span><br><span class="line"><span class="string">      repeats = Yes, </span></span><br><span class="line"><span class="string">      order = 2147483647, </span></span><br><span class="line"><span class="string">      callout = _wrapRunLoopWithAutoreleasePoolHandler (0x7fff47848c8c), </span></span><br><span class="line"><span class="string">      context = &lt;CFArray 0x600003ae9bf0 [0x7fff80615350]&gt;&#123;</span></span><br><span class="line"><span class="string">        type = mutable-small, </span></span><br><span class="line"><span class="string">        count = 0, </span></span><br><span class="line"><span class="string">        values = ()</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">      &#125;"</span></span><br><span class="line">    ),</span><br><span class="line">    timers = (null),</span><br><span class="line">    currently <span class="number">600930818</span> (<span class="number">56642367633481</span>) / soft deadline in: <span class="number">1.84466874e+10</span> sec (@ <span class="number">-1</span>) / hard deadline in: <span class="number">1.84466874e+10</span> sec (@ <span class="number">-1</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">  <span class="number">1</span> : &lt;CFRunLoopMode <span class="number">0x600000fb8340</span> [<span class="number">0x7fff80615350</span>]&gt;&#123;</span><br><span class="line">    name = GSEventReceiveRunLoopMode, </span><br><span class="line">    port <span class="built_in">set</span> = <span class="number">0x5203</span>, </span><br><span class="line">    <span class="built_in">queue</span> = <span class="number">0x600001ab9280</span>, </span><br><span class="line">    source = <span class="number">0x600001ab9380</span> (<span class="keyword">not</span> fired), </span><br><span class="line">    timer port = <span class="number">0x2e03</span>, </span><br><span class="line">  sources0 = &lt;CFBasicHash <span class="number">0x600003aa77b0</span> [<span class="number">0x7fff80615350</span>]&gt;&#123;</span><br><span class="line">    type = <span class="keyword">mutable</span> <span class="built_in">set</span>, </span><br><span class="line">    count = <span class="number">1</span>,</span><br><span class="line">    entries =&gt;</span><br><span class="line">    <span class="number">0</span> : &lt;CFRunLoopSource <span class="number">0x6000001bc180</span> [<span class="number">0x7fff80615350</span>]&gt;&#123;</span><br><span class="line">      signalled = No, </span><br><span class="line">      valid = Yes, </span><br><span class="line">      order = <span class="number">-1</span>, </span><br><span class="line">      context = &lt;CFRunLoopSource context&gt;&#123;</span><br><span class="line">      version = <span class="number">0</span>, </span><br><span class="line">      info = <span class="number">0x0</span>, </span><br><span class="line">      callout = PurpleEventSignalCallback (<span class="number">0x7fff384399f5</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">sources1 = &lt;CFBasicHash <span class="number">0x600003aa77e0</span> [<span class="number">0x7fff80615350</span>]&gt;&#123;</span><br><span class="line">    type = <span class="keyword">mutable</span> <span class="built_in">set</span>, </span><br><span class="line">    count = <span class="number">1</span>,</span><br><span class="line">    entries =&gt;</span><br><span class="line">    <span class="number">2</span> : &lt;CFRunLoopSource <span class="number">0x6000001b4180</span> [<span class="number">0x7fff80615350</span>]&gt;&#123;</span><br><span class="line">      signalled = No, </span><br><span class="line">      valid = Yes, </span><br><span class="line">      order = <span class="number">-1</span>, </span><br><span class="line">      context = &lt;CFRunLoopSource context&gt;&#123;</span><br><span class="line">      version = <span class="number">1</span>, </span><br><span class="line">      info = <span class="number">0x510b</span>, </span><br><span class="line">      callout = PurpleEventCallback (<span class="number">0x7fff38439a01</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  observers = (null),</span><br><span class="line">  timers = (null),</span><br><span class="line">  currently <span class="number">600930818</span> (<span class="number">56642369572615</span>) / soft deadline in: <span class="number">1.84466874e+10</span> sec (@ <span class="number">-1</span>) / hard deadline in: <span class="number">1.84466874e+10</span> sec (@ <span class="number">-1</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="number">2</span> : &lt;CFRunLoopMode <span class="number">0x600000fb01a0</span> [<span class="number">0x7fff80615350</span>]&gt;&#123;</span><br><span class="line">    name = kCFRunLoopDefaultMode, </span><br><span class="line">    port <span class="built_in">set</span> = <span class="number">0x2603</span>, </span><br><span class="line">    <span class="built_in">queue</span> = <span class="number">0x600001ab0880</span>, </span><br><span class="line">    source = <span class="number">0x600001ab0980</span> (<span class="keyword">not</span> fired), </span><br><span class="line">    timer port = <span class="number">0x1f03</span>, </span><br><span class="line">  sources0 = &lt;CFBasicHash <span class="number">0x600003aa7750</span> [<span class="number">0x7fff80615350</span>]&gt;&#123;</span><br><span class="line">    type = <span class="keyword">mutable</span> <span class="built_in">set</span>, </span><br><span class="line">    count = <span class="number">4</span>,</span><br><span class="line">    entries =&gt;</span><br><span class="line">    <span class="number">0</span> : &lt;CFRunLoopSource <span class="number">0x6000001bc180</span> [<span class="number">0x7fff80615350</span>]&gt;&#123;signalled = No, valid = Yes, order = <span class="number">-1</span>, context = &lt;CFRunLoopSource context&gt;&#123;version = <span class="number">0</span>, info = <span class="number">0x0</span>, callout = PurpleEventSignalCallback (<span class="number">0x7fff384399f5</span>)&#125;&#125;</span><br><span class="line">    <span class="number">1</span> : &lt;CFRunLoopSource <span class="number">0x6000001b8b40</span> [<span class="number">0x7fff80615350</span>]&gt;&#123;signalled = No, valid = Yes, order = <span class="number">-1</span>, context = &lt;CFRunLoopSource context&gt;&#123;version = <span class="number">0</span>, info = <span class="number">0x6000001b0180</span>, callout = __handleEventQueue (<span class="number">0x7fff478e3efb</span>)&#125;&#125;</span><br><span class="line">    <span class="number">2</span> : &lt;CFRunLoopSource <span class="number">0x6000001b0240</span> [<span class="number">0x7fff80615350</span>]&gt;&#123;signalled = Yes, valid = Yes, order = <span class="number">0</span>, context = &lt;CFRunLoopSource context&gt;&#123;version = <span class="number">0</span>, info = <span class="number">0x6000010b8e40</span>, callout = FBSSerialQueueRunLoopSourceHandler (<span class="number">0x7fff365a092a</span>)&#125;&#125;</span><br><span class="line">    <span class="number">3</span> : &lt;CFRunLoopSource <span class="number">0x6000001b8cc0</span> [<span class="number">0x7fff80615350</span>]&gt;&#123;signalled = No, valid = Yes, order = <span class="number">-2</span>, context = &lt;CFRunLoopSource context&gt;&#123;version = <span class="number">0</span>, info = <span class="number">0x600003a9fe70</span>, callout = __handleHIDEventFetcherDrain (<span class="number">0x7fff478e3f07</span>)&#125;&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  sources1 = &lt;CFBasicHash <span class="number">0x600003aa7780</span> [<span class="number">0x7fff80615350</span>]&gt;&#123;</span><br><span class="line">    type = <span class="keyword">mutable</span> <span class="built_in">set</span>, </span><br><span class="line">    count = <span class="number">4</span>,</span><br><span class="line">    entries =&gt;</span><br><span class="line">    <span class="number">0</span> : &lt;CFRunLoopSource <span class="number">0x6000001b40c0</span> [<span class="number">0x7fff80615350</span>]&gt;&#123;signalled = No, valid = Yes, order = <span class="number">-1</span>, context = &lt;CFRunLoopSource context&gt;&#123;version = <span class="number">1</span>, info = <span class="number">0x510b</span>, callout = PurpleEventCallback (<span class="number">0x7fff38439a01</span>)&#125;&#125;</span><br><span class="line">    <span class="number">4</span> : &lt;CFRunLoopSource <span class="number">0x6000001b89c0</span> [<span class="number">0x7fff80615350</span>]&gt;&#123;signalled = No, valid = Yes, order = <span class="number">0</span>, context = &lt;MSHRunLoopSource <span class="number">0x600003ae9650</span>&gt; &#123;port = <span class="number">3f</span>0b, callback = <span class="number">0x0</span>&#125;&#125;</span><br><span class="line">    <span class="number">5</span> : &lt;CFRunLoopSource <span class="number">0x6000001b8a80</span> [<span class="number">0x7fff80615350</span>]&gt;&#123;signalled = No, valid = Yes, order = <span class="number">0</span>, context = &lt;MSHRunLoopSource <span class="number">0x6000034a8160</span>&gt; &#123;port = <span class="number">4207</span>, callback = <span class="number">0x7fff2e3fdd33</span>&#125;&#125;</span><br><span class="line">    <span class="number">6</span> : &lt;CFRunLoopSource <span class="number">0x6000001b80c0</span> [<span class="number">0x7fff80615350</span>]&gt;&#123;signalled = No, valid = Yes, order = <span class="number">0</span>, context = &lt;MSHRunLoopSource <span class="number">0x600003ae95f0</span>&gt; &#123;port = <span class="number">430b</span>, callback = <span class="number">0x0</span>&#125;&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  observers = (</span><br><span class="line">    <span class="string">"&lt;CFRunLoopObserver 0x6000005b0780 [0x7fff80615350]&gt;&#123;</span></span><br><span class="line"><span class="string">    valid = Yes, activities = 0x1, repeats = Yes, order = -2147483647, callout = _wrapRunLoopWithAutoreleasePoolHandler (0x7fff47848c8c), context = &lt;CFArray 0x600003ae9bf0 [0x7fff80615350]&gt;&#123;type = mutable-small, count = 0, values = ()&#125;&#125;"</span>,</span><br><span class="line">    <span class="string">"&lt;CFRunLoopObserver 0x6000005b0140 [0x7fff80615350]&gt;&#123;valid = Yes, activities = 0x20, repeats = Yes, order = 0, callout = _UIGestureRecognizerUpdateObserver (0x7fff473eda72), context = &lt;CFRunLoopObserver context 0x600001fb5180&gt;&#125;"</span>,</span><br><span class="line">    <span class="string">"&lt;CFRunLoopObserver 0x6000005b0640 [0x7fff80615350]&gt;&#123;valid = Yes, activities = 0xa0, repeats = Yes, order = 1999000, callout = _beforeCACommitHandler (0x7fff478792a7), context = &lt;CFRunLoopObserver context 0x7fc5adc01e40&gt;&#125;"</span>,</span><br><span class="line">    <span class="string">"&lt;CFRunLoopObserver 0x6000005b06e0 [0x7fff80615350]&gt;&#123;valid = Yes, activities = 0xa0, repeats = Yes, order = 2001000, callout = _afterCACommitHandler (0x7fff47879310), context = &lt;CFRunLoopObserver context 0x7fc5adc01e40&gt;&#125;"</span>,</span><br><span class="line">    <span class="string">"&lt;CFRunLoopObserver 0x6000005b0820 [0x7fff80615350]&gt;&#123;valid = Yes, activities = 0xa0, repeats = Yes, order = 2147483647, callout = _wrapRunLoopWithAutoreleasePoolHandler (0x7fff47848c8c), context = &lt;CFArray 0x600003ae9bf0 [0x7fff80615350]&gt;&#123;type = mutable-small, count = 0, values = ()&#125;&#125;"</span></span><br><span class="line">    ),</span><br><span class="line">  timers = &lt;CFArray <span class="number">0x6000010b6400</span> [<span class="number">0x7fff80615350</span>]&gt;&#123;</span><br><span class="line">    type = <span class="keyword">mutable</span>-small, count = <span class="number">1</span>, values = (</span><br><span class="line">    <span class="number">0</span> : &lt;CFRunLoopTimer <span class="number">0x6000001b86c0</span> [<span class="number">0x7fff80615350</span>]&gt;&#123;valid = Yes, firing = No, interval = <span class="number">0</span>, tolerance = <span class="number">0</span>, next fire date = <span class="number">600930808</span> (<span class="number">-10.16959</span> @ <span class="number">56632202715119</span>), callout = (Delayed Perform) UIApplication _accessibilitySetUpQuickSpeak (<span class="number">0x7fff2574c7d2</span> / <span class="number">0x7fff46da0bb6</span>) (/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Library/Developer/CoreSimulator/Profiles/Runtimes/iOS.simruntime/Contents/Resources/RuntimeRoot/System/Library/PrivateFrameworks/UIKitCore.framework/UIKitCore), context = &lt;CFRunLoopTimer context <span class="number">0x6000021ef300</span>&gt;&#125;</span><br><span class="line">    )</span><br><span class="line">    &#125;,</span><br><span class="line">  currently <span class="number">600930818</span> (<span class="number">56642369637217</span>) / soft deadline in: <span class="number">1.84467441e+10</span> sec (@ <span class="number">56632202715119</span>) / hard deadline in: <span class="number">1.84467441e+10</span> sec (@ <span class="number">56632202715119</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></pre></details><p>NSRunLoop 是对CFRunLoopRef指针的封装，虽然两者之间类型转换不消耗性能，但是NSRunLoop class 定义一个得到 CFRunLoopRef 的方法 <code>getCFRunLoop</code></p><h3 id="配置-runloop"><a class="markdownIt-Anchor" href="#配置-runloop"></a> 配置 RunLoop</h3><p>在子线程上运行 RunLoop，你一定要向 runloop 中至少添加一个 input source 或者 timer，如果 runloop 中没有可监听的 sources，那么在 runloop 运行的时候他就会立刻退出。详情看下文 <a href="#2">配置 RunLoop 事件源(sources)</a></p><p>除了添加事件源 sources，你可能还要给 runloop 添加 observers（使用它来监听当前 runloop 的执行阶段）。</p><details><summary>创建 run loop observer</summary><pre><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)threadMain&#123;</span><br><span class="line">  <span class="comment">// The application uses garbage collection, so no autorelease pool is needed.</span></span><br><span class="line">  <span class="built_in">NSRunLoop</span>* myRunLoop = [<span class="built_in">NSRunLoop</span> currentRunLoop];</span><br><span class="line"> </span><br><span class="line">  <span class="comment">// Create a run loop observer and attach it to the run loop.</span></span><br><span class="line">  <span class="built_in">CFRunLoopObserverContext</span> context = &#123;<span class="number">0</span>, <span class="keyword">self</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>&#125;;</span><br><span class="line">  <span class="built_in">CFRunLoopObserverRef</span> observer = <span class="built_in">CFRunLoopObserverCreate</span>(</span><br><span class="line">  kCFAllocatorDefault,</span><br><span class="line">  kCFRunLoopAllActivities, </span><br><span class="line">  <span class="literal">YES</span>,</span><br><span class="line">  <span class="number">0</span>, </span><br><span class="line">  &amp;myRunLoopObserver, </span><br><span class="line">  &amp;context);</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">if</span> (observer)&#123;</span><br><span class="line">  <span class="built_in">CFRunLoopRef</span> cfLoop = [myRunLoop getCFRunLoop];</span><br><span class="line">  <span class="built_in">CFRunLoopAddObserver</span>(cfLoop, observer, kCFRunLoopDefaultMode);</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="comment">// Create and schedule the timer.</span></span><br><span class="line">  [<span class="built_in">NSTimer</span> scheduledTimerWithTimeInterval:<span class="number">0.1</span> target:<span class="keyword">self</span> selector:<span class="keyword">@selector</span>(doFireTimer:) userInfo:<span class="literal">nil</span> repeats:<span class="literal">YES</span>];</span><br><span class="line"> </span><br><span class="line">  <span class="built_in">NSInteger</span> loopCount = <span class="number">10</span>;</span><br><span class="line">  <span class="keyword">do</span>&#123;</span><br><span class="line">  <span class="comment">// Run the run loop 10 times to let the timer fire.</span></span><br><span class="line">  [myRunLoop runUntilDate:[<span class="built_in">NSDate</span> dateWithTimeIntervalSinceNow:<span class="number">1</span>]];</span><br><span class="line">  loopCount--;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> (loopCount);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></pre></details><p>给 thread 配置 runloop 让处于保活状态，给runloop 添加一个 input sources来接受消息会比较好。虽然只有一个 timer sources 也可以进入 runloop，但是一旦 timer fires，timer 就会失效，导致 runloop 退出。添加一个 repeating timer 可以让 runloop 保活，可是反复调用 timer fire，会反复唤醒thread(这实际上是轮询的另一种形式)，相对来说，使用 input source 来等待 event 发生，没发生前thread 都处于睡眠状态。</p><h3 id="开启-runloop"><a class="markdownIt-Anchor" href="#开启-runloop"></a> 开启 RunLoop</h3><ul><li>只有子线程才需要开启 RunLoop</li><li>一个 RunLoop 实例至少有一个 input source or timer 来监听事件，如果没有可监听的sources，RunLoop开启后会立即退出。</li></ul><p>启动 RunLoop 的方法：</p><table><thead><tr><th>方式</th><th>方法名(NSRunLoop)</th><th>解释</th></tr></thead><tbody><tr><td>无条件</td><td>run</td><td>最简单但也<code>最不可取的方案</code>。会让线程进入无限循环，对 run loop 很难控制。可以添加和移除 input source 和 timer，但只能通过 kill 的方式停止 run loop。无法在自定义模式下运行 runloop。</td></tr><tr><td>设定时间限制</td><td>runUntilDate:</td><td>run loop 在收到事件或超时前会一直运行。run loop 结束后可以重启，并处理接下来的事情。比上一种方式更好，提供了时间限制。</td></tr><tr><td>处于特定模式</td><td>runMode:beforeDate:</td><td>相比上一种方式，增加了在特定模式下运行 run loop</td></tr></tbody></table><details><summary>Running a run loop</summary><pre><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)skeletonThreadMain &#123;</span><br><span class="line">  <span class="comment">// Set up an autorelease pool here if not using garbage collection.</span></span><br><span class="line">  <span class="built_in">BOOL</span> done = <span class="literal">NO</span>;</span><br><span class="line"> </span><br><span class="line">  <span class="comment">// Add your sources or timers to the run loop and do any other setup.</span></span><br><span class="line"> </span><br><span class="line">  <span class="keyword">do</span>&#123;</span><br><span class="line">    <span class="comment">// Start the run loop but return after each source is handled.</span></span><br><span class="line">    SInt32 result = <span class="built_in">CFRunLoopRunInMode</span>(kCFRunLoopDefaultMode, <span class="number">10</span>, <span class="literal">YES</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// If a source explicitly stopped the run loop, or if there are no</span></span><br><span class="line">    <span class="comment">// sources or timers, go ahead and exit.</span></span><br><span class="line">    <span class="keyword">if</span> ((result == kCFRunLoopRunStopped) || (result == kCFRunLoopRunFinished))</span><br><span class="line">    done = <span class="literal">YES</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// Check for any other exit conditions here and set the</span></span><br><span class="line">    <span class="comment">// done variable as needed.</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> (!done);</span><br><span class="line">  <span class="comment">// Clean up code here. Be sure to release any allocated autorelease pools.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></pre></details><p>可以递归启动 run loop。也就是说可以在 input source 或 timer 的回调处理函数中调用 CFRunLoopRun, CFRunLoopRunInMode 或上面提到的 NSRunLoop 的三个方法，而且嵌套的 run loop 可以在任意 Mode 下运行。</p><h3 id="退出-runloop"><a class="markdownIt-Anchor" href="#退出-runloop"></a> 退出 RunLoop</h3><p>在处理事件之前，有两种方法可以让 RunLoop退出：</p><ul><li>给 run loop 配置 timeout 值</li><li>告诉 run loop 停止</li></ul><p>使用timeout的方式：RunLoop 退出之前会执行完所有正常情况下的处理，包括向 observers 发送通知。</p><p>使用 CFRunLoopStop()：和 timeout方式相似。RunLoop 会把剩下的所有状态发送给 observers，然后退出。不同的是：你只能使用 CFRunLoopStop 停止以 Unconditionally 方式开启的 RunLoop。</p><p>要注意的是 CFRunLoopStop 只会停止对 CFRunLoopRun 和 CFRunLoopRunInMode 的调用。对于 Cocoa 框架相当于只停止一次 runMode:beforeDate: 的调用，而不是退出 run loop。stop 一次运行和 exit 整个 run loop 是不一样的。</p><p>虽然移除 RunLoop 的 input source 和 timer 也会导致其退出，但这种方法不可靠。因为有些系统程序会向 RunLoop 中添加 input source，开发者根本不知道有这回事，移除的时候就会漏掉，自然就不会导致 RunLoop 退出。</p><h2 id="配置-runloop-事件源sources"><a class="markdownIt-Anchor" href="#配置-runloop-事件源sources"></a> 配置 RunLoop 事件源(sources)</h2><h3 id="定义-custom-input-source"><a class="markdownIt-Anchor" href="#定义-custom-input-source"></a> 定义 Custom Input Source</h3><p>创建自定义输入源涉及定义以下内容：</p><ul><li>你想让 input source 处理的信息</li><li>A scheduler routine：用于让外部 client 获知如何联系 input source</li><li>A handler routine：执行任何 client 发出请求的</li><li>A cancellation routine：使 input source 失效</li></ul><p>因为你使用 custom input source 来处理 custom information，配置的过程会相当灵活。The scheduler, handler, and cancellation routines，是你创建 custome input source 的关键。但是，input source 剩下的大部分行为都没有在这几个历程中，eg：</p><ul><li>向 input source 传递数据的方式需要你自己实现</li><li>让其他线程知道这个 input source 的存在</li></ul><p>下图给出了一个 custom input source 配置 demo。在这个例子中，<br>app 的主线程维护 ：</p><ul><li>引用 input source</li><li>引用 input source 自定义的 command buffer</li><li>引用 runloop[已经把input source 加到里面了]</li></ul><p>当 main thread 有一个task想要 worker thread 处理，main thread 会post 一个 command 到 command buffer 中，顺带把 worker thread 需要的信息发给它，然后 main thread 开启 task（因为main thread 和 worker thread 都有可以访问 command buffer，所以访问 command buffer 的过程要 sync）。一旦命令发布，main thread 向 input source 发送消息，唤起 worker thread 的runloop。worker thread 的 runloop 一旦接受到唤起命令，他就会调用 input source 的 handler 程序，handler 会处理 command buffer 中的命令。</p><p>操作 custom input source<br><img src="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Multithreading/Art/custominputsource.jpg" alt=" Operating a custom input source"></p><h4 id="定义-input-source"><a class="markdownIt-Anchor" href="#定义-input-source"></a> 定义 Input Source</h4><p>定义 custome input source 需要 Core Foundation，接口都是基于 C 的！</p><p>下面代码封装成 OC：RunLoopSource 封装了 CFRunLoopSourceRef，并管理一个 command buffer，并使用 buffer 接收其他线程的消息。RunLoopContext 封装了 CFRunLoopRef 和 RunLoopSource 指针，用于向应用主线程传递 source 对象和 run loop 引用。</p><details><summary>Custom Input Source 对象定义</summary><pre><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// These are the CFRunLoopSourceRef callback functions.</span></span><br><span class="line"><span class="keyword">void</span> RunLoopSourceScheduleRoutine (<span class="keyword">void</span> *info, <span class="built_in">CFRunLoopRef</span> rl, <span class="built_in">CFStringRef</span> mode);</span><br><span class="line"><span class="keyword">void</span> RunLoopSourcePerformRoutine (<span class="keyword">void</span> *info);</span><br><span class="line"><span class="keyword">void</span> RunLoopSourceCancelRoutine (<span class="keyword">void</span> *info, <span class="built_in">CFRunLoopRef</span> rl, <span class="built_in">CFStringRef</span> mode);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">RunLoopSource</span> : <span class="title">NSObject</span></span>&#123;</span><br><span class="line">  <span class="built_in">CFRunLoopSourceRef</span> runLoopSource;</span><br><span class="line">  <span class="built_in">NSMutableArray</span>* commands;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">- (<span class="keyword">id</span>)init;</span><br><span class="line">- (<span class="keyword">void</span>)addToCurrentRunLoop;</span><br><span class="line">- (<span class="keyword">void</span>)invalidate;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// Handler method</span></span><br><span class="line">- (<span class="keyword">void</span>)sourceFired;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// Client interface for registering commands to process</span></span><br><span class="line">- (<span class="keyword">void</span>)addCommand:(<span class="built_in">NSInteger</span>)command withData:(<span class="keyword">id</span>)data;</span><br><span class="line">- (<span class="keyword">void</span>)fireAllCommandsOnRunLoop:(<span class="built_in">CFRunLoopRef</span>)runloop;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// RunLoopContext is a container object used during registration of the input source.</span></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">RunLoopContext</span> : <span class="title">NSObject</span></span>&#123;</span><br><span class="line">  <span class="built_in">CFRunLoopRef</span>  runLoop;</span><br><span class="line">  RunLoopSource*  source;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">readonly</span>) <span class="built_in">CFRunLoopRef</span> runLoop;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">readonly</span>) RunLoopSource* source;</span><br><span class="line"> </span><br><span class="line">- (<span class="keyword">id</span>)initWithSource:(RunLoopSource*)src andLoop:(<span class="built_in">CFRunLoopRef</span>)loop;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure></pre></details><p>虽然 Objective-C 代码管理 input source 的自定义数据，但是把 input source 添加到 runloop 中需要基于 c 的方法。 第一个被调用的例程是 scheduler，当你把 source 添加到 runloop 时就会调用。 input source 只有一个 client，也就是主线程。这里 scheduler 做的事情就是用 application delegate 的 registerSource: 方法将 RunLoopContext 对象中的信息传递过去，以便之后 application delegate 与 input source 通信时使用。</p><p><span id="4">Scheduling a run loop source</span></p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> RunLoopSourceScheduleRoutine (<span class="keyword">void</span> *info, <span class="built_in">CFRunLoopRef</span> rl, <span class="built_in">CFStringRef</span> mode)&#123;</span><br><span class="line">  RunLoopSource* obj = (RunLoopSource*)info;</span><br><span class="line">  AppDelegate*   del = [AppDelegate sharedAppDelegate];</span><br><span class="line">  RunLoopContext* theContext = [[RunLoopContext alloc] initWithSource:obj andLoop:rl];</span><br><span class="line"> </span><br><span class="line">  [del performSelectorOnMainThread:<span class="keyword">@selector</span>(registerSource:)</span><br><span class="line">        withObject:theContext waitUntilDone:<span class="literal">NO</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当向 input source 发送消息的时候，用于处理数据的 perform 函数会被调用，它是最重要的回调之一。下面的这个方法只是把请求转发给了 RunLoopSource 的 sourceFired 方法。后面会列出 sourceFired 处理 command buffer 的逻辑。</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Performing work in the input source</span></span><br><span class="line"><span class="keyword">void</span> RunLoopSourcePerformRoutine (<span class="keyword">void</span> *info)&#123;</span><br><span class="line">  RunLoopSource*  obj = (__bridge RunLoopSource*)info;</span><br><span class="line">  [obj sourceFired];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果你以前使用 CFRunLoopSourceInvalidate() 方法把 input source 从runloop中移除，系统会调用 input source 的 cancellation routine. 你可以使用这个 routine 通知 clients，你的input source 失效，需要移除他们对 input source 的引用。下面的 cancellation routine 体用系统传入的 RunLoopSource，runloop，runloopMode 创建一个新的 RunLoopContext，并传给 application delegate。</p><p><span id="5">Invalidating a run loop source:</span></p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> RunLoopSourceCancelRoutine (<span class="keyword">void</span> *info, <span class="built_in">CFRunLoopRef</span> rl, <span class="built_in">CFStringRef</span> mode)&#123;</span><br><span class="line">  RunLoopSource* obj = (__bridge RunLoopSource*)info;</span><br><span class="line">  AppDelegate* del = [AppDelegate sharedAppDelegate];</span><br><span class="line">  RunLoopContext* theContext = [[RunLoopContext alloc] initWithSource:obj andLoop:rl];</span><br><span class="line"> </span><br><span class="line">  [del performSelectorOnMainThread:<span class="keyword">@selector</span>(removeSource:)</span><br><span class="line">        withObject:theContext waitUntilDone:<span class="literal">YES</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意 application delegate’s 的 registerSource: and removeSource: 方法在<a href="#3">下面</a>有</p><h4 id="把-input-source-添加到-run-loop"><a class="markdownIt-Anchor" href="#把-input-source-添加到-run-loop"></a> 把 Input Source 添加到 Run Loop</h4><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">id</span>)init&#123;</span><br><span class="line">  <span class="built_in">CFRunLoopSourceContext</span> context = &#123;<span class="number">0</span>, <span class="keyword">self</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>,</span><br><span class="line">          &amp;RunLoopSourceScheduleRoutine,</span><br><span class="line">          RunLoopSourceCancelRoutine,</span><br><span class="line">          RunLoopSourcePerformRoutine&#125;;</span><br><span class="line"> </span><br><span class="line">  _runLoopSource = <span class="built_in">CFRunLoopSourceCreate</span>(<span class="literal">NULL</span>, <span class="number">0</span>, &amp;context);</span><br><span class="line">  commands = [[<span class="built_in">NSMutableArray</span> alloc] init];</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)addToCurrentRunLoop&#123;</span><br><span class="line">  <span class="built_in">CFRunLoopRef</span> runLoop = <span class="built_in">CFRunLoopGetCurrent</span>();</span><br><span class="line">  <span class="built_in">CFRunLoopAddSource</span>(runLoop, _runLoopSource, kCFRunLoopDefaultMode);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当 worker 线程调用 addToCurrentRunLoop 方法时，才会将 input source 放到 runloop 中，并在此时调用 RunLoopSourceScheduleRoutine 。input source 加到 runloop 之后，thread 就可以跑起他的 runloop ，等待他派发 task 。</p><ul><li>CFRunLoopSourceContext 结构体描述了 custom input source（source0）的上下文</li><li>CFRunLoopSourceContext1 结构体描述了 port-based input source（source1）的上下文</li></ul><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> &#123;</span><br><span class="line">  <span class="built_in">CFIndex</span>version;</span><br><span class="line">  <span class="keyword">void</span> *info;</span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">void</span> *(*<span class="keyword">retain</span>)(<span class="keyword">const</span> <span class="keyword">void</span> *info);</span><br><span class="line">  <span class="keyword">void</span>(*release)(<span class="keyword">const</span> <span class="keyword">void</span> *info);</span><br><span class="line">  <span class="built_in">CFStringRef</span>(*copyDescription)(<span class="keyword">const</span> <span class="keyword">void</span> *info);</span><br><span class="line">  Boolean(*equal)(<span class="keyword">const</span> <span class="keyword">void</span> *info1, <span class="keyword">const</span> <span class="keyword">void</span> *info2);</span><br><span class="line">  <span class="built_in">CFHashCode</span>(*hash)(<span class="keyword">const</span> <span class="keyword">void</span> *info);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span>(*schedule)(<span class="keyword">void</span> *info, <span class="built_in">CFRunLoopRef</span> rl, <span class="built_in">CFRunLoopMode</span> mode);</span><br><span class="line">  <span class="keyword">void</span>(*cancel)(<span class="keyword">void</span> *info, <span class="built_in">CFRunLoopRef</span> rl, <span class="built_in">CFRunLoopMode</span> mode);</span><br><span class="line">  <span class="keyword">void</span>(*perform)(<span class="keyword">void</span> *info);</span><br><span class="line"></span><br><span class="line">&#125; <span class="built_in">CFRunLoopSourceContext</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> &#123;</span><br><span class="line">  <span class="built_in">CFIndex</span>version;</span><br><span class="line">  <span class="keyword">void</span> *info;</span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">void</span> *(*<span class="keyword">retain</span>)(<span class="keyword">const</span> <span class="keyword">void</span> *info);</span><br><span class="line">  <span class="keyword">void</span>(*release)(<span class="keyword">const</span> <span class="keyword">void</span> *info);</span><br><span class="line">  <span class="built_in">CFStringRef</span>(*copyDescription)(<span class="keyword">const</span> <span class="keyword">void</span> *info);</span><br><span class="line">  Boolean(*equal)(<span class="keyword">const</span> <span class="keyword">void</span> *info1, <span class="keyword">const</span> <span class="keyword">void</span> *info2);</span><br><span class="line">  <span class="built_in">CFHashCode</span>(*hash)(<span class="keyword">const</span> <span class="keyword">void</span> *info);</span><br><span class="line"><span class="meta">#if (TARGET_OS_MAC &amp;&amp; !(TARGET_OS_EMBEDDED || TARGET_OS_IPHONE)) || (TARGET_OS_EMBEDDED || TARGET_OS_IPHONE)</span></span><br><span class="line">  mach_port_t(*getPort)(<span class="keyword">void</span> *info);</span><br><span class="line">  <span class="keyword">void</span> *(*perform)(<span class="keyword">void</span> *msg, <span class="built_in">CFIndex</span> size, <span class="built_in">CFAllocatorRef</span> allocator, <span class="keyword">void</span> *info);</span><br><span class="line"><span class="meta">#else</span></span><br><span class="line">  <span class="keyword">void</span> *(*getPort)(<span class="keyword">void</span> *info);</span><br><span class="line">  <span class="keyword">void</span>(*perform)(<span class="keyword">void</span> *info);</span><br><span class="line"><span class="meta">#endif</span></span><br><span class="line">&#125; <span class="built_in">CFRunLoopSourceContext1</span>;</span><br></pre></td></tr></table></figure><h4 id="input-source-与-client-的协作"><a class="markdownIt-Anchor" href="#input-source-与-client-的协作"></a> Input Source 与 Client 的协作</h4><p>想使用 input source，你需要从其他 thread 发送消息。input source 的全部目的是使其关联 thread 处于休眠状态，直到有事要做。这需要让你的应用程序中的其他线程知道输入源并有一种与之通信的方法。</p><p>当 input source 第一次装载到 run loop 的时候，可以向 client 发送注册 input source 的请求。可以将一个 input source 直接或间接注册到多个 client 中。下面的代码展示了 application delegate 提供的注册方法 registerSource:，之前提到过回调函数 RunLoopSourceScheduleRoutine 的实现会调用 registerSource:。也就是说执行流程是 install(addToCurrentRunLoop) -&gt; schedule(RunLoopSourceScheduleRoutine) -&gt; register(registerSource:)。对应地，当 input source 从 run loop 中被移除，回调函数 RunLoopSourceCancelRoutine 中会调用 removeSource: 方法。</p><p><a href="#4">scheduler an input source</a> 和 <a href="#5">Invalidating an input source</a><br><span id="3"></span></p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)registerSource:(RunLoopContext*)sourceInfo;&#123;</span><br><span class="line">  [sourcesToPing addObject:sourceInfo];</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">- (<span class="keyword">void</span>)removeSource:(RunLoopContext*)sourceInfo&#123;</span><br><span class="line">  <span class="keyword">id</span> objToRemove = <span class="literal">nil</span>;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">for</span> (RunLoopContext* context <span class="keyword">in</span> sourcesToPing) &#123;</span><br><span class="line">  <span class="keyword">if</span> ([context isEqual:sourceInfo]) &#123;</span><br><span class="line">    objToRemove = context;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">if</span> (objToRemove)</span><br><span class="line">  [sourcesToPing removeObject:objToRemove];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="向-input-source-发送信号"><a class="markdownIt-Anchor" href="#向-input-source-发送信号"></a> 向 Input Source 发送信号</h4><p>在将数据交给 Input Source 后，客户端必须发信号通知源并唤醒其 runloop。消息传达 input source 以后，thread 可以处于休眠状态，你应该显示的唤起 runloop，如果处理完了可能会导致错误结果！</p><p>Waking up the run loop:</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)fireCommandsOnRunLoop:(<span class="built_in">CFRunLoopRef</span>)runloop &#123;</span><br><span class="line">  <span class="built_in">CFRunLoopSourceSignal</span>(runLoopSource);</span><br><span class="line">  <span class="built_in">CFRunLoopWakeUp</span>(runloop);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="配置-timer-sources"><a class="markdownIt-Anchor" href="#配置-timer-sources"></a> 配置 Timer Sources</h3><p>创建 Timer Sources：创建一个 timer 对象，然后在 runloop中调度它。<br>Cocoa 中使用 NSTimer，Core Foundation 中使用 CFRunLoopTimerRef 类型。虽然二者是 toll-free bridged 的，但是 NSTimer 提供的 API 更便捷：</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:</span><br><span class="line">scheduledTimerWithTimeInterval:invocation:repeats:</span><br></pre></td></tr></table></figure><p>上面这2个方法会创建 timer 并添加到当前线程 runloop 的 DefaultMode 中。也可以手动创建一个 NSTimer 对象并用 NSRunLoop 的 addTimer:forMode: 方法将其添加到 runloop 的指定 Mode 中。</p><p>下面的代码展示了两种添加 timer 的方式：第一个 timer 延迟 1 秒触发并每隔 0.1 秒重复触发，第二个 timer 延迟 0.2 秒触发然后每隔 0.2 秒重复触发。</p><p>Creating and scheduling timers using NSTimer:</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSRunLoop</span>* myRunLoop = [<span class="built_in">NSRunLoop</span> currentRunLoop];</span><br><span class="line"> </span><br><span class="line"><span class="comment">// Create and schedule the first timer.</span></span><br><span class="line"><span class="built_in">NSDate</span>* futureDate = [<span class="built_in">NSDate</span> dateWithTimeIntervalSinceNow:<span class="number">1.0</span>];</span><br><span class="line"><span class="built_in">NSTimer</span>* myTimer = [[<span class="built_in">NSTimer</span> alloc] initWithFireDate:futureDate</span><br><span class="line">            interval:<span class="number">0.1</span></span><br><span class="line">            target:<span class="keyword">self</span></span><br><span class="line">            selector:<span class="keyword">@selector</span>(myDoFireTimer1:)</span><br><span class="line">            userInfo:<span class="literal">nil</span></span><br><span class="line">             repeats:<span class="literal">YES</span>];</span><br><span class="line">[myRunLoop addTimer:myTimer forMode:<span class="built_in">NSDefaultRunLoopMode</span>];</span><br><span class="line"> </span><br><span class="line"><span class="comment">// Create and schedule the second timer.</span></span><br><span class="line">[<span class="built_in">NSTimer</span> scheduledTimerWithTimeInterval:<span class="number">0.2</span></span><br><span class="line">        target:<span class="keyword">self</span></span><br><span class="line">        selector:<span class="keyword">@selector</span>(myDoFireTimer2:)</span><br><span class="line">        userInfo:<span class="literal">nil</span></span><br><span class="line">         repeats:<span class="literal">YES</span>];</span><br></pre></td></tr></table></figure><p>Creating and scheduling a timer using Core Foundation:</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">CFRunLoopRef</span> runLoop = <span class="built_in">CFRunLoopGetCurrent</span>();</span><br><span class="line"><span class="built_in">CFRunLoopTimerContext</span> context = &#123;<span class="number">0</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>&#125;;</span><br><span class="line"><span class="built_in">CFRunLoopTimerRef</span> timer = <span class="built_in">CFRunLoopTimerCreate</span>(kCFAllocatorDefault, <span class="number">0.1</span>, <span class="number">0.3</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">          &amp;myCFTimerCallback, &amp;context);</span><br><span class="line"> </span><br><span class="line"><span class="built_in">CFRunLoopAddTimer</span>(runLoop, timer, kCFRunLoopCommonModes);</span><br></pre></td></tr></table></figure><h3 id="配置-a-port-based-input-source"><a class="markdownIt-Anchor" href="#配置-a-port-based-input-source"></a> 配置 a Port-Based Input Source</h3><p>Cocoa and Core Foundation 都提供了 port-based 对象用于线程 or 进程间通讯，下面会使用不同类型的 ports 实现建立 port 通讯</p><h4 id="配置-nsmachport-object"><a class="markdownIt-Anchor" href="#配置-nsmachport-object"></a> 配置 NSMachPort Object</h4><p>使用 NSMachPort 对象建立本地连接：</p><ul><li>创建 NSMachPort 对象并添加到 primary 线程的 runloop 中。</li><li>当启动 secondary 线程时将这个 NSMachPort 对象传递给 secondary 线程的入口函数。</li><li>secondary 线程会用这个 NSMachPort 对象往 primary 线程发消息。</li></ul><h5 id="main-thread-代码实现"><a class="markdownIt-Anchor" href="#main-thread-代码实现"></a> main thread 代码实现</h5><p>下面的代码是启动 secondary worker 线程的主要代码。使用 Cocoa 框架的代码要比 Core Foundation 的少，效果几乎一样。有个不同点是 Cocoa 直接传递 NSPort 对象，而 Core Foundation 传递端口名字符串。</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)launchThread&#123;</span><br><span class="line">  <span class="built_in">NSPort</span>* myPort = [<span class="built_in">NSMachPort</span> port];</span><br><span class="line">  <span class="keyword">if</span> (myPort) &#123;</span><br><span class="line">  <span class="comment">// This class handles incoming port messages.</span></span><br><span class="line">  [myPort setDelegate:<span class="keyword">self</span>];</span><br><span class="line"> </span><br><span class="line">  <span class="comment">// Install the port as an input source on the current run loop.</span></span><br><span class="line">  [[<span class="built_in">NSRunLoop</span> currentRunLoop] addPort:myPort forMode:<span class="built_in">NSDefaultRunLoopMode</span>];</span><br><span class="line"> </span><br><span class="line">  <span class="comment">// Detach the thread. Let the worker release the port.</span></span><br><span class="line">  [<span class="built_in">NSThread</span> detachNewThreadSelector:<span class="keyword">@selector</span>(LaunchThreadWithPort:)</span><br><span class="line">     toTarget:[MyWorkerClass <span class="keyword">class</span>] withObject:myPort];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了建立好 threads 间的通讯，你可能想要得到 worker thread 将他的本地端口号发送给 main thread，把这个当做校验消息。main thread 得到 worker thread 的端口号，校验完毕，就知道启动 secondary thread 的过程一切进展顺利。主线程会将 worker thread 的 portID 保存起来。</p><p>下面的 handlePortMessage: 方法会在线程自己的本地端口收到数据后被调用。NSPortMessage 持有两个端口对象：发送端口和接收端口。handlePortMessage: 方法中使用 [portMessage sendPort] 获取到了发送端口对象，也就是 secondary thread 拥有的本地端口。也就是 secondary thread 启动后会给 primary thread 发消息，告知自己的端口对象，主线程会将其存下来以备日后使用。msgid 标记了消息的唯一 ID。</p><p>Handling Mach port messages:</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#define kCheckinMessage 100</span></span><br><span class="line"><span class="comment">// Handle responses from the worker thread.</span></span><br><span class="line">- (<span class="keyword">void</span>)handlePortMessage:(<span class="built_in">NSPortMessage</span> *)portMessage&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> message = [portMessage msgid];</span><br><span class="line">  <span class="built_in">NSPort</span>* distantPort = <span class="literal">nil</span>;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">if</span> (message == kCheckinMessage) &#123;</span><br><span class="line">  <span class="comment">// Get the worker thread’s communications port.</span></span><br><span class="line">  distantPort = [portMessage sendPort];</span><br><span class="line"> </span><br><span class="line">  <span class="comment">// Retain and save the worker port for later use.</span></span><br><span class="line">  [<span class="keyword">self</span> storeDistantPort:distantPort];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span>&#123;</span><br><span class="line">  <span class="comment">// Handle other messages.</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="secondary-thread-代码实现"><a class="markdownIt-Anchor" href="#secondary-thread-代码实现"></a> secondary thread 代码实现</h5><p>对于 secondary worker thread, 你一定要明确他的端口号！用它与 primary thread 通讯。</p><p>下面代码：如何配置 worker thread，worker thread 的入口函数会被传入 primary thread 的端口对象。下面代码中的 MyWorkerClass 是个辅助类，它的 sendCheckinMessage: 方法负责创建worker thread的本地端口，并发消息给 primary thread 。</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">+(<span class="keyword">void</span>)LaunchThreadWithPort:(<span class="keyword">id</span>)inData&#123;</span><br><span class="line">  <span class="built_in">NSAutoreleasePool</span>*  pool = [[<span class="built_in">NSAutoreleasePool</span> alloc] init];</span><br><span class="line"> </span><br><span class="line">  <span class="comment">// Set up the connection between this thread and the main thread.</span></span><br><span class="line">  <span class="built_in">NSPort</span>* distantPort = (<span class="built_in">NSPort</span>*)inData;</span><br><span class="line"> </span><br><span class="line">  MyWorkerClass*  workerObj = [[<span class="keyword">self</span> alloc] init];</span><br><span class="line">  [workerObj sendCheckinMessage:distantPort];</span><br><span class="line">  [distantPort release];</span><br><span class="line"> </span><br><span class="line">  <span class="comment">// Let the run loop process things.</span></span><br><span class="line">  <span class="keyword">do</span> &#123;</span><br><span class="line">  [[<span class="built_in">NSRunLoop</span> currentRunLoop] runMode:<span class="built_in">NSDefaultRunLoopMode</span></span><br><span class="line">         beforeDate:[<span class="built_in">NSDate</span> distantFuture]];</span><br><span class="line">  &#125; <span class="keyword">while</span> (![workerObj shouldExit]);</span><br><span class="line"> </span><br><span class="line">  [workerObj release];</span><br><span class="line">  [pool release];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="配置-nsmessageport-object"><a class="markdownIt-Anchor" href="#配置-nsmessageport-object"></a> 配置 NSMessagePort Object</h4><h4 id="使用-core-foundation-配置-port-based-input-source"><a class="markdownIt-Anchor" href="#使用-core-foundation-配置-port-based-input-source"></a> 使用 Core Foundation 配置 Port-Based Input Source</h4><blockquote><p><a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Multithreading/RunLoopManagement/RunLoopManagement.html#//apple_ref/doc/uid/10000057i-CH16-SW5" target="_blank" rel="noopener">Threading Programming Guide-RunLoop</a><br><a href="http://yulingtianxia.com/blog/2017/09/17/Threading-Programming-Guide-2/#%E8%AF%A5%E4%BD%95%E6%97%B6%E4%BD%BF%E7%94%A8-Run-Loop%EF%BC%9F" target="_blank" rel="noopener">Threading Programming Guide(2)</a></p></blockquote><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> iOS Programming </category>
          
          <category> runloop </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> 底层 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RunLoop 原理分析</title>
      <link href="/2017/08/27/runloop/RunLoop%E5%88%86%E6%9E%90/"/>
      <url>/2017/08/27/runloop/RunLoop%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Jun 02 2020 17:35:52 GMT+0800 (CST) --><p><img src="/img/runloop_title.jpeg" alt="runloop_title"></p><h2 id="带着问题思考-questions"><a class="markdownIt-Anchor" href="#带着问题思考-questions"></a> 带着问题思考 Questions</h2><ol><li>RunLoop 他是什么？</li><li>RunLoop 结构是什么样的？</li><li>为什么要是这样的结构，其他的样子不可以吗？</li><li>RunLoop 内部分析？</li><li>系统中有哪些功能使用了 runloop？</li><li>开发中如何使用 RunLoop</li></ol><p>引用 CFRunLoopRef 源码：<a href="https://opensource.apple.com/tarballs/CF/CF-1153.18.tar.gz" target="_blank" rel="noopener">CF-1153.18.tar.gz</a></p><h2 id="runloop-来源"><a class="markdownIt-Anchor" href="#runloop-来源"></a> RunLoop 来源</h2><ul><li>一般来说，程序只运行一次，然后终止. 像命令行驱动程序。但是这样的程序没有用户交互性</li><li>为了使程序增加用户交互性，就需要一个机制让程序不退出等待用户操作。使用<a href="https://en.wikipedia.org/wiki/Event_loop" target="_blank" rel="noopener">Event Loop</a>设计模式，让 thread 关联一个 event loop，监听 event，然后调用事件的 reactor 处理事件通常是交由 event loop 关联的 thread 处理。这样使 thread 保活</li></ul><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> main</span><br><span class="line">    initialize()</span><br><span class="line">    <span class="keyword">while</span> message != quit</span><br><span class="line">        message := get_next_message()</span><br><span class="line">        process_message(message)</span><br><span class="line">    <span class="keyword">end</span> <span class="keyword">while</span></span><br><span class="line"><span class="keyword">end</span> <span class="keyword">function</span></span><br></pre></td></tr></table></figure><p><img src="/img/event_loop.jpeg" alt="Event loop 机制"></p><p>Event Loop 在很多平台上都有，无论是 GUI，开始系统事件都需要 Event Loop 模式来处理交互程序</p><table><thead><tr><th style="text-align:left">环境</th><th style="text-align:left">Event_Loop对应名称</th></tr></thead><tbody><tr><td style="text-align:left">OSX/iOS</td><td style="text-align:left">RunLoop</td></tr><tr><td style="text-align:left">Windows</td><td style="text-align:left">消息队列</td></tr><tr><td style="text-align:left">Linux</td><td style="text-align:left">epoll，select</td></tr></tbody></table><p>消息队列使得调用方跟被调用方之间解耦</p><h2 id="osxios-中的-event-loop"><a class="markdownIt-Anchor" href="#osxios-中的-event-loop"></a> OSX/iOS 中的 Event Loop</h2><h3 id="runloop-特点"><a class="markdownIt-Anchor" href="#runloop-特点"></a> RunLoop 特点：</h3><ul><li>他是与线程相关的基础架构的一部分，充当着循环处理、调度事件/转发消息的角色，管理thread运行状态。<ul><li>它使得线程不会执行完单个任务后就立刻结束</li><li>让线程在没有任务时保持休眠状态</li><li>在需要处理消息时被立刻唤醒</li></ul></li><li>RunLoop 是个对象，每个线程都可以有对应的 runloop。runloop的管理机制并不完全是自动的，有时需要设计好 runloop 的运行时间和事件处理回调。<ul><li>除了主线程外，子线程需要开发者手动去配置并运行它的 runloop</li><li>主线程的 runloop 已经由系统自动配置并运行了。</li></ul></li><li>runloop 在 Cocoa 和 Core Foundation 有两个对应的类：NSRunLoop 和 CFRunLoop</li></ul><h3 id="runloop-中的-mode"><a class="markdownIt-Anchor" href="#runloop-中的-mode"></a> RunLoop 中的 Mode</h3><details><summary>RunLoop 和 Mode 简化源码</summary><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> __<span class="title">CFRunLoopMode</span> *<span class="title">CFRunLoopModeRef</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> __<span class="title">CFRunLoopMode</span> &#123;</span></span><br><span class="line">  CFStringRef _name;      <span class="comment">// Mode Name, 例如 @"kCFRunLoopDefaultMode"</span></span><br><span class="line">  CFMutableSetRef _sources0;  <span class="comment">// Set 自定义的 input source，由其他 thread 发送消息</span></span><br><span class="line">  CFMutableSetRef _sources1;  <span class="comment">// Set 基于 port 包含了一个 mach_port 和一个回调（函数指针），用于通过内核和其他线程相互发送消息</span></span><br><span class="line">  CFMutableArrayRef _observers; <span class="comment">// Array</span></span><br><span class="line">  CFMutableArrayRef _timers;  <span class="comment">// Array</span></span><br><span class="line">  ...</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> __<span class="title">CFRunLoop</span> *<span class="title">CFRunLoopRef</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> __<span class="title">CFRunLoop</span> &#123;</span></span><br><span class="line">  pthread thread;</span><br><span class="line">  CFMutableSetRef _commonModes;   <span class="comment">// Set 通用 modes集合，任何Source/Observer/Timer 加入其中以后，_commonModes 中的每个 mode 都会引用这些(Source/Observer/Timer ),并对其做相应处理</span></span><br><span class="line">  CFMutableSetRef _commonModeItems; <span class="comment">// Set 所有_commonModes中引用 &lt;Source/Observer/Timer&gt;</span></span><br><span class="line">  CFRunLoopModeRef _currentMode;  <span class="comment">// Current Runloop Mode CFRunLoopCopyAllModes方法会得到它</span></span><br><span class="line">  ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></details><p><img src="/img/run_loop_structure.jpeg" alt="run_loop_structure"></p><p>Input Sources:</p><ul><li>Port-Based Sources：监听App的 Mach Port，由内核发出信号，输入源收到信号后，执行相关的例程。(sources1)</li><li>Custom Input Sources：监听自定义的输入源，需要在其它线程手动发送信号，输入源收到信号后，执行相关的例程。(sources0)</li><li>Cocoa Perform Selector Sources：Cocoa中自定义的输入源，目的是在不同线程中执行任务，同一线程中的任务是顺序执行的,当任务执行完成后系统会自动移除这个源。（注意：在目标线程中执行任务时，这个目标线程必须有活跃的RunLoop）(sources0)</li></ul><p><code>时间源 time sources</code><br>需要监听runloop的当前状态的：<br><code>监听者 observers</code></p><p>RunLoop 的每次运行都会在某个特定模式下，而且只有这个模式所包含的 item 集合才会参与发送事件(被监听)和接收通知。如果改 item 没有加入到指定模式下的runloop，那么该模式下就不会执通知or监听该 item，如果没有 item 那么会进入休眠状态。</p><ul><li>mode 中需要注意的 default 和 tracing 这两种，在实际开发中会经常使用</li></ul><span id="1"><table><thead><tr><th>Mode</th><th>名称</th><th>描述</th></tr></thead><tbody><tr><td><font color="red">Default</font></td><td>NSDefaultRunLoopMode (Cocoa), kCFRunLoopDefaultMode (Core Foundation)</td><td>App的默认运行模式，通常主线程是在这个运行模式下运行</td></tr><tr><td>Connection</td><td>NSConnectionReplyMode (Cocoa)</td><td>Cocoa 中结合 NSConnection 使用，用于监听回复(Reply)，极少用到。(已弃用)</td></tr><tr><td>Modal</td><td>NSModalPanelRunLoopMode (Cocoa)</td><td>Cocoa 中 modal panel 使用它接收与之相关 Source 的事件</td></tr><tr><td><font color="red">Event tracking</font></td><td>NSEventTrackingRunLoopMode (Cocoa), UITrackingRunLoopMode (Cocoa Touch)</td><td>跟踪用户交互事件（用于 ScrollView 追踪触摸滑动，保证界面滑动时不受其他Mode影响）</td></tr><tr><td><font color="red"><strong>Common modes</strong></font></td><td>NSRunLoopCommonModes (Cocoa), kCFRunLoopCommonModes (Core Foundation)</td><td>这是一组可配置的通用集合，如果将某个 input source 注册到该模式下，那么 input source 在通用模式集合中的每个 mode 中都会注册。Cocoa 框架中的 Common modes 默认包含 Default, Modal, Event tracking 三种 Mode；Core Foundation 只包含 Default，可以使用 <a href="https://developer.apple.com/documentation/corefoundation/1542137-cfrunloopaddcommonmode" target="_blank" rel="noopener">CFRunLoopAddCommonMode</a> 函数向集合中添加自定义 Mode。</td></tr></tbody></table><p><strong>Common modes</strong> 不是一个mode，而是一个 modes 集合！</p><p>eg: 在 Cocoa 框架中，如果 Sources, timers, observers 添加到 CommonModes中，那么 Sources, timers, observers 会被 CommonModes 结合中(Default, Modal, Event tracking)所有模式共享！</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CFRunLoopAddCommonMode</span><span class="params">(CFRunLoopRef rl, CFRunLoopMode mode)</span></span>;</span><br></pre></td></tr></table></figure><p>一旦 mode 添加到 runloop 的_commonModes以后就不可以被删除了！此时需要创建新的 runloop 对象，把旧 runloop 中需要的 mode copy 出来，放在新的 runloop 中</p><p><a href="https://developer.apple.com/documentation/corefoundation/1541775-cfrunloopcopycurrentmode?language=objc" target="_blank" rel="noopener">CFRunLoopCopyCurrentMode</a>/<a href="https://developer.apple.com/documentation/corefoundation/1542184-cfrunloopcopyallmodes?language=objc" target="_blank" rel="noopener">CFRunLoopCopyAllModes</a></p><h2 id="runloop-中的sources-和-observers"><a class="markdownIt-Anchor" href="#runloop-中的sources-和-observers"></a> RunLoop 中的sources 和 observers</h2><p><img src="/img/runloop_event.jpeg" alt="run_loop_structure"><br>在 RunLoop 对象结构中有个 Mode，是为了在某种模式下 RunLoop 才会处理，可以减少每次需要监听的事件源</p><h3 id="sources-事件源"><a class="markdownIt-Anchor" href="#sources-事件源"></a> Sources 事件源</h3><h4 id="input-sources"><a class="markdownIt-Anchor" href="#input-sources"></a> Input Sources</h4><p>source分为两类，source0和source1。</p><ol><li>source0只含有回调指针，处理如UIEvent，CFSocket这类事件。它只能手动唤醒。</li><li>source1则是有一个mach port和回调指针，能被Mach内核传递的信息唤醒。<ol><li>触摸事件其实是source1接收系统事件后在回调 __IOHIDEventSystemClientQueueCallback</li><li>__IOHIDEventSystemClientQueueCallback() 内触发的 Source0</li><li>Source0 再触发的 _UIApplicationHandleEventQueue()</li></ol></li></ol><p>输入源：将事件以 <code>asynchronous</code> 的方式向 thread 发送 event</p><table><thead><tr><th style="text-align:left">输入源</th><th>Port-Based Sources</th><th>Custom Input Sources</th></tr></thead><tbody><tr><td style="text-align:left">对应 mode 结构体</td><td>source1</td><td>source0</td></tr><tr><td style="text-align:left">消息从何来(发送方)</td><td>kernel 线程</td><td>其他用户thread</td></tr><tr><td style="text-align:left">监听事件</td><td>Mach ports（内核 ports）event</td><td>用户自定义Input sources 的event</td></tr><tr><td style="text-align:left">添加方法</td><td>NSPort 对象</td><td>CFRunLoopSourceRef</td></tr></tbody></table><h4 id="timer-sources"><a class="markdownIt-Anchor" href="#timer-sources"></a> Timer Sources</h4><p>时间源：在预设时间后以同步的方式把 event 传递给 thread<br>Timer：是线程通知自己做某事的一种方式</p><h3 id="run-loop-observers-观察者"><a class="markdownIt-Anchor" href="#run-loop-observers-观察者"></a> Run Loop Observers 观察者</h3><p>不同于 source 在同步或异步事件发生时触发，observer 会在 runloop 运行期间的某些特殊地方触发。<br>CFRunLoopObserverRef是 runloop 状态的观察者，能够监听RunLoop所有的状态改变。</p><ul><li>进入 run loop</li><li>当 run loop 即将处理一个 timer</li><li>当 run loop 即将处理一个 input source</li><li>当 run loop 即将休眠</li><li>当 run loop 已经被唤醒，但在它处理唤醒它的事件之前</li><li>退出 run loop</li></ul><details><summary>对应 CFRunLoopActivity 枚举</summary><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">CF_OPTIONS</span><span class="params">(CFOptionFlags, CFRunLoopActivity)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 即将进入Loop</span></span><br><span class="line">  kCFRunLoopEntry = (<span class="number">1U</span>L &lt;&lt; <span class="number">0</span>),</span><br><span class="line">  <span class="comment">// 即将处理Timer</span></span><br><span class="line">  kCFRunLoopBeforeTimers = (<span class="number">1U</span>L &lt;&lt; <span class="number">1</span>),</span><br><span class="line">  <span class="comment">// 即将处理Source</span></span><br><span class="line">  kCFRunLoopBeforeSources = (<span class="number">1U</span>L &lt;&lt; <span class="number">2</span>),</span><br><span class="line">  <span class="comment">// 即将进入休眠</span></span><br><span class="line">  kCFRunLoopBeforeWaiting = (<span class="number">1U</span>L &lt;&lt; <span class="number">5</span>),</span><br><span class="line">  <span class="comment">// 刚从休眠中唤醒</span></span><br><span class="line">  kCFRunLoopAfterWaiting = (<span class="number">1U</span>L &lt;&lt; <span class="number">6</span>),</span><br><span class="line">  <span class="comment">// 即将退出Loop</span></span><br><span class="line">  kCFRunLoopExit = (<span class="number">1U</span>L &lt;&lt; <span class="number">7</span>),</span><br><span class="line">  <span class="comment">// 所有状态</span></span><br><span class="line">  kCFRunLoopAllActivities = <span class="number">0x0FFFFFFF</span>U</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></details><h2 id="run-loop-内部执行流程"><a class="markdownIt-Anchor" href="#run-loop-内部执行流程"></a> Run Loop 内部执行流程</h2><p>线程的 run loop 每次运行都会处理待决的事件，并为绑定的所有 observer 生成通知。次序如下：</p><p>如果mode里没有source/timer/observer, 直接返回。</p><ol><li>通知 observer 已经进入 run loop</li><li>通知 observer 有 timer 将要触发</li><li>通知 observer 有非基于端口的 input source(source0, 系统内核线程发来) 将要触发</li><li>触发所有已就绪的非基于端口的 input source</li><li>如果一个基于端口的 input source(source1, 用户端口发来) 已就绪并等待触发，立即处理事件，并转至第 9 步</li><li>通知 observer 线程即将休眠</li><li>让线程休眠，直到被以下条件唤醒：<ol><li>有基于端口的 input source 事件到达</li><li>timer 触发</li><li>run loop 设定的超时时间到了</li><li>run loop 被手动唤醒</li></ol></li><li>通知 observer 线程刚刚被唤醒</li><li>处理待决事件<ol><li>如果用户定义的 timer 触发了，处理 timer 事件并重启 run loop，跳回到第 2 步</li><li>如果 input source 触发了，分发事件</li><li>如果 run loop 被唤醒且没有超时，重启 run loop，跳回到第 2 步</li></ol></li><li>通知 observer 已经退出 run loop</li></ol><details><summary>对应简化源码</summary><pre><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">CFRunLoopRunSpecific</span><span class="params">(runloop, modeName, seconds, stopAfterHandle)</span> </span>&#123;</span><br><span class="line">  CFRunLoopModeRef currentMode = __CFRunLoopFindMode(runloop, modeName, <span class="literal">false</span>);</span><br><span class="line">  <span class="comment">// 如果mode里没有source/timer/observer, 直接返回。</span></span><br><span class="line">  <span class="keyword">if</span> (__CFRunLoopModeIsEmpty(currentMode)) <span class="keyword">return</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 1. 通知 Observers: RunLoop 即将进入 loop。</span></span><br><span class="line">  __CFRunLoopDoObservers(runloop, currentMode, kCFRunLoopEntry);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 内部函数，进入loop</span></span><br><span class="line">  __CFRunLoopRun(runloop, currentMode, seconds, returnAfterSourceHandled) &#123;</span><br><span class="line">    Boolean sourceHandledThisLoop = NO;</span><br><span class="line">    <span class="keyword">int</span> retVal = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">do</span> &#123; </span><br><span class="line">      <span class="comment">// 2. 通知 Observers: RunLoop 即将触发 Timer 回调。</span></span><br><span class="line">      __CFRunLoopDoObservers(runloop, currentMode, kCFRunLoopBeforeTimers);</span><br><span class="line">      <span class="comment">// 3. 通知 Observers: RunLoop 即将触发 Source0 (非port) 回调。</span></span><br><span class="line">      __CFRunLoopDoObservers(runloop, currentMode, kCFRunLoopBeforeSources);</span><br><span class="line">      <span class="comment">// 执行被加入的block</span></span><br><span class="line">      __CFRunLoopDoBlocks(runloop, currentMode);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 4. RunLoop 触发 Source0 (非port) 回调。</span></span><br><span class="line">      sourceHandledThisLoop = __CFRunLoopDoSources0(runloop, currentMode, stopAfterHandle);</span><br><span class="line">      <span class="comment">// 执行被加入的block</span></span><br><span class="line">      __CFRunLoopDoBlocks(runloop, currentMode);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 5. 如果有 Source1 (基于port) 处于 ready 状态，直接处理这个 Source1 然后跳转去处理消息。</span></span><br><span class="line">      <span class="keyword">if</span> (__Source0DidDispatchPortLastTime) &#123;</span><br><span class="line">        Boolean hasMsg = __CFRunLoopServiceMachPort(dispatchPort, &amp;msg)</span><br><span class="line">        <span class="keyword">if</span> (hasMsg) <span class="keyword">goto</span> handle_msg;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 通知 Observers: RunLoop 的线程即将进入休眠(sleep)。</span></span><br><span class="line">      <span class="keyword">if</span> (!sourceHandledThisLoop) &#123;</span><br><span class="line">        __CFRunLoopDoObservers(runloop, currentMode, kCFRunLoopBeforeWaiting);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 7. 调用 mach_msg 等待接受 mach_port 的消息。线程将进入休眠, 直到被下面某一个事件唤醒。</span></span><br><span class="line">      <span class="comment">// • 一个基于 port 的Source 的事件。</span></span><br><span class="line">      <span class="comment">// • 一个 Timer 到时间了</span></span><br><span class="line">      <span class="comment">// • RunLoop 自身的超时时间到了</span></span><br><span class="line">      <span class="comment">// • 被其他什么调用者手动唤醒</span></span><br><span class="line">      __CFRunLoopServiceMachPort(waitSet, &amp;msg, <span class="keyword">sizeof</span>(msg_buffer), &amp;livePort) &#123;</span><br><span class="line">        mach_msg(msg, MACH_RCV_MSG, port); <span class="comment">// thread wait for receive msg</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 8. 通知 Observers: RunLoop 的线程刚刚被唤醒了。</span></span><br><span class="line">      __CFRunLoopDoObservers(runloop, currentMode, kCFRunLoopAfterWaiting);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 收到消息，处理消息。</span></span><br><span class="line">      handle_msg:</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 9.1 如果一个 Timer 到时间了，触发这个Timer的回调。</span></span><br><span class="line">      <span class="keyword">if</span> (msg_is_timer) &#123;</span><br><span class="line">        __CFRunLoopDoTimers(runloop, currentMode, mach_absolute_time())</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 9.2 如果有dispatch到main_queue的block，执行block。</span></span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (msg_is_dispatch) &#123;</span><br><span class="line">        __CFRUNLOOP_IS_SERVICING_THE_MAIN_DISPATCH_QUEUE__(msg);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 9.3 如果一个 Source1 (基于port) 发出事件了，处理这个事件</span></span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">        CFRunLoopSourceRef source1 = __CFRunLoopModeFindSourceForMachPort(runloop, currentMode, livePort);</span><br><span class="line">        sourceHandledThisLoop = __CFRunLoopDoSource1(runloop, currentMode, source1, msg);</span><br><span class="line">        <span class="keyword">if</span> (sourceHandledThisLoop) &#123;</span><br><span class="line">          mach_msg(reply, MACH_SEND_MSG, reply);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 执行加入到Loop的block</span></span><br><span class="line">      __CFRunLoopDoBlocks(runloop, currentMode);</span><br><span class="line"> </span><br><span class="line">      <span class="keyword">if</span> (sourceHandledThisLoop &amp;&amp; stopAfterHandle) &#123;</span><br><span class="line">        <span class="comment">// 进入loop时参数说处理完事件就返回。</span></span><br><span class="line">        retVal = kCFRunLoopRunHandledSource;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (timeout) &#123;</span><br><span class="line">        <span class="comment">// 超出传入参数标记的超时时间了</span></span><br><span class="line">        retVal = kCFRunLoopRunTimedOut;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (__CFRunLoopIsStopped(runloop)) &#123;</span><br><span class="line">        <span class="comment">// 被外部调用者强制停止了</span></span><br><span class="line">        retVal = kCFRunLoopRunStopped;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (__CFRunLoopModeIsEmpty(runloop, currentMode)) &#123;</span><br><span class="line">        <span class="comment">// source/timer/observer一个都没有了</span></span><br><span class="line">        retVal = kCFRunLoopRunFinished;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 如果没超时，mode里没空，loop也没被停止，那继续loop。</span></span><br><span class="line">    &#125; <span class="keyword">while</span> (retVal == <span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 10. 通知 Observers: RunLoop 即将退出。</span></span><br><span class="line">  __CFRunLoopDoObservers(rl, currentMode, kCFRunLoopExit);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实际上 RunLoop 就是这样一个函数，其内部是一个 do-while 循环。当你调用 CFRunLoopRun() 时，线程就会一直停留在这个循环里；直到超时或被手动停止，该函数才会返回。</p></pre></details><img src="/img/runloop_main_routine.jpg" alt="runloop" style="width:500px;height:628px"><h2 id="runloop底层实现"><a class="markdownIt-Anchor" href="#runloop底层实现"></a> RunLoop底层实现</h2><p>核心是源码中的第 7 步：<br>7. 调用 mach_msg 等待接受 mach_port 的消息。线程将进入休眠, 直到被下面某一个事件唤醒</p><ul><li>一个基于 port 的Source 的事件。</li><li>一个 Timer 到时间了</li><li>RunLoop 自身的超时时间到了</li><li>被其他什么调用者手动唤醒</li></ul><p>mach_msg() 函数实际上是调用了一个 Mach 陷阱 (trap)，即函数mach_msg_trap()，陷阱这个概念在 Mach 中等同于系统调用。当你在用户态调用 mach_msg_trap() 时会触发陷阱机制，切换到内核态；内核态中内核实现的 mach_msg() 函数会完成实际的工作，如下图：</p><p><img src="/img/mach_msg.jpeg" alt="mach_msg"></p><p>使用 xcode，当程序不执行操作的时候，click debug 的暂停<br><img src="/img/main_thread_mach_msg.jpeg" alt="main_thread_mach_msg"></p><p>在没有事件处理时：<br>Thread 1 Queue : com.apple.main-thread (serial)<br>com.apple.uikit.eventfetch-thread (6)<br>这两个线程的runloop都停留在mach_msg_trap状态，等待事件发生。</p><p>其他线程都是 <a href="https://github.com/darlinghq/darling/blob/master/src/kernel/emulation/linux/bsdthread/workq_kernreturn.c" target="_blank" rel="noopener"><code>_workq_kernreturn：</code></a><br>等待 <code>spinlock</code> 技术，从而执行队列中的下一个 task（或者退出）</p><h2 id="runloop-核心对象的源码结构"><a class="markdownIt-Anchor" href="#runloop-核心对象的源码结构"></a> RunLoop 核心对象的源码结构</h2><details><summary>RunLoop</summary><pre><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> __<span class="title">CFRunLoop</span> &#123;</span></span><br><span class="line">  CFRuntimeBase _base;</span><br><span class="line">  __CFPort _wakeUpPort;  <span class="comment">// used for CFRunLoopWakeUp </span></span><br><span class="line">  Boolean _unused;</span><br><span class="line">  <span class="keyword">volatile</span> _per_run_data *_perRunData;  <span class="comment">// reset for runs of the run loop</span></span><br><span class="line">  <span class="keyword">pthread_t</span> _pthread;</span><br><span class="line">  CFMutableSetRef _commonModes;</span><br><span class="line">  CFMutableSetRef _commonModeItems;  </span><br><span class="line">  <span class="comment">//  CFSetAddValue(rl-&gt;_commonModeItems, rls); CFRunLoopSourceRef rlo</span></span><br><span class="line">  <span class="comment">//  CFSetAddValue(rl-&gt;_commonModeItems, rlo); CFRunLoopObserverRef rlo</span></span><br><span class="line">  CFRunLoopModeRef _currentMode;</span><br><span class="line">  CFMutableSetRef _modes;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">block_item</span> *_<span class="title">blocks_head</span>;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">block_item</span> *_<span class="title">blocks_tail</span>;</span></span><br><span class="line">  CFAbsoluteTime _runTime;</span><br><span class="line">  CFAbsoluteTime _sleepTime;</span><br><span class="line">  CFTypeRef _counterpart;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></pre></details><details><summary>RunLoopMode</summary><pre><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> __<span class="title">CFRunLoopMode</span> &#123;</span></span><br><span class="line">  CFStringRef _name;</span><br><span class="line">  Boolean _stopped;</span><br><span class="line">  CFMutableSetRef _sources0;</span><br><span class="line">  CFMutableSetRef _sources1;</span><br><span class="line">  CFMutableArrayRef _observers;</span><br><span class="line">  CFMutableArrayRef _timers;</span><br><span class="line">  CFMutableDictionaryRef _portToV1SourceMap;</span><br><span class="line">  __CFPortSet _portSet;</span><br><span class="line">  CFIndex _observerMask;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> USE_DISPATCH_SOURCE_FOR_TIMERS</span></span><br><span class="line">  <span class="keyword">dispatch_source_t</span> _timerSource;</span><br><span class="line">  <span class="keyword">dispatch_queue_t</span> _queue;</span><br><span class="line">  Boolean _timerFired; <span class="comment">// set to true by the source when a timer has fired</span></span><br><span class="line">  Boolean _dispatchTimerArmed;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> USE_MK_TIMER_TOO</span></span><br><span class="line">  <span class="keyword">mach_port_t</span> _timerPort;</span><br><span class="line">  Boolean _mkTimerArmed;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></pre></details><details><summary>RunLoopSource</summary><pre><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> __<span class="title">CFRunLoopSource</span> &#123;</span></span><br><span class="line">  CFRuntimeBase _base;</span><br><span class="line">  <span class="keyword">uint32_t</span> _bits;</span><br><span class="line">  CFIndex _order;<span class="comment">/* immutable */</span></span><br><span class="line">  CFMutableBagRef _runLoops;</span><br><span class="line">  <span class="keyword">union</span> &#123;</span><br><span class="line">  CFRunLoopSourceContext version0;<span class="comment">/* immutable, except invalidation */</span></span><br><span class="line">    CFRunLoopSourceContext1 version1;<span class="comment">/* immutable, except invalidation */</span></span><br><span class="line">  &#125; _context;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></pre></details><details><summary>RunLoop Observers</summary><pre><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> __<span class="title">CFRunLoopObserver</span> &#123;</span></span><br><span class="line">  CFRuntimeBase _base;</span><br><span class="line">  CFRunLoopRef _runLoop;</span><br><span class="line">  CFIndex _rlCount;</span><br><span class="line">  CFOptionFlags _activities;<span class="comment">/* immutable */</span></span><br><span class="line">  CFIndex _order;<span class="comment">/* immutable */</span></span><br><span class="line">  CFRunLoopObserverCallBack _callout;<span class="comment">/* immutable */</span></span><br><span class="line">  CFRunLoopObserverContext _context;<span class="comment">/* immutable, except invalidation */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></pre></details><details><summary>RunLoop Timer</summary><pre><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> __<span class="title">CFRunLoopTimer</span> &#123;</span></span><br><span class="line">  CFRuntimeBase _base;</span><br><span class="line">  CFRunLoopRef _runLoop;</span><br><span class="line">  CFMutableSetRef _rlModes;</span><br><span class="line">  CFAbsoluteTime _nextFireDate;</span><br><span class="line">  CFTimeInterval _interval;<span class="comment">/* immutable */</span></span><br><span class="line">  CFTimeInterval _tolerance;      <span class="comment">/* mutable */</span></span><br><span class="line">  <span class="keyword">uint64_t</span> _fireTSR;<span class="comment">/* TSR units */</span></span><br><span class="line">  CFIndex _order;<span class="comment">/* immutable */</span></span><br><span class="line">  CFRunLoopTimerCallBack _callout;<span class="comment">/* immutable */</span></span><br><span class="line">  CFRunLoopTimerContext _context;<span class="comment">/* immutable, except invalidation */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></pre></details><h2 id="使用到-runloop-的相关实践"><a class="markdownIt-Anchor" href="#使用到-runloop-的相关实践"></a> 使用到 RunLoop 的相关实践</h2><p>先分析下系统中都使用 runLoop 做了什么</p><h3 id="系统如何使用-runloop"><a class="markdownIt-Anchor" href="#系统如何使用-runloop"></a> 系统如何使用 RunLoop</h3><details><summary>app 运行时，打印CFRunLoop 内部样</summary><pre><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">CFRunLoop &#123;</span><br><span class="line">  current mode = kCFRunLoopDefaultMode</span><br><span class="line">  common modes = &#123;</span><br><span class="line">    UITrackingRunLoopMode,</span><br><span class="line">    kCFRunLoopDefaultMode</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  common mode items = &#123;</span><br><span class="line">  <span class="comment">// source0 (manual)</span></span><br><span class="line">    CFRunLoopSource &#123;order =<span class="number">-1</span>, &#123;callout = _UIApplicationHandleEventQueue&#125;&#125;</span><br><span class="line">    CFRunLoopSource &#123;order =<span class="number">-1</span>, &#123;callout = PurpleEventSignalCallback &#125;&#125;</span><br><span class="line">    CFRunLoopSource &#123;order = <span class="number">0</span>, &#123;callout = FBSSerialQueueRunLoopSourceHandler&#125;&#125;</span><br><span class="line"> </span><br><span class="line">  <span class="comment">// source1 (mach port)</span></span><br><span class="line">    CFRunLoopSource &#123;order = <span class="number">0</span>,  &#123;port = <span class="number">17923</span>&#125;&#125;</span><br><span class="line">    CFRunLoopSource &#123;order = <span class="number">0</span>,  &#123;port = <span class="number">12039</span>&#125;&#125;</span><br><span class="line">    CFRunLoopSource &#123;order = <span class="number">0</span>,  &#123;port = <span class="number">16647</span>&#125;&#125;</span><br><span class="line">    CFRunLoopSource &#123;order =<span class="number">-1</span>, &#123;callout = PurpleEventCallback&#125;&#125;</span><br><span class="line">    CFRunLoopSource &#123;order = <span class="number">0</span>, &#123;port = <span class="number">2407</span>, callout = _ZL20notify_port_callbackP12__CFMachPortPvlS1_&#125;&#125;</span><br><span class="line">    CFRunLoopSource &#123;order = <span class="number">0</span>, &#123;port = <span class="number">1</span>c03, callout = __IOHIDEventSystemClientAvailabilityCallback&#125;&#125;</span><br><span class="line">    CFRunLoopSource &#123;order = <span class="number">0</span>, &#123;port = <span class="number">1b</span>03, callout = __IOHIDEventSystemClientQueueCallback&#125;&#125;</span><br><span class="line">    CFRunLoopSource &#123;order = <span class="number">1</span>, &#123;port = <span class="number">1903</span>, callout = __IOMIGMachPortPortCallback&#125;&#125;</span><br><span class="line"> </span><br><span class="line">  <span class="comment">// Obvserver</span></span><br><span class="line">    <span class="comment">// Entry</span></span><br><span class="line">    CFRunLoopObserver &#123;order = <span class="number">-2147483647</span>, activities = <span class="number">0x1</span>, callout = _wrapRunLoopWithAutoreleasePoolHandler&#125; </span><br><span class="line">    <span class="comment">// BeforeWaiting</span></span><br><span class="line">    CFRunLoopObserver &#123;order = <span class="number">0</span>, activities = <span class="number">0x20</span>, callout = _UIGestureRecognizerUpdateObserver&#125; </span><br><span class="line">    <span class="comment">// BeforeWaiting | Exit</span></span><br><span class="line">    CFRunLoopObserver &#123;order = <span class="number">1999000</span>, activities = <span class="number">0xa0</span>, callout = _afterCACommitHandler&#125; </span><br><span class="line">    <span class="comment">// BeforeWaiting | Exit</span></span><br><span class="line">    CFRunLoopObserver &#123;order = <span class="number">2000000</span>, activities = <span class="number">0xa0</span>, callout = _ZN2CA11Transaction17observer_callbackEP19__CFRunLoopObservermPv&#125; </span><br><span class="line">    <span class="comment">// BeforeWaiting | Exit </span></span><br><span class="line">    CFRunLoopObserver &#123;order = <span class="number">2147483647</span>, activities = <span class="number">0xa0</span>, callout = _wrapRunLoopWithAutoreleasePoolHandler&#125; </span><br><span class="line"> </span><br><span class="line">  <span class="comment">// Timer</span></span><br><span class="line">    CFRunLoopTimer &#123;</span><br><span class="line">      firing = No, </span><br><span class="line">      interval = <span class="number">3.1536e+09</span>, </span><br><span class="line">      tolerance = <span class="number">0</span>,</span><br><span class="line">      next fire date = <span class="number">453098071</span> (<span class="number">-4421.76019</span> @ <span class="number">96223387169499</span>),</span><br><span class="line">      callout = _ZN2CAL14timer_callbackEP16__CFRunLoopTimerPv (QuartzCore.framework)&#125;</span><br><span class="line">  &#125;<span class="comment">// end commons,</span></span><br><span class="line"> </span><br><span class="line">  modes ＝ &#123;</span><br><span class="line">    CFRunLoopMode  &#123;</span><br><span class="line">      sources0 =  &#123; <span class="comment">/* same as 'common mode items' */</span> &#125;,</span><br><span class="line">      sources1 =  &#123; <span class="comment">/* same as 'common mode items' */</span> &#125;,</span><br><span class="line">      observers = &#123; <span class="comment">/* same as 'common mode items' */</span> &#125;,</span><br><span class="line">      timers =  &#123; <span class="comment">/* same as 'common mode items' */</span> &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    CFRunLoopMode  &#123;</span><br><span class="line">      sources0 =  &#123; <span class="comment">/* same as 'common mode items' */</span> &#125;,</span><br><span class="line">      sources1 =  &#123; <span class="comment">/* same as 'common mode items' */</span> &#125;,</span><br><span class="line">      observers = &#123; <span class="comment">/* same as 'common mode items' */</span> &#125;,</span><br><span class="line">      timers =  &#123; <span class="comment">/* same as 'common mode items' */</span> &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    CFRunLoopMode  &#123;</span><br><span class="line">      sources0 = &#123; CFRunLoopSource &#123;order = <span class="number">0</span>, &#123; callout = FBSSerialQueueRunLoopSourceHandler&#125;&#125; &#125;,</span><br><span class="line">      sources1 = (null),</span><br><span class="line">      observers = &#123; CFRunLoopObserver &gt;&#123;activities = <span class="number">0xa0</span>, order = <span class="number">2000000</span>, callout = _ZN2CA11Transaction17observer_callbackEP19__CFRunLoopObservermPv&#125;)&#125;,</span><br><span class="line">      timers = (null),</span><br><span class="line">    &#125;,</span><br><span class="line">    CFRunLoopMode  &#123;</span><br><span class="line">      sources0 = &#123;</span><br><span class="line">      CFRunLoopSource &#123;order = <span class="number">-1</span>, &#123; callout = PurpleEventSignalCallback&#125;&#125; &#125;,</span><br><span class="line">      sources1 = &#123; CFRunLoopSource &#123;order = <span class="number">-1</span>, &#123; callout = PurpleEventCallback&#125;&#125; &#125;,</span><br><span class="line">      observers = (null),</span><br><span class="line">      timers = (null),</span><br><span class="line">    &#125;,</span><br><span class="line">    CFRunLoopMode  &#123;</span><br><span class="line">      sources0 = (null),</span><br><span class="line">      sources1 = (null),</span><br><span class="line">      observers = (null),</span><br><span class="line">      timers = (null),</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></pre></details><p>打开上面代码可以看到，系统默认注册了<a href="#1">5个Mode</a>:</p><ol><li>Observer：</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//内存管理相关：</span></span><br><span class="line">_wrapRunLoopWithAutoreleasePoolHandler： <span class="comment">//AutoReleasePool最高优先级处理 (observer)</span></span><br><span class="line">_wrapRunLoopWithAutoreleasePoolHandler： <span class="comment">//AutoReleasePool最低优先级处理 (observer)</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//界面刷新相关：</span></span><br><span class="line">afterCACommitHandler： <span class="comment">//监听CATransaction，刷新UI（observer）</span></span><br><span class="line">_beforeCACommitHandler： <span class="comment">//监听CATransaction</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//手势检测回调：手势变化时都会被这个观察者捕获。mach_msg_trap状态时也需要被RunLoop唤醒以后处理。</span></span><br><span class="line">_UIGestureRecognizerUpdateObserver： <span class="comment">//监听CATransaction，刷新UI（observer）</span></span><br></pre></td></tr></table></figure><ol start="2"><li>Source：</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">_handleHIDEventFetcherDrain： <span class="comment">//释放IOHIDEvent对象的callback（source0)，所以有IOHIDEvent事件的位置（通常是唤醒RunLoop的位置）都会有这个回调方法。</span></span><br><span class="line">_handleEventQueue： <span class="comment">//用户事件回调(source0)，一般的addTarget: action: forControlEvents:方法都会加在source0，并由_handleEventQueue执行。</span></span><br></pre></td></tr></table></figure><span id="2"><h3 id="autoreleasepool"><a class="markdownIt-Anchor" href="#autoreleasepool"></a> AutoreleasePool</h3><p>根据上述分析，通过 RunLoop Observer，监听 RunLoop 状态来管理 AutoreleasePool的。<br>苹果在主线程 RunLoop 里注册了两个 Observer，其回调都是 _wrapRunLoopWithAutoreleasePoolHandler()。</p><ol><li>第一个 Observer 监视的事件是 Entry(即将进入Loop)，其回调内会调用 _objc_autoreleasePoolPush() 创建自动释放池。其 order 是-2147483647，优先级最高，保证创建释放池发生在其他所有回调之前。</li><li>第二个 Observer 监视了两个事件： BeforeWaiting(准备进入休眠) 时调用_objc_autoreleasePoolPop() 和 _objc_autoreleasePoolPush() 释放旧的池并创建新池；Exit(即将退出Loop) 时调用 _objc_autoreleasePoolPop() 来释放自动释放池。这个 Observer 的 order 是 2147483647，优先级最低，保证其释放池子发生在其他所有回调之后。</li></ol><p>在主线程执行的代码，通常是写在诸如事件回调、Timer回调内的。这些回调会被 RunLoop 创建好的 AutoreleasePool 环绕着，所以不会出现内存泄漏，开发者也不必显示创建 Pool 了。</p><h3 id="事件响应"><a class="markdownIt-Anchor" href="#事件响应"></a> 事件响应</h3><p>苹果注册了一个 Source1 (基于 mach port 的) 用来接收系统事件，其回调函数为 __IOHIDEventSystemClientQueueCallback()。</p><p>当一个硬件事件(触摸/锁屏/摇晃等)发生后，首先由 IOKit.framework 生成一个 IOHIDEvent 事件并由 SpringBoard 接收。这个过程的详细情况可以参考这里。SpringBoard 只接收按键(锁屏/静音等)，触摸，加速，接近传感器等几种 Event，随后用 mach port 转发给需要的App进程。随后苹果注册的那个 Source1 就会触发回调，并调用 _UIApplicationHandleEventQueue() 进行应用内部的分发。</p><p>_UIApplicationHandleEventQueue() 会把 IOHIDEvent 处理并包装成 UIEvent 进行处理或分发，其中包括识别 UIGesture/处理屏幕旋转/发送给 UIWindow 等。通常事件比如 UIButton 点击、touchesBegin/Move/End/Cancel 事件都是在这个回调中完成的。</p><h3 id="手势识别"><a class="markdownIt-Anchor" href="#手势识别"></a> 手势识别</h3><p>当上面的 _UIApplicationHandleEventQueue() 识别了一个手势时，其首先会调用 Cancel 将当前的 touchesBegin/Move/End 系列回调打断。随后系统将对应的 UIGestureRecognizer 标记为待处理。<br>苹果注册了一个 Observer 监测 BeforeWaiting (Loop即将进入休眠) 事件，这个Observer的回调函数是 _UIGestureRecognizerUpdateObserver()，其内部会获取所有刚被标记为待处理的 GestureRecognizer，并执行GestureRecognizer的回调。<br>当有 UIGestureRecognizer 的变化(创建/销毁/状态改变)时，这个回调都会进行相应处理。</p><h3 id="界面更新"><a class="markdownIt-Anchor" href="#界面更新"></a> 界面更新</h3><p>当在操作 UI 时，比如改变了 Frame、更新了 UIView/CALayer 的层次时，或者手动调用了 UIView/CALayer 的 setNeedsLayout/setNeedsDisplay方法后，这个 UIView/CALayer 就被标记为待处理，并被提交到一个全局的容器去。</p><p>苹果注册了一个 Observer 监听 BeforeWaiting(即将进入休眠) 和 Exit (即将退出Loop) 事件，回调去执行一个很长的函数：<br>_ZN2CA11Transaction17observer_callbackEP19__CFRunLoopObservermPv()。这个函数里会遍历所有待处理的 UIView/CAlayer 以执行实际的绘制和调整，并更新 UI 界面。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">_ZN2CA11Transaction17observer_callbackEP19__CFRunLoopObservermPv()</span><br><span class="line">    QuartzCore:CA::Transaction::observer_callback:</span><br><span class="line">        CA::Transaction::commit();</span><br><span class="line">            CA::Context::commit_transaction();</span><br><span class="line">                CA::Layer::layout_and_display_if_needed();</span><br><span class="line">                    CA::Layer::layout_if_needed();</span><br><span class="line">                        [CALayer layoutSublayers];</span><br><span class="line">                            [UIView layoutSubviews];</span><br><span class="line">                    CA::Layer::display_if_needed();</span><br><span class="line">                        [CALayer display];</span><br><span class="line">                            [UIView drawRect];</span><br></pre></td></tr></table></figure><h3 id="定时器"><a class="markdownIt-Anchor" href="#定时器"></a> 定时器</h3><p>NSTimer 其实就是 CFRunLoopTimerRef，他们之间是 toll-free bridged 的。一个 NSTimer 注册到 RunLoop 后，RunLoop 会为其重复的时间点注册好事件。例如 10:00, 10:10, 10:20 这几个时间点。RunLoop为了节省资源，并不会在非常准确的时间点回调这个Timer。Timer 有个属性叫做 Tolerance (宽容度)，标示了当时间点到后，容许有多少最大误差。</p><p>如果某个时间点被错过了，例如执行了一个很长的任务，则那个时间点的回调也会跳过去，不会延后执行。就比如等公交，如果 10:10 时我忙着玩手机错过了那个点的公交，那我只能等 10:20 这一趟了。</p><p>CADisplayLink 是一个和屏幕刷新率一致的定时器（但实际实现原理更复杂，和 NSTimer 并不一样，其内部实际是操作了一个 Source）。如果在两次屏幕刷新之间执行了一个长任务，那其中就会有一帧被跳过去（和 NSTimer 相似），造成界面卡顿的感觉。在快速滑动TableView时，即使一帧的卡顿也会让用户有所察觉。Facebook 开源的 AsyncDisplayLink 就是为了解决界面卡顿的问题，其内部也用到了 RunLoop，这个稍后我会再单独写一页博客来分析。</p><h3 id="performselecter"><a class="markdownIt-Anchor" href="#performselecter"></a> PerformSelecter</h3><p>当调用 NSObject 的 performSelecter:afterDelay: 后，实际上其内部会创建一个 Timer 并添加到当前线程的 RunLoop 中。所以如果当前线程没有 RunLoop，则这个方法会失效。</p><p>当调用 performSelector:onThread: 时，实际上其会创建一个 Timer 加到对应的线程去，同样的，如果对应线程没有 RunLoop 该方法也会失效。</p><h3 id="关于gcd"><a class="markdownIt-Anchor" href="#关于gcd"></a> 关于GCD</h3><p>实际上 RunLoop 底层也会用到 GCD 的东西，比如 RunLoop 是用 dispatch_source_t 实现的 Timer（评论中有人提醒，NSTimer 是用了 XNU 内核的 mk_timer，我也仔细调试了一下，发现 NSTimer 确实是由 mk_timer 驱动，而非 GCD 驱动的）。但同时 GCD 提供的某些接口也用到了 RunLoop， 例如 dispatch_async()。</p><p>当调用 dispatch_async(dispatch_get_main_queue(), block) 时，libDispatch 会向主线程的 RunLoop 发送消息，RunLoop会被唤醒，并从消息中取得这个 block，并在回调 <strong>CFRUNLOOP_IS_SERVICING_THE_MAIN_DISPATCH_QUEUE</strong>() 里执行这个 block。但这个逻辑仅限于 dispatch 到主线程，dispatch 到其他线程仍然是由 libDispatch 处理的。</p><h3 id="关于网络请求"><a class="markdownIt-Anchor" href="#关于网络请求"></a> 关于网络请求</h3><p>iOS 中，关于网络请求的接口自下至上有如下几层:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CFSocket</span><br><span class="line">CFNetwork       -&gt;ASIHttpRequest</span><br><span class="line">NSURLConnection -&gt;AFNetworking</span><br><span class="line">NSURLSession    -&gt;AFNetworking2, Alamofire</span><br></pre></td></tr></table></figure><p>• CFSocket 是最底层的接口，只负责 socket 通信。<br>• CFNetwork 是基于 CFSocket 等接口的上层封装，ASIHttpRequest 工作于这一层。<br>• NSURLConnection 是基于 CFNetwork 的更高层的封装，提供面向对象的接口，AFNetworking 工作于这一层。<br>• NSURLSession 是 iOS7 中新增的接口，表面上是和 NSURLConnection 并列的，但底层仍然用到了 NSURLConnection 的部分功能 (比如 com.apple.NSURLConnectionLoader 线程)，AFNetworking2 和 Alamofire 工作于这一层。</p><p>下面主要介绍下 NSURLConnection 的工作过程。</p><p>通常使用 NSURLConnection 时，你会传入一个 Delegate，当调用了 [connection start] 后，这个 Delegate 就会不停收到事件回调。实际上，start 这个函数的内部会会获取 CurrentRunLoop，然后在其中的 DefaultMode 添加了4个 Source0 (即需要手动触发的Source)。CFMultiplexerSource 是负责各种 Delegate 回调的，CFHTTPCookieStorage 是处理各种 Cookie 的。</p><p>当开始网络传输时，我们可以看到 NSURLConnection 创建了两个新线程：com.apple.NSURLConnectionLoader 和 com.apple.CFSocket.private。其中 CFSocket 线程是处理底层 socket 连接的。NSURLConnectionLoader 这个线程内部会使用 RunLoop 来接收底层 socket 的事件，并通过之前添加的 Source0 通知到上层的 Delegate。</p><p><img src="https://blog.ibireme.com/wp-content/uploads/2015/05/RunLoop_network.png" alt="RunLoop_network"></p><p>NSURLConnectionLoader 中的 RunLoop 通过一些基于 mach port 的 Source 接收来自底层 CFSocket 的通知。当收到通知后，其会在合适的时机向 CFMultiplexerSource 等 Source0 发送通知，同时唤醒 Delegate 线程的 RunLoop 来让其处理这些通知。CFMultiplexerSource 会在 Delegate 线程的 RunLoop 对 Delegate 执行实际的回调。</p><h2 id="引用"><a class="markdownIt-Anchor" href="#引用"></a> 引用</h2><blockquote><p><a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Multithreading/RunLoopManagement/RunLoopManagement.html" target="_blank" rel="noopener">Threading Programming Guide – Run Loops</a><br><a href="https://developer.apple.com/documentation/corefoundation/1542137-cfrunloopaddcommonmode" target="_blank" rel="noopener">CFRunLoopAddCommonMode</a><br><a href="https://blog.ibireme.com/2015/05/18/runloop/" target="_blank" rel="noopener">深入理解RunLoop</a> 本文实例<a href="#2">使用到 RunLoop 的相关实践</a> 大量参考该文章，敬佩~<br><a href="https://en.wikipedia.org/wiki/Event_loop" target="_blank" rel="noopener">Event loop</a><br><a href="https://github.com/robbie-cao/note/blob/master/eventloop.md" target="_blank" rel="noopener">后端eventloop</a><br><a href="https://en.wikipedia.org/wiki/Event-driven_programming" target="_blank" rel="noopener">Event-driven programming</a><br><a href="http://yulingtianxia.com/blog/2017/09/17/Threading-Programming-Guide-2/#Input-Sources" target="_blank" rel="noopener">Threading Programming Guide(2)</a></p></blockquote></span></span><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> iOS Programming </category>
          
          <category> runloop </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> 底层 </tag>
            
            <tag> objc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Method Swizzling</title>
      <link href="/2017/08/01/deep%20analyse/Method-Swizzling/"/>
      <url>/2017/08/01/deep%20analyse/Method-Swizzling/</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Jun 02 2020 17:35:52 GMT+0800 (CST) --><a id="more"></a><h2 id="method-swizzling-的作用"><a class="markdownIt-Anchor" href="#method-swizzling-的作用"></a> Method swizzling 的作用</h2><p>他是一种 <a href="https://en.wikipedia.org/wiki/Pointer_swizzling" target="_blank" rel="noopener">交换指针指向</a> 的技术，用来交换基于名字或者位置的指针引用。method swizzling 可以通过交换 selector 来改变函数指针的引用。</p><p>Method swizzling 用于改变一个已经存在的 selector 的实现。该技术在运行时通过改变 selector 在类的消息分发列表中的映射从而改变原有方法。</p><p>例如：我们想要在一款 iOS app 中追踪每一个视图控制器被用户呈现了几次： 可以通过在每个视图控制器的 viewDidAppear: 方法中添加追踪代码来实现，但会有大量重复代码。继承是另一种可行的方式，但是这要求所有被继承的视图控制器如 UIViewController, UITableViewController, UINavigationController 都在 viewDidAppear：实现追踪代码，这同样会造成很多重复代码。这里有另外一种可行的方式：从 category 实现 method swizzling 。下面是实现方式：</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">&lt;objc/runtime.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">UIViewController</span> (<span class="title">Tracking</span>)</span></span><br><span class="line"></span><br><span class="line">+ (<span class="keyword">void</span>)load &#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="built_in">dispatch_once_t</span> onceToken;</span><br><span class="line">  <span class="built_in">dispatch_once</span>(&amp;onceToken, ^&#123;</span><br><span class="line">    Class <span class="keyword">class</span> = [<span class="keyword">self</span> <span class="keyword">class</span>];</span><br><span class="line"><span class="comment">// 1. 得到方法名称 selector</span></span><br><span class="line">    SEL originalSelector = <span class="keyword">@selector</span>(viewWillAppear:);</span><br><span class="line">    SEL swizzledSelector = <span class="keyword">@selector</span>(xxx_viewWillAppear:);</span><br><span class="line"><span class="comment">// 2. 得到方法类型（方法签名）</span></span><br><span class="line">    Method originalMethod = class_getInstanceMethod(<span class="keyword">class</span>, originalSelector);</span><br><span class="line">    Method swizzledMethod = class_getInstanceMethod(<span class="keyword">class</span>, swizzledSelector);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// When swizzling a class method, use the following:</span></span><br><span class="line">    <span class="comment">// Class class = object_getClass((id)self);</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="comment">// Method originalMethod = class_getClassMethod(class, originalSelector);</span></span><br><span class="line">    <span class="comment">// Method swizzledMethod = class_getClassMethod(class, swizzledSelector);</span></span><br><span class="line"><span class="comment">// 3. 给 originalSelector 添加新method的实现和参数类，如果originSel在 cls 中没有实现体，那么会添加各一个实现体，并return YES，如果已经有实现体 return NO</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">BOOL</span> didAddMethod =</span><br><span class="line">    class_addMethod(<span class="keyword">class</span>,</span><br><span class="line">                    originalSelector,</span><br><span class="line">                    method_getImplementation(swizzledMethod),</span><br><span class="line">                    method_getTypeEncoding(swizzledMethod));</span><br><span class="line">    <span class="keyword">if</span> (didAddMethod) &#123;</span><br><span class="line">      <span class="comment">// 4. 替换</span></span><br><span class="line">      class_replaceMethod(<span class="keyword">class</span>,</span><br><span class="line">                          swizzledSelector,</span><br><span class="line">                          method_getImplementation(originalMethod),</span><br><span class="line">                          method_getTypeEncoding(originalMethod));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">//</span></span><br><span class="line">      method_exchangeImplementations(originalMethod, swizzledMethod);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#pragma mark - Method Swizzling</span></span><br><span class="line">- (<span class="keyword">void</span>)xxx_viewWillAppear:(<span class="built_in">BOOL</span>)animated &#123;</span><br><span class="line">  [<span class="keyword">self</span> xxx_viewWillAppear:animated];</span><br><span class="line">  <span class="built_in">NSLog</span>(<span class="string">@"viewWillAppear: %@"</span>, <span class="keyword">self</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><p><strong>class_addMethod</strong> 。要先尝试添加 originSel 是为了做一层保护，因为如果这个类没有实现 originSel ，但其父类实现了，那 class_getInstanceMethod 会返回父类的方法。这样 method_exchangeImplementations 替换的是父类的那个方法。所以先尝试添加 originSel，如果已经存在，再用 method_exchangeImplementations 把原方法的实现跟新的方法实现给交换掉。</p><p>过程变化图</p><div align="left"><img src="/img/method_swizzle.jpg" alt="swizzle" style="width:450px;height:371px"></div><h2 id="应该在哪些地方使用-method-swizzling"><a class="markdownIt-Anchor" href="#应该在哪些地方使用-method-swizzling"></a> 应该在哪些地方使用 method swizzling</h2><h3 id="swizzling-应该只在-load-中"><a class="markdownIt-Anchor" href="#swizzling-应该只在-load-中"></a> swizzling 应该只在 +load 中</h3><p>在 Objective-C 的运行时中，每个类有两个方法都会自动调用。</p><ul><li>+load 是在一个类被初始装载时调用，[只会调用一次]</li><li>+initialize 是在应用第一次调用该类的类方法或实例方法前调用的。[可能会被调用多次]</li></ul><p>两个方法都是可选的，并且只有在方法被实现的情况下才会被调用。</p><h3 id="dispatch_once"><a class="markdownIt-Anchor" href="#dispatch_once"></a> dispatch_once</h3><p>swizzling 应该只在 dispatch_once 中完成。</p><ol><li>swizzling 改变了全局的状态</li><li>确保代码只执行一次。Grand Central Dispatch 的 dispatch_once 提供原子性</li></ol><h3 id="selectors-methods-implementations"><a class="markdownIt-Anchor" href="#selectors-methods-implementations"></a> Selectors, Methods, &amp; Implementations</h3><p>在 Objective-C 的运行时中，selectors, methods, implementations 指代了不同概念，然而我们通常会说在消息发送过程中，这三个概念是可以相互转换的。 下面是苹果 Objective-C Runtime Reference中的描述：</p><ul><li><code>Selector（typedef struct objc_selector *SEL）</code>:在运行时 Selectors 用来代表一个方法的名字。Selector 是一个在运行时被注册（或映射）的C类型字符串。Selector由编译器产生并且在当类被加载进内存时由运行时自动进行名字和实现的映射。</li><li><code>Method（typedef struct objc_method *Method）</code>:方法是一个不透明的用来代表一个方法的定义的类型。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Method 结构</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">method_t</span> &#123;</span></span><br><span class="line">    SEL name;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *types;</span><br><span class="line">    MethodListIMP imp;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li><code>Implementation（typedef id (*IMP)(id, SEL,...)</code>）:这个数据类型指向一个方法的实现的最开始的地方。该方法为当前CPU架构使用标准的C方法调用来实现。该方法的第一个参数指向调用方法的自身（即内存中类的实例对象，若是调用类方法，该指针则是指向元类对象 metaclass ）。第二个参数是这个方法的名字 selector，该方法的真正参数紧随其后。</li></ul><p>理解 selector, method, implementation 这三个概念之间关系的最好方式是：在运行时，类（Class）维护了一个消息分发列表来解决消息的正确发送。每一个消息列表的入口是一个方法（Method），这个方法映射了一对键值对，其中键值是这个方法的名字 selector（SEL），值是指向这个方法实现的函数指针 implementation（IMP）。 Method swizzling 修改了类的消息分发列表使得已经存在的 selector 映射了另一个实现 implementation，同时重命名了原生方法的实现为一个新的 selector。</p><h3 id="调用-_cmd"><a class="markdownIt-Anchor" href="#调用-_cmd"></a> 调用 _cmd</h3><p>下面代码在正常情况下会出现循环：</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)xxx_viewWillAppear:(<span class="built_in">BOOL</span>)animated &#123;</span><br><span class="line">  [<span class="keyword">self</span> xxx_viewWillAppear:animated];</span><br><span class="line">  <span class="built_in">NSLog</span>(<span class="string">@"viewWillAppear: %@"</span>, <span class="built_in">NSStringFromClass</span>([<span class="keyword">self</span> <span class="keyword">class</span>]));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然而在交换了方法实现后就不会出现循环了。好的程序员应该对这里出现的方法的递归调用有所警觉，这里我们应该理清在 method swizzling 后方法的实现究竟变成了什么。在交换了方法的实现后，xxx_viewWillAppear:方法的实现已经被替换为了 UIViewController -viewWillAppear：的原生实现，所以这里并不是在递归调用。由于 xxx_viewWillAppear: 这个方法的实现已经被替换为了 viewWillAppear: 的实现，所以，当我们在这个方法中再调用 viewWillAppear: 时便会造成递归循环。</p><p>记住给需要转换的所有方法加个前缀以区别原生方法。</p><h2 id="涉及-runtime-方法"><a class="markdownIt-Anchor" href="#涉及-runtime-方法"></a> 涉及 <code>runtime</code> 方法：</h2><ol><li><p>通过 SEL 获取一个方法 Method<br>Method class_getInstanceMethod(Class cls, SEL name);</p></li><li><p>通过 Method 获取该方法的实现 IMP<br>IMP method_getImplementation(Method m);</p></li><li><p>返回一个字符串，描述了方法的参数和返回类型<br>const char * method_getTypeEncoding(Method m);</p></li><li><p>通过 SEL 以及 IMP 给一个类添加新的方法 Method，其中 types 就是 method_getTypeEncoding 的返回值。<br>BOOL class_addMethod(Class cls, SEL name, IMP imp, const char *types);</p><ol><li>当 cls 中有 name 方法实现，添加method return NO</li><li>当 cls 中没有 name 方法，则添加方法实现 return YES</li></ol></li><li><p>通过给定的 SEL 替换同一个类中的方法的实现 IMP，其中 SEL 是想要替换的 selector 名，IMP 是替换后的实现。<br>IMP class_replaceMethod(Class cls, SEL name, IMP imp, const char *types);</p></li><li><p>交换两个方法的实现 IMP<br>void method_exchangeImplementations(Method m1, Method m2);</p></li></ol><h2 id="思考"><a class="markdownIt-Anchor" href="#思考"></a> 思考</h2><p>很多人认为交换方法实现会带来无法预料的结果。然而采取了以下预防措施后, method swizzling 会变得很可靠：</p><ul><li>在交换方法实现后记得要调用原生方法的实现（除非你非常确定可以不用调用原生方法的实现）：APIs 提供了输入输出的规则，而在输入输出中间的方法实现就是一个看不见的黑盒。交换了方法实现并且一些回调方法不会调用原生方法的实现这可能会造成底层实现的崩溃。</li><li>避免冲突：为分类的方法加前缀，一定要确保调用了原生方法的所有地方不会因为你交换了方法的实现而出现意想不到的结果。</li><li>理解实现原理：只是简单的拷贝粘贴交换方法实现的代码而不去理解实现原理不仅会让 App 很脆弱，并且浪费了学习 Objective-C 运行时的机会。阅读 Objective-C Runtime Reference 并且浏览 &lt;obje/runtime.h&gt; 能够让你更好理解实现原理。</li><li>持续的预防：不管你对你理解 swlzzling 框架，UIKit 或者其他内嵌框架有多自信，一定要记住所有东西在下一个发行版本都可能变得不再好使。做好准备，在使用这个黑魔法中走得更远，不要让程序反而出现不可思议的行为。</li></ul><blockquote><p><a href="https://nshipster.cn/method-swizzling/" target="_blank" rel="noopener">引用 Method Swizzling</a></p></blockquote><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> iOS Programming </category>
          
          <category> objc </category>
          
          <category> runtime </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> 底层 </tag>
            
            <tag> objc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CollectionView 使用</title>
      <link href="/2017/06/15/UI%20%E7%9B%B8%E5%85%B3/CollectionView-%E4%BD%BF%E7%94%A8/"/>
      <url>/2017/06/15/UI%20%E7%9B%B8%E5%85%B3/CollectionView-%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Jun 02 2020 17:35:52 GMT+0800 (CST) --><h2 id="基本实现注意点"><a class="markdownIt-Anchor" href="#基本实现注意点"></a> 基本实现注意点</h2><p>CollectionView 在呈现的数据和用于呈现该数据的视觉元素之间保持严格的区分（view + layout）。</p><p>基本使用的过程：</p><ol><li>自己的布局对象：子类化 layout</li><li>自定义 collectionView 中的 item（cell，supplementary views 和 decoration views）</li><li>在layout 的 <code>prepare</code> 方法中计算出所有 attribute（用来修饰 cell，supplementary views 和 decoration views）并缓存在 layout 对象中<ol><li>每个 attribute 的indexPath，frame，zIndex ……</li><li>根据 attribute 计算出 collectionViewContentSize</li><li>计算 attribute 的数据可以给 layout 自定义一个 delegate 协议，让他去向 collectionView 拿</li></ol></li><li><code>layoutAttributesForElementsInRect</code> 获取视图的可见矩形区域中的所有 UICollectionViewLayoutAttributes，类似实现 <code>layoutAttributesForItem:atIndexPath</code>， <code>layoutAttributesForSupplementaryViewOfKind:atIndexPath</code> ，<code>layoutAttributesForDecorationViewOfKind:atIndexPath</code></li></ol><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 可以使用 binaryTree 算法，将复杂度降到 O(log(n))</span></span><br><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">layoutAttributesForElements</span><span class="params">(<span class="keyword">in</span> rect: CGRect)</span></span> -&gt; [<span class="type">UICollectionViewLayoutAttributes</span>]? &#123;</span><br><span class="line">  <span class="keyword">var</span> visibleLayoutAttributes: [<span class="type">UICollectionViewLayoutAttributes</span>] = []</span><br><span class="line">  <span class="keyword">for</span> attributes <span class="keyword">in</span> cache &#123;</span><br><span class="line">    <span class="keyword">if</span> attributes.frame.intersects(rect) &#123;</span><br><span class="line">      visibleLayoutAttributes.append(attributes)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> visibleLayoutAttributes</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">layoutAttributesForItem</span><span class="params">(at indexPath: IndexPath)</span></span> -&gt; <span class="type">UICollectionViewLayoutAttributes?</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> cache[indexPath.item]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>是否刷新页面</li></ol><blockquote><p>当 collection view 的 bounds 改变时，布局需要告诉 collection view 是否需要重新计算布局。我的猜想是：当 collection view 改变大小时，大多数布局会被作废，比如设备旋转的时候。因此，一个幼稚的实现可能只会简单的返回 YES。虽然实现功能很重要，但是 scroll view 的 bounds 在滚动时也会改变，这意味着你的布局每秒会被丢弃多次。根据计算的复杂性判断，这将会对性能产生很大的影响。<br>当 collection view 的宽度改变时，我们自定义的布局必须被丢弃，但这滚动并不会影响到布局。幸运的是，collection view 将它的新 bounds 传给 shouldInvalidateLayoutForBoundsChange: 方法。这样我们便能比较视图当前的bounds 和新的 bounds 来确定返回值：</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">shouldInvalidateLayout</span><span class="params">(forBoundsChange newBounds: CGRect)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> oldBounds = collectionView?.bounds</span><br><span class="line">  <span class="keyword">if</span> newBounds.width != oldBounds?.width &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="分析-uicollectionviewh-中的类结构"><a class="markdownIt-Anchor" href="#分析-uicollectionviewh-中的类结构"></a> 分析 UICollectionView.h 中的类结构</h2><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@class</span> <span class="title">UICollectionView</span>, <span class="title">UICollectionReusableView</span>, <span class="title">UICollectionViewCell</span>, <span class="title">UICollectionViewLayout</span>, <span class="title">UICollectionViewTransitionLayout</span>, <span class="title">UICollectionViewLayoutAttributes</span>, <span class="title">UITouch</span>, <span class="title">UINib</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">@class</span> <span class="title">UIDragItem</span>, <span class="title">UIDragPreviewParameters</span>, <span class="title">UIDragPreviewTarget</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">@class</span> <span class="title">UICollectionViewDropProposal</span>, <span class="title">UICollectionViewPlaceholder</span>, <span class="title">UICollectionViewDropPlaceholder</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">@class</span> <span class="title">UIContextMenuConfiguration</span>, <span class="title">UITargetedPreview</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">@protocol</span> <span class="title">UIContextMenuInteractionCommitAnimating</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">@protocol</span> <span class="title">UIDataSourceTranslating</span>, <span class="title">UISpringLoadedInteractionContext</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">@protocol</span> <span class="title">UIDragSession</span>, <span class="title">UIDropSession</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">@protocol</span> <span class="title">UICollectionViewDragDelegate</span>, <span class="title">UICollectionViewDropDelegate</span>, <span class="title">UICollectionViewDropCoordinator</span>, <span class="title">UICollectionViewDropItem</span>, <span class="title">UICollectionViewDropPlaceholderContext</span>;</span></span><br></pre></td></tr></table></figure><p>引用：</p><blockquote><p><a href="https://objccn.io/issue-3-3/" target="_blank" rel="noopener">自定义 Collection View 布局</a></p></blockquote><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> iOS Programming </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>c 可变参数宏整理</title>
      <link href="/2017/06/01/c-%E5%AE%8F%E6%95%B4%E7%90%86/"/>
      <url>/2017/06/01/c-%E5%AE%8F%E6%95%B4%E7%90%86/</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Jun 02 2020 17:35:51 GMT+0800 (CST) --><a id="more"></a><h2 id="__va_args__和__va_args__的作用"><a class="markdownIt-Anchor" href="#__va_args__和__va_args__的作用"></a> #、##、__VA_ARGS__和##__VA_ARGS__的作用</h2><h3 id="用来把参数转换成字符串"><a class="markdownIt-Anchor" href="#用来把参数转换成字符串"></a> <code>#</code>用来把参数转换成字符串</h3><p>实例1</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> P(A) printf(<span class="meta-string">"%s:%d\n"</span>,#A,A);</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span>&#123; </span><br><span class="line">  <span class="keyword">int</span> a = <span class="number">1</span>, b = <span class="number">2</span>; </span><br><span class="line">  P(a); </span><br><span class="line">  P(b); </span><br><span class="line">  P(a+b); </span><br><span class="line">  system(<span class="string">"pause"</span>); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a:<span class="number">1</span></span><br><span class="line">b:<span class="number">2</span></span><br><span class="line">a+b:<span class="number">3</span></span><br></pre></td></tr></table></figure><p>实例2</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SQUARE(x) printf(<span class="meta-string">"The square of "</span>#x<span class="meta-string">" is %d.\n"</span>, ((x)*(x)));</span></span><br><span class="line">SQUARE(<span class="number">8</span>)</span><br></pre></td></tr></table></figure><p>输出的是：The square of 8 is 64</p><h3 id="运算符可以用于宏函数的替换部分"><a class="markdownIt-Anchor" href="#运算符可以用于宏函数的替换部分"></a> <code>##</code>运算符可以用于宏函数的替换部分</h3><p>这个运算符把两个语言符号组合成单个语言符号，为宏扩展提供了一种连接实际变元的手段</p><p>实例1</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> XNAME(n) x ## n</span></span><br></pre></td></tr></table></figure><p>如果这样使用宏：XNAME(8)</p><p>则会被展开成这样：x8</p><p><code>##</code>就是个粘合剂，将前后两部分粘合起来，也就是有“字符化”的意思。但是“##”不能随意粘合任意字符，必须是合法的C语言标示符。在单一的宏定义中，最多可以出现一次“#”或“##”预处理操作符。如果没有指定与“#”或“##”预处理操作符相关的计算次序，则会产生问题。为避免该问题，在单一的宏定义中只能使用其中一种操作符(即，一份“#”或一个“##”，或都不用)。除非非常有必要，否则尽量不要使用“#”和“##”。</p><h3 id="__va_args__-是一个可变参数的宏"><a class="markdownIt-Anchor" href="#__va_args__-是一个可变参数的宏"></a> <code>__VA_ARGS__</code> 是一个可变参数的宏</h3><p>这个可变参数的宏是新的C99规范中新增的，目前似乎只有gcc支持（VC6.0的编译器不支持）。<br>实现思想就是宏定义中参数列表的最后一个参数为省略号（也就是三个点）。</p><h3 id="__va_args__"><a class="markdownIt-Anchor" href="#__va_args__"></a> <code>##__VA_ARGS__</code></h3><p>宏前面加上##的作用在于，当可变参数的个数为0时，这里的##起到把前面多余的&quot;,&quot;去掉的作用,否则会编译出错</p><p>一般这个用在调试信息上多一点<br>例如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> my_print1(...)  printf(\_\_VA_ARGS__)</span></span><br><span class="line">my_print1(<span class="string">"i=%d,j=%d\n"</span>,i,j)  正确打印</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> my_print2(fmt,...)  printf(fmt, \_\_VA_ARGS__)  </span></span><br><span class="line"></span><br><span class="line">my_print1(<span class="string">"i=%d,j=%d\n"</span>,i,j) 正确打印</span><br><span class="line"></span><br><span class="line">my_print1(<span class="string">"iiiiiii\n"</span>) 编译失败打印，因为扩展出来只有一个参数，至少要两个及以上参数</span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">如果是<span class="meta">#<span class="meta-keyword">define</span> my_print2(fmt,...)  printf(fmt,##\_\_VA_ARGS__)  </span></span><br><span class="line"></span><br><span class="line">那么 my_print1 里面不管是几个参数都能正确打印</span><br><span class="line"></span><br><span class="line">```c</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MODULE_NAME <span class="meta-string">"MY_LIB"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> error_print(fmt, ...)  printf(<span class="meta-string">"[ERROR]["</span>MODULE_NAME<span class="meta-string">"](%s|%d)"</span> fmt, __func__, __LINE__, ##__VA_ARGS__)</span></span><br></pre></td></tr></table></figure><h2 id="c-库宏-va_start"><a class="markdownIt-Anchor" href="#c-库宏-va_start"></a> C 库宏 - va_start()</h2><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> 开发语言 </category>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Masonry 分析</title>
      <link href="/2017/06/01/source-code/Masonry-%E5%88%86%E6%9E%90/"/>
      <url>/2017/06/01/source-code/Masonry-%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Jun 02 2020 17:35:52 GMT+0800 (CST) --><a id="more"></a><p>分析源码：</p><ol><li>这个第三方库，他设计的目标是什么？</li><li>需要哪些基础知识</li><li>整体结构是什么样的</li><li>由外而内逐层分析层次结构</li><li>每个层次结构的意图是什么，为了实现这个意图他使用了什么方式，这么做有什么优点</li><li>为了让用户使用方便，实现了什么样的接口，为了实现这样的接口底层又是如何实践的呢？</li></ol><h2 id="masonry-是什么"><a class="markdownIt-Anchor" href="#masonry-是什么"></a> Masonry 是什么</h2><p><a href="https://github.com/SnapKit/Masonry" target="_blank" rel="noopener">Masonry源码</a></p><ul><li>Masonry是一个轻量级的布局框架，它以更好的语法包装了AutoLayout</li><li>Masonry拥有自己的布局DSL，它提供了可链式语法来描述NSLayoutConstraints，从而使布局代码更简洁易读。<br>（DSL 其实是 Domain Specific Language 的缩写，中文翻译为领域特定语言）</li></ul><h2 id="为什么要设计-masonry"><a class="markdownIt-Anchor" href="#为什么要设计-masonry"></a> 为什么要设计 Masonry</h2><p>对比一下 AutoLayout 中使用 <code>NSLayoutConstraint</code> 是多么糟糕</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">UIView</span> *superview = <span class="keyword">self</span>.view;</span><br><span class="line"><span class="built_in">UIView</span> *view1 = [[<span class="built_in">UIView</span> alloc] init];</span><br><span class="line">view1.translatesAutoresizingMaskIntoConstraints = <span class="literal">NO</span>;</span><br><span class="line">view1.backgroundColor = [<span class="built_in">UIColor</span> greenColor];</span><br><span class="line">[superview addSubview:view1];</span><br><span class="line"></span><br><span class="line"><span class="built_in">UIEdgeInsets</span> padding = <span class="built_in">UIEdgeInsetsMake</span>(<span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>);</span><br><span class="line">[superview addConstraints:@[</span><br><span class="line">  <span class="comment">//view1 constraints</span></span><br><span class="line">  [<span class="built_in">NSLayoutConstraint</span> constraintWithItem:view1</span><br><span class="line">                 attribute:<span class="built_in">NSLayoutAttributeTop</span></span><br><span class="line">                 relatedBy:<span class="built_in">NSLayoutRelationEqual</span></span><br><span class="line">                    toItem:superview</span><br><span class="line">                 attribute:<span class="built_in">NSLayoutAttributeTop</span></span><br><span class="line">                multiplier:<span class="number">1.0</span></span><br><span class="line">                  constant:padding.top],</span><br><span class="line">  ... bottom, left</span><br><span class="line">  [<span class="built_in">NSLayoutConstraint</span> constraintWithItem:view1</span><br><span class="line">                 attribute:<span class="built_in">NSLayoutAttributeRight</span></span><br><span class="line">                 relatedBy:<span class="built_in">NSLayoutRelationEqual</span></span><br><span class="line">                    toItem:superview</span><br><span class="line">                 attribute:<span class="built_in">NSLayoutAttributeRight</span></span><br><span class="line">                multiplier:<span class="number">1</span></span><br><span class="line">                  constant:-padding.right],</span><br><span class="line"> ]];</span><br></pre></td></tr></table></figure><p>如果使用 Masonry<br><span id="code1"></span></p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[view1 mas_makeConstraints:^(MASConstraintMaker *make) &#123;</span><br><span class="line">  make.edges.equalTo(superview).insets(padding);</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure><p>P.S. Masonry 内部会帮你调用 view.translatesAutoresizingMaskIntoConstraints = NO;</p><p>Masonry 设计的目的，就是以链式编程手段封装 <code>NSLayoutConstraint</code> 冗余代码！<br><span id="questions"></span></p><ol><li>如何处理原来繁杂接口</li><li>如何实现链式</li><li>如何封装 <code>NSLayoutConstraint</code> 的</li><li>使用了何种编程手段[整体架构设计，设计模式，语法技巧]</li></ol><p>带着这些问题，根据源码结构分析出来</p><hr><h2 id="masonry-代码结构分析"><a class="markdownIt-Anchor" href="#masonry-代码结构分析"></a> Masonry 代码结构分析</h2><h3 id="从调用层次分析"><a class="markdownIt-Anchor" href="#从调用层次分析"></a> 从调用层次分析</h3><p>这里我要像洋葱一样一层一层的拨开</p><ol><li>最外层接口</li></ol><p><a href="#code1">根据这段代码分析</a><br>UIView category 中实现 View+MASAdditions.h (View+MASShorthandAdditions.h)</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#define MAS_VIEW UIView</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">MAS_VIEW</span> (<span class="title">MASAdditions</span>)</span></span><br><span class="line">- (<span class="built_in">NSArray</span> *)mas_makeConstraints:(<span class="keyword">void</span>(^)(MASConstraintMaker *make))block;</span><br><span class="line">- (<span class="built_in">NSArray</span> *)mas_updateConstraints:(<span class="keyword">void</span>(^)(MASConstraintMaker *make))block;</span><br><span class="line">- (<span class="built_in">NSArray</span> *)mas_remakeConstraints:(<span class="keyword">void</span>(^)(MASConstraintMaker *make))block;</span><br><span class="line"></span><br><span class="line"><span class="comment">//NSLayoutAttribute properties</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>, <span class="keyword">readonly</span>) MASViewAttribute *mas_left;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>, <span class="keyword">readonly</span>) MASViewAttribute *mas_top;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>, <span class="keyword">readonly</span>) MASViewAttribute *mas_right;</span><br><span class="line">...还有很多布局属性这里省略</span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>, <span class="keyword">readonly</span>) MASViewAttribute *(^mas_attribute)(<span class="built_in">NSLayoutAttribute</span> attr);</span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>, <span class="keyword">readonly</span>) MASViewAttribute *mas_firstBaseline;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>, <span class="keyword">readonly</span>) MASViewAttribute *mas_lastBaseline;</span><br><span class="line"></span><br><span class="line"><span class="comment">//a key to associate with this view</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="keyword">id</span> mas_key;</span><br></pre></td></tr></table></figure><p>从👆源码可以看到</p><ul><li>三个见名知意的方法</li><li>方法参数 <code>MASConstraintMaker</code> 这个就是 make</li><li>属性 <code>MASViewAttribute</code> 这个就是 make 后面的 make.edges</li><li><code>id mas_key</code> 这个是啥，目前不知道</li></ul><p>我想知道，他的链式是怎么实现的，如何封装 autolayout 相关的数据的，目前看到的只是平常使用的接口<br>我还要找到 下图的这些信息<br><img src="/img/view_formula.jpeg" alt="view formula"></p><ol start="2"><li>接着往里面看</li></ol><ul><li>MASViewAttribute: 一个不可变元组，存着 receiver view, related view 和关联的 <code>NSLayoutAttribute</code> [根据文档注释]</li></ul><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">weak</span>, <span class="keyword">readonly</span>) MAS_VIEW *view;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">weak</span>, <span class="keyword">readonly</span>) <span class="keyword">id</span> item;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>, <span class="keyword">readonly</span>) <span class="built_in">NSLayoutAttribute</span> layoutAttribute;</span><br></pre></td></tr></table></figure><p>目前理解为下图等式的相关信息</p><ul><li>MASConstraintMaker：<br>提供一个工厂方法来创建 <code>MASConstraints</code>, 这些 constraints 只有在被 installed 的时候才会被收集[根据文档注释]</li></ul><p>MASConstraintMaker.h</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>, <span class="keyword">readonly</span>) MASConstraint *left;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>, <span class="keyword">readonly</span>) MASConstraint *top;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>, <span class="keyword">readonly</span>) MASConstraint *right;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>, <span class="keyword">readonly</span>) MASConstraint *firstBaseline;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>, <span class="keyword">readonly</span>) MASConstraint *lastBaseline;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这个是干啥的？</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>, <span class="keyword">readonly</span>) MASConstraint *(^attributes)(MASAttribute attrs);</span><br></pre></td></tr></table></figure><ul><li>MASConstraint？跟 <code>NSLayoutConstraint</code> 好像<ul><li>允许使用可链接的语法创建约束</li><li>约束可以表示单个 NSLayoutConstraint（MASViewConstraint）</li><li>或一组 NSLayoutConstraints（MASComposisteConstraint）</li></ul></li></ul><p>bingo，到这里下面这两个问题有眉目了, <a href="#questions">最开始的几个问题</a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2.</span> 如何实现链式</span><br><span class="line"><span class="number">3.</span> 如何封装 `NSLayoutConstraint` 的</span><br></pre></td></tr></table></figure><hr><h3 id="分析-masonry-链式封装"><a class="markdownIt-Anchor" href="#分析-masonry-链式封装"></a> 分析 <code>Masonry</code> 链式封装</h3><h4 id="主要组件结构"><a class="markdownIt-Anchor" href="#主要组件结构"></a> 主要组件结构</h4><ol><li>MASConstraintMaker</li><li>MASConstraint<ol><li>MASViewConstraint</li><li>MASComposisteConstraint</li></ol></li><li>MASConstraintDelegate</li></ol><p><img src="/img/masonry-frame.jpg" alt="masonry 主要组件"></p><hr><h4 id="使用函数调用栈分析"><a class="markdownIt-Anchor" href="#使用函数调用栈分析"></a> 使用函数调用栈分析</h4><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[redView mas_makeConstraints:^(MASConstraintMaker *make) &#123;</span><br><span class="line">  make.top.equalTo(superview.mas_top).with.offset(padding); <span class="comment">//with with</span></span><br><span class="line">  make.left.equalTo(greenView.mas_right).offset(padding);   <span class="comment">//without with</span></span><br><span class="line">  make.bottom.equalTo(blueView.mas_top).offset(-padding);</span><br><span class="line">  make.right.equalTo(superview.mas_right).offset(-padding);</span><br><span class="line">  make.width.equalTo(greenView.mas_width);</span><br><span class="line">  make.height.equalTo(@[greenView, blueView]);              <span class="comment">//can pass array of views</span></span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure><details><summary>masonry call stack step1: 主流程</summary><pre><p><img src="/img/masonry-step1.jpeg" alt="step1"><br></p></pre><p></p></details><details><summary>masonry call stack step2：调用block 收集布局信息</summary><pre><p><img src="/img/masonry-step2.jpeg" alt="step2"><br></p></pre><p></p></details><details><summary>masonry call stack step3：install constraints</summary><pre><p><img src="/img/masonry-step3.jpeg" alt="step3"><br></p></pre><p></p></details><p>整体流程&amp;核心调用栈分析结束后，接下来再看细节技巧就容易多了</p><h3 id="代码组件分析"><a class="markdownIt-Anchor" href="#代码组件分析"></a> 代码组件分析</h3><ol><li>MASConstraintMaker</li><li>MASConstraint<ol><li>MASViewConstraint</li><li>MASComposisteConstraint</li></ol></li><li>MASConstraintDelegate</li><li>MASViewAttribute</li></ol><ul><li><p><code>NSLayoutConstraint</code> 的问题</p><ul><li>布局数据分散，使用命令式方法调用，接口参数就是布局属性，导致用户使用闹心</li></ul></li><li><p>Masonry 是如何解决这个问题的呢？</p><ol><li>需要创建对象保存 model 数据</li><li>创建链节点(把大量参数以链节点的方式逐一放在节点中（MASViewConstraint节点）)</li><li>调用系统 <code>NSLayoutConstraint</code> 方法</li></ol></li><li><p>整体步骤：</p><ol><li>node1: 创建 MASConstraint 节点，绑定第一个 item1 和 attr1</li><li>node2: 创建 MASViewAttribute(item2, attr2)，并添加等式的 relation (block 闭包调用)</li><li>node3: 添加 valueOffset，priority，divideBy …… 常量数据 （block 闭包低啊用）</li><li>block 结束，所有 constraint 配置完，进行 install 内部调用 <code>NSLayoutConstraint</code> 方法，把复杂的方法封装在内部</li></ol></li></ul><hr><h4 id="model-层数据"><a class="markdownIt-Anchor" href="#model-层数据"></a> model 层数据</h4><p>根据这个等式 等式信息：<br><img src="/img/view_formula.jpeg" alt="view formula"></p><p><strong>创建一个 constraint 需要：</strong></p><ol><li>两对（view, attr)</li><li>relation</li><li>mulity</li><li>constant</li><li>priority</li></ol><ul><li>MASViewAttribute 元组封装 (item, constraintAttr)</li><li>MASViewConstraint 在 MASViewAttribute 基础上封装 (mas_attr = 1.0 * mas_attr + constant)</li></ul><h5 id="生成-masviewattribute-的方式"><a class="markdownIt-Anchor" href="#生成-masviewattribute-的方式"></a> 生成 <strong>MASViewAttribute</strong> 的方式</h5><ol><li>UIView+MASAdditions</li></ol><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 计算属性</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>, <span class="keyword">readonly</span>) MASViewAttribute *mas_left;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>, <span class="keyword">readonly</span>) MASViewAttribute *mas_top;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>, <span class="keyword">readonly</span>) MASViewAttribute *mas_right;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>, <span class="keyword">readonly</span>) MASViewAttribute *mas_bottom;</span><br><span class="line"></span><br><span class="line">- (MASViewAttribute *)mas_left &#123;</span><br><span class="line">  <span class="keyword">return</span> [[MASViewAttribute alloc] initWithView:<span class="keyword">self</span> layoutAttribute:<span class="built_in">NSLayoutAttributeLeft</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><code>MASConstraintMaker</code> 生成链条节点 <code>MASConstraint</code> 时，使用工厂方法内部配置 <code>MASViewAttribute</code></li></ol><h5 id="masconstraint-配置过程"><a class="markdownIt-Anchor" href="#masconstraint-配置过程"></a> <strong>MASConstraint</strong> 配置过程</h5><p><code>make.bottom.equalTo(blueView.mas_top).offset(-padding);</code></p><ol><li>attr1: 由 MASConstraintMaker 中的计算属性方法创建 make.top.left</li><li>relation: 由 MASConstraint 中的方法 equalTo 添加</li><li>attr2: 由 UIView+MASAdditions 扩展方法得到</li><li>offset: 由 MASConstraint 中的方法 equalTo 添加</li><li>priority: 由 MASConstraint 中的方法 priority 添加</li></ol><p><img src="/img/masonry_frame2.jpg" alt=""></p><hr><h4 id="布局工厂-masconstraintmaker"><a class="markdownIt-Anchor" href="#布局工厂-masconstraintmaker"></a> 布局工厂 MASConstraintMaker</h4><p>他的 product 是 <code>MASConstraint</code></p><ol><li>他的工厂方法</li></ol><p><span id="anchor"></span></p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 计算属性，我理解为工厂方法</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>, <span class="keyword">readonly</span>) MASConstraint *left;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>, <span class="keyword">readonly</span>) MASConstraint *top;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>, <span class="keyword">readonly</span>) MASConstraint *right;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>, <span class="keyword">readonly</span>) MASConstraint *bottom;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算属性的 get 方法</span></span><br><span class="line">- (MASConstraint *)top &#123;</span><br><span class="line">  <span class="keyword">return</span> [<span class="keyword">self</span> addConstraintWithLayoutAttribute:<span class="built_in">NSLayoutAttributeTop</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (MASConstraint *)addConstraintWithLayoutAttribute:(<span class="built_in">NSLayoutAttribute</span>)layoutAttribute &#123;</span><br><span class="line">  <span class="keyword">return</span> [<span class="keyword">self</span> constraint:<span class="literal">nil</span> addConstraintWithLayoutAttribute:layoutAttribute];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 真正的工厂方法，同时 他也是 给 constraint 添加 NSLayoutAttribute 的地方</span></span><br><span class="line">- (MASConstraint *)constraint:(MASConstraint *)constraint addConstraintWithLayoutAttribute:(<span class="built_in">NSLayoutAttribute</span>)layoutAttribute &#123;</span><br><span class="line"></span><br><span class="line">  MASViewAttribute *viewAttribute = [[MASViewAttribute alloc] initWithView:<span class="keyword">self</span>.view layoutAttribute:layoutAttribute];</span><br><span class="line">  MASViewConstraint *newConstraint = [[MASViewConstraint alloc] initWithFirstViewAttribute:viewAttribute];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.2 make.top.left.equalTo(superview).insets(padding); [left 节点的时候调用，产生第二个 节点以后所有节点的方法]</span></span><br><span class="line">  <span class="keyword">if</span> ([constraint isKindOfClass:MASViewConstraint.class]) &#123;</span><br><span class="line">    <span class="comment">//replace with composite constraint</span></span><br><span class="line">    <span class="built_in">NSArray</span> *children = @[constraint, newConstraint];</span><br><span class="line">    MASCompositeConstraint *compositeConstraint = [[MASCompositeConstraint alloc] initWithChildren:children];</span><br><span class="line">    compositeConstraint.delegate = <span class="keyword">self</span>;</span><br><span class="line">    [<span class="keyword">self</span> constraint:constraint shouldBeReplacedWithConstraint:compositeConstraint];</span><br><span class="line">    <span class="keyword">return</span> compositeConstraint;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.1 make.top.left.equalTo(superview).insets(padding); [top 节点的时候调用，产生第一个 节点的方法]</span></span><br><span class="line">  <span class="keyword">if</span> (!constraint) &#123;</span><br><span class="line">    newConstraint.delegate = <span class="keyword">self</span>;</span><br><span class="line">    [<span class="keyword">self</span>.constraints addObject:newConstraint];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> newConstraint;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>得出结论：</strong></p><ol><li>根据上面代码中的 2.1，2.2 知道 make.left.right.top…… 会生产 3 个 MASViewConstraint，并组合到 MASCompositeConstraint 里面</li></ol><p>2333 这就知道了 为什么要有 MASCompositeConstraint，他的一个作用就是 实现链式兼容啊！（因为赤裸裸的 3个 MASViewConstraint，怎么变成一个 节点啊）<br>那么问题又来了，make.left.right.top(view)，是怎么实现 left = view.left, right = view.right …… 的呢？</p><ol start="2"><li>等式关系，使用函数表示，内部直接把对应 relation 配置给 constraint</li></ol><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- (MASConstraint * (^)(<span class="keyword">id</span> attr))mas_equalTo;</span><br><span class="line">- (MASConstraint * (^)(<span class="keyword">id</span> attr))mas_greaterThanOrEqualTo;</span><br><span class="line">- (MASConstraint * (^)(<span class="keyword">id</span> attr))mas_lessThanOrEqualTo;</span><br></pre></td></tr></table></figure><ol start="3"><li>接下来的链式都是用函数闭包的方式，把参数传给 constraint 的 [闭包格式 MASConstraint * (^)(parameter 参数)]</li><li>MASConstraintDelegate 是工厂方法协议, 从 <a href="#anchor">这段代码的 2 看</a>，他是让 constraint 生成 constraint 的方法过渡点。<ol><li>他是为了满足 make.top.left 中 top.left 通过 topConstraint 生成一个 leftConstraint的方法</li></ol></li><li>所以对于链式编程技巧：<ol><li>链条的开始，创建成链的起始节点对象</li><li>一条链上应该只有一个对象，后面的所有节点都是对于这个对象的属性配置添加</li><li>如果同一条链上有多个对象，那么使用组合模式，把多个节点对象封装成一个节点对象</li></ol></li></ol><p><img src="/img/masonry-call-stack.jpg" alt="从上面得到"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">为什么要使用闭包传？使用方法消息传不好吗？</span><br><span class="line">好像就是为了不要 `[]` 这个符号吧……，使用 `.` 链式调用看着好看</span><br></pre></td></tr></table></figure><hr><h3 id="其他开发细节分析"><a class="markdownIt-Anchor" href="#其他开发细节分析"></a> 其他开发细节分析</h3><p>下面这些是啥？<br>都是一些 c 语言的宏，在其他文章里分析过了</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//MASUtilities.h</span></span><br><span class="line"><span class="meta">#define MASAttachKeys(...)                                                        \</span></span><br><span class="line">  &#123;                                                                             \</span><br><span class="line">    <span class="built_in">NSDictionary</span> *keyPairs = <span class="built_in">NSDictionaryOfVariableBindings</span>(__VA_ARGS__);     \</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">id</span> key <span class="keyword">in</span> keyPairs.allKeys) &#123;                                        \</span><br><span class="line">      <span class="keyword">id</span> obj = keyPairs[key];                                               \</span><br><span class="line">      <span class="built_in">NSAssert</span>([obj respondsToSelector:<span class="keyword">@selector</span>(setMas_key:)],             \</span><br><span class="line">               <span class="string">@"Cannot attach mas_key to %@"</span>, obj);                        \</span><br><span class="line">      [obj setMas_key:key];                                                 \</span><br><span class="line">    &#125;                                                                         \</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">inline</span> <span class="keyword">id</span> _MASBoxValue(<span class="keyword">const</span> <span class="keyword">char</span> *type, ...)</span><br><span class="line"><span class="meta">#define MASBoxValue(value) _MASBoxValue(@encode(__typeof__((value))), (value))</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//View+MASShorthandAdditions.h</span></span><br><span class="line"><span class="meta">#define MAS_ATTR_FORWARD(attr)  \</span></span><br><span class="line">- (MASViewAttribute *)attr &#123;    \</span><br><span class="line">    <span class="keyword">return</span> [<span class="keyword">self</span> mas_<span class="meta">##attr];   \</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#define MAS_ATTR_FORWARD_AVAILABLE(attr, available)  \</span></span><br><span class="line">- (MASViewAttribute *)attr available &#123;    \</span><br><span class="line">    <span class="keyword">return</span> [<span class="keyword">self</span> mas_<span class="meta">##attr];   \</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//MASConstraint.h</span></span><br><span class="line"><span class="meta">#define mas_equalTo(...)                 equalTo(MASBoxValue((__VA_ARGS__)))</span></span><br><span class="line"><span class="meta">#define mas_greaterThanOrEqualTo(...)    greaterThanOrEqualTo(MASBoxValue((__VA_ARGS__)))</span></span><br><span class="line"><span class="meta">#define mas_lessThanOrEqualTo(...)       lessThanOrEqualTo(MASBoxValue((__VA_ARGS__)))</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#define mas_offset(...)                  valueOffset(MASBoxValue((__VA_ARGS__)))</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#ifdef MAS_SHORTHAND_GLOBALS</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#define equalTo(...)                     mas_equalTo(__VA_ARGS__)</span></span><br><span class="line"><span class="meta">#define greaterThanOrEqualTo(...)        mas_greaterThanOrEqualTo(__VA_ARGS__)</span></span><br><span class="line"><span class="meta">#define lessThanOrEqualTo(...)           mas_lessThanOrEqualTo(__VA_ARGS__)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#define offset(...)                      mas_offset(__VA_ARGS__)</span></span><br></pre></td></tr></table></figure><h4 id="runtime-的运用"><a class="markdownIt-Anchor" href="#runtime-的运用"></a> runtime 的运用</h4><p>主要是给 view 添加关联对象</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//MASViewConstraint.m</span></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">MAS_VIEW</span> (<span class="title">MASConstraints</span>)</span></span><br><span class="line"><span class="comment">// 见名知意</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>) <span class="built_in">NSMutableSet</span> *mas_installedConstraints; </span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">MAS_VIEW</span> (<span class="title">MASConstraints</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">char</span> kInstalledConstraintsKey; </span><br><span class="line">- (<span class="built_in">NSMutableSet</span> *)mas_installedConstraints &#123;</span><br><span class="line">  <span class="built_in">NSMutableSet</span> *constraints = objc_getAssociatedObject(<span class="keyword">self</span>, &amp;kInstalledConstraintsKey);</span><br><span class="line">  <span class="keyword">if</span> (!constraints) &#123;</span><br><span class="line">    constraints = [<span class="built_in">NSMutableSet</span> set];</span><br><span class="line">    objc_setAssociatedObject(<span class="keyword">self</span>, &amp;kInstalledConstraintsKey, constraints, OBJC_ASSOCIATION_RETAIN_NONATOMIC);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> constraints;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//View+MASAdditions.m</span></span><br><span class="line">- (<span class="keyword">id</span>)mas_key &#123;</span><br><span class="line">  <span class="keyword">return</span> objc_getAssociatedObject(<span class="keyword">self</span>, <span class="keyword">@selector</span>(mas_key));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)setMas_key:(<span class="keyword">id</span>)key &#123;</span><br><span class="line">  objc_setAssociatedObject(<span class="keyword">self</span>, <span class="keyword">@selector</span>(mas_key), key, OBJC_ASSOCIATION_RETAIN_NONATOMIC);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>mas_key 是为了调试布局用的</p><ul><li><a href="https://www.jianshu.com/p/710f742ca71a" target="_blank" rel="noopener">Masonry 布局冲突快速定位</a></li><li><a href="https://www.jianshu.com/p/e36db45b764a" target="_blank" rel="noopener">如何快速定位哪个 View 出现了约束警告？</a></li></ul><blockquote><p><a href="https://developer.apple.com/library/archive/documentation/UserExperience/Conceptual/AutolayoutPG/index.html#//apple_ref/doc/uid/TP40010853-CH7-SW1" target="_blank" rel="noopener">Auto Layout Guide</a></p></blockquote><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> 第三方框架 </category>
          
          <category> UI 布局 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> 源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS View 编程指南</title>
      <link href="/2017/05/15/UI%20%E7%9B%B8%E5%85%B3/iOS-View-%E7%BC%96%E7%A8%8B%E6%8C%87%E5%8D%97/"/>
      <url>/2017/05/15/UI%20%E7%9B%B8%E5%85%B3/iOS-View-%E7%BC%96%E7%A8%8B%E6%8C%87%E5%8D%97/</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Jun 02 2020 17:35:52 GMT+0800 (CST) --><a id="more"></a><h2 id="view-和-window-架构"><a class="markdownIt-Anchor" href="#view-和-window-架构"></a> View 和 Window 架构</h2><h3 id="view-结构基础"><a class="markdownIt-Anchor" href="#view-结构基础"></a> View 结构基础</h3><p>layer 管理 view 辅助存储器，处理view 相关的动画。</p><h4 id="view-层级和子view-管理"><a class="markdownIt-Anchor" href="#view-层级和子view-管理"></a> View 层级和子view 管理</h4><h4 id="view-绘制循环"><a class="markdownIt-Anchor" href="#view-绘制循环"></a> View 绘制循环</h4><p>UIView类使用按需绘制模型来呈现内容。当视图首次出现在屏幕上时，系统要求它绘制其内容。系统捕获该内容的快照并将该快照用作 view 的视觉表示。如果不更改视图的内容，则可能永远不会再次调用视图的绘图代码。快照图像可用于涉及视图的大多数操作。如果更改了内容，则会通知系统视图已更改。然后，视图重复绘制视图和捕获新结果快照的过程。当视图的内容更改时，您不会直接重绘这些更改。而是使用setNeedsDisplay或setNeedsDisplayInRect：方法使视图无效。这些方法告诉系统视图的内容已更改，并且需要在下一个机会重新绘制。在启动任何绘图操作之前，系统将一直等到当前运行循环结束。这种延迟使你有机会一次使多个视图无效，从层次结构中添加或删除视图，隐藏视图，调整视图大小以及重新放置视图。所做的所有更改都将同时反映出来。</p><p>问题：都有什么方式可以出发视图重新绘制？</p><h4 id="内容-modes"><a class="markdownIt-Anchor" href="#内容-modes"></a> 内容 Modes</h4><h4 id="可拉伸-views"><a class="markdownIt-Anchor" href="#可拉伸-views"></a> 可拉伸 Views</h4><h4 id="内建动画支持"><a class="markdownIt-Anchor" href="#内建动画支持"></a> 内建动画支持</h4><h3 id="view-几何和坐标系"><a class="markdownIt-Anchor" href="#view-几何和坐标系"></a> View 几何和坐标系</h3><h4 id="the-relationship-of-the-frame-bounds-and-center-properties"><a class="markdownIt-Anchor" href="#the-relationship-of-the-frame-bounds-and-center-properties"></a> The Relationship of the Frame, Bounds, and Center Properties</h4><h4 id="坐标系转换"><a class="markdownIt-Anchor" href="#坐标系转换"></a> 坐标系转换</h4><p>CGContextGetCTM<br>Returns the current transformation matrix.</p><h4 id="points-versus-pixels"><a class="markdownIt-Anchor" href="#points-versus-pixels"></a> Points Versus Pixels</h4><h3 id="the-runtime-interaction-model-for-views"><a class="markdownIt-Anchor" href="#the-runtime-interaction-model-for-views"></a> The Runtime Interaction Model for Views</h3><h3 id="tips-for-using-views-effectively"><a class="markdownIt-Anchor" href="#tips-for-using-views-effectively"></a> Tips for Using Views Effectively</h3><h4 id="views-do-not-always-have-a-corresponding-view-controller"><a class="markdownIt-Anchor" href="#views-do-not-always-have-a-corresponding-view-controller"></a> Views Do Not Always Have a Corresponding View Controller</h4><h4 id="minimize-custom-drawing"><a class="markdownIt-Anchor" href="#minimize-custom-drawing"></a> Minimize Custom Drawing</h4><h4 id="take-advantage-of-content-modes"><a class="markdownIt-Anchor" href="#take-advantage-of-content-modes"></a> Take Advantage of Content Modes</h4><h4 id="declare-views-as-opaque-whenever-possible"><a class="markdownIt-Anchor" href="#declare-views-as-opaque-whenever-possible"></a> Declare Views as Opaque Whenever Possible</h4><h4 id="adjust-your-views-drawing-behavior-when-scrolling"><a class="markdownIt-Anchor" href="#adjust-your-views-drawing-behavior-when-scrolling"></a> Adjust Your View’s Drawing Behavior When Scrolling</h4><h4 id="do-not-customize-controls-by-embedding-subviews"><a class="markdownIt-Anchor" href="#do-not-customize-controls-by-embedding-subviews"></a> Do Not Customize Controls by Embedding Subviews</h4><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> iOS Programming </category>
          
          <category> Guide </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> 翻译 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Swift 面向协议编程</title>
      <link href="/2017/05/14/swift%20%E8%AF%AD%E6%B3%95/Swift-%E9%9D%A2%E5%90%91%E5%8D%8F%E8%AE%AE%E7%BC%96%E7%A8%8B/"/>
      <url>/2017/05/14/swift%20%E8%AF%AD%E6%B3%95/Swift-%E9%9D%A2%E5%90%91%E5%8D%8F%E8%AE%AE%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Jun 02 2020 17:35:52 GMT+0800 (CST) --><a id="more"></a><p>WWDC 2015<br>Developer Tools<br>Protocol-Oriented Programming in Swift<br>Session 408</p><h2 id="class"><a class="markdownIt-Anchor" href="#class"></a> Class</h2><p>面向对象的设计思想</p><ol><li>封装：把相关数据和操作进行分组</li><li>访问控制：构建一面墙把里面代码和外面代码分开</li><li>抽象接口：抽象接口表达类的作用和通讯功能</li><li>命名空间：避免代码名称冲突</li><li>Expressive syntax：表达式语法（下标扩展）</li><li>extension 扩展性：忘了给类加东西，可以使用 extension 给他加上</li></ol><p>但是，在 swift 里上面的这些都可以用 struct or enum 做</p><p>Building Better Apps with Value Types in Swift</p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> iOS Programming </category>
          
          <category> WWDC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> WWDC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RAC-学习笔记01</title>
      <link href="/2017/04/06/RxSwfit+RAC/RAC-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B001/"/>
      <url>/2017/04/06/RxSwfit+RAC/RAC-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B001/</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Jun 02 2020 17:35:52 GMT+0800 (CST) --><a id="more"></a><h2 id="学习目的"><a class="markdownIt-Anchor" href="#学习目的"></a> 学习目的</h2><ol><li>知道 rac 都有什么</li><li>知道他们都怎么用</li><li>知道为什么有这些东西</li><li>根类归纳整理</li><li>如何自己扩展</li><li>适当分析源码</li></ol><h2 id="主要概念"><a class="markdownIt-Anchor" href="#主要概念"></a> 主要概念</h2><ol><li>信号</li><li>信号变换&amp;组合</li><li>订阅（绑定）</li><li>取消订阅</li></ol><p><img src="/img/RACStream.jpeg" alt="RACStream"></p><p>RACSignal : 基于时间的异步事件流</p><p>RACSequence : 惰性集合，同步（很少用），collection类型的封装，可以使用 Stream（monad）封装的函数式方式</p><h2 id="如何创建信号"><a class="markdownIt-Anchor" href="#如何创建信号"></a> 如何创建信号</h2><h3 id="单元信号"><a class="markdownIt-Anchor" href="#单元信号"></a> 单元信号</h3><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">RACSignal *sig0 = [RACSignal error:<span class="built_in">NSError</span>.new];</span><br><span class="line">RACSignal *sig1 = [RACSignal <span class="keyword">return</span>:@<span class="number">0</span>];</span><br><span class="line">RACSignal *sig2 = [RACSignal empty];</span><br><span class="line">RACSignal *sig3 = [RACSignal never];</span><br></pre></td></tr></table></figure><h3 id="动态信号"><a class="markdownIt-Anchor" href="#动态信号"></a> 动态信号</h3><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">RACSignal *s = [RACSignal createSignal:^RACDisposable *(<span class="keyword">id</span>&lt;RACSubscriber&gt; subscriber) &#123;</span><br><span class="line">  [subscriber sendNext:@<span class="number">0</span>];</span><br><span class="line">  [subscriber sendCompleted];</span><br><span class="line">  <span class="keyword">return</span> [RACDisposable disposableWithBlock:^&#123;</span><br><span class="line"></span><br><span class="line">  &#125;];</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure><h3 id="cocoa-桥接"><a class="markdownIt-Anchor" href="#cocoa-桥接"></a> Cocoa 桥接</h3><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>) bridge &#123;</span><br><span class="line">  RACSignal *sO = RACObserver(<span class="keyword">self</span>, button);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">self</span>.sigSetFrame = [<span class="keyword">self</span>.button rac_signalForSelector:<span class="keyword">@selector</span>(setFrame:)];</span><br><span class="line">  [_sigSetFrame</span><br><span class="line">   subscribeNext:^(<span class="keyword">id</span> x) &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"setFrame:%@"</span>, x);</span><br><span class="line">  &#125;];</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">self</span>.sigClick = [<span class="keyword">self</span>.button rac_signalForControlEvents:<span class="built_in">UIControlEventTouchUpInside</span>];</span><br><span class="line">  [_sigClick</span><br><span class="line">   subscribeNext:^(<span class="keyword">id</span> x) &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"event: %@"</span>, x);</span><br><span class="line">  &#125;];</span><br><span class="line"></span><br><span class="line">  [[<span class="keyword">self</span> rac_liftSelector:<span class="keyword">@selector</span>(lift:) withSignals:_sigClick, <span class="literal">nil</span>]</span><br><span class="line">   subscribeNext:^(<span class="keyword">id</span> x) &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, x);</span><br><span class="line">  &#125;];</span><br><span class="line">  </span><br><span class="line">  [[<span class="keyword">self</span> rac_liftSelector:<span class="keyword">@selector</span>(lift:) withSignalsFromArray:@[[_sigClick map:^<span class="keyword">id</span>(<span class="keyword">id</span> value) &#123;</span><br><span class="line">    <span class="keyword">return</span> @[@<span class="number">3</span>];</span><br><span class="line">  &#125;]]]</span><br><span class="line">   subscribeNext:^(<span class="keyword">id</span> x) &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, x);</span><br><span class="line">  &#125;];</span><br><span class="line">  </span><br><span class="line">  [<span class="keyword">self</span> rac_liftSelector:<span class="keyword">@selector</span>(lift:) withSignalOfArguments:[_sigClick mapReplace:RACTuplePack(@<span class="number">1</span>)]];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">int</span>) lift:(<span class="keyword">id</span>)value&#123;</span><br><span class="line">  printf(<span class="string">"lift: %s"</span>, __func__);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="信号变化内部是产生一个新信号的"><a class="markdownIt-Anchor" href="#信号变化内部是产生一个新信号的"></a> 信号变化(内部是产生一个新信号的)</h3><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[_sigClick map:^<span class="keyword">id</span>(<span class="keyword">id</span> value) &#123;</span><br><span class="line">  <span class="keyword">return</span> @[@<span class="number">3</span>];</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure><h3 id="序列转换"><a class="markdownIt-Anchor" href="#序列转换"></a> 序列转换</h3><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">self</span>.sigSequence = [[RACSequence <span class="keyword">return</span>:@<span class="number">3</span>] concat:[RACSequence <span class="keyword">return</span>:@<span class="number">4</span>]].signal;</span><br></pre></td></tr></table></figure><h2 id="订阅绑定信号的方式"><a class="markdownIt-Anchor" href="#订阅绑定信号的方式"></a> 订阅（绑定）信号的方式</h2><h3 id="直接订阅方法"><a class="markdownIt-Anchor" href="#直接订阅方法"></a> 直接订阅方法</h3><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[<span class="keyword">self</span>.sigSample</span><br><span class="line"> subscribeNext:^(<span class="keyword">id</span> x) &#123;</span><br><span class="line">  <span class="built_in">NSLog</span>(<span class="string">@"sample: %@"</span>, x);</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure><h3 id="绑定"><a class="markdownIt-Anchor" href="#绑定"></a> 绑定</h3><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RAC(<span class="keyword">self</span>, a) = Signal;</span><br></pre></td></tr></table></figure><h3 id="cocoa-桥接-2"><a class="markdownIt-Anchor" href="#cocoa-桥接-2"></a> Cocoa 桥接</h3><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)signal &#123;</span><br><span class="line">  [[<span class="keyword">self</span> rac_liftSelector:<span class="keyword">@selector</span>(lift:) withSignals:_sigClick, <span class="literal">nil</span>]</span><br><span class="line">   subscribeNext:^(<span class="keyword">id</span> x) &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, x);</span><br><span class="line">  &#125;];</span><br><span class="line">  </span><br><span class="line">  [[<span class="keyword">self</span> rac_liftSelector:<span class="keyword">@selector</span>(lift:) withSignalsFromArray:@[[_sigClick map:^<span class="keyword">id</span>(<span class="keyword">id</span> value) &#123;</span><br><span class="line">    <span class="keyword">return</span> @[@<span class="number">3</span>];</span><br><span class="line">  &#125;]]]</span><br><span class="line">   subscribeNext:^(<span class="keyword">id</span> x) &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, x);</span><br><span class="line">  &#125;];</span><br><span class="line">  </span><br><span class="line">  [<span class="keyword">self</span> rac_liftSelector:<span class="keyword">@selector</span>(lift:) withSignalOfArguments:[_sigClick mapReplace:RACTuplePack(@<span class="number">1</span>)]];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">int</span>) lift:(<span class="keyword">id</span>)value&#123;</span><br><span class="line">  printf(<span class="string">"lift: %s"</span>, __func__);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="信号变化组合"><a class="markdownIt-Anchor" href="#信号变化组合"></a> 信号变化&amp;组合</h2><ol><li>单个信号的变化</li><li>多个信号的组合</li><li>高阶操作</li></ol><p><img src="/img/signal_transform.jpeg" alt="signal 变化"></p><h3 id="值操作"><a class="markdownIt-Anchor" href="#值操作"></a> 值操作</h3><p>问题：</p><ul><li>为什么会有这样的值操作方法？</li><li>自己如何扩展新的值方法</li></ul><hr><ul><li>transform 这些用的比较多<ol><li>map</li><li>MapReplace</li><li>ReduceEach tuple(a, b) -&gt; c</li></ol></li><li>值判断逻辑变换<ol><li>not</li><li>and</li><li>or</li></ol></li><li>用的比较少<ol><li>reduceApply 这个不太清楚为什么要这么设计，用combineLatest: reduceEach: 就可以做了，而且代码看起来更好。</li><li>materialize</li><li>dematerialize</li></ol></li></ul><h3 id="数量操作"><a class="markdownIt-Anchor" href="#数量操作"></a> 数量操作</h3><ol><li>repeat 一直会有值</li></ol><ul><li><p>条件过滤1</p><ol><li>ignore</li><li>ignoreValues</li><li>distinctUntilChanged</li></ol></li><li><p>条件过滤2</p><ol><li>takeUntilBlock:(BOOL (^)(id x))predicate</li><li>takeWhileBlock:(BOOL (^)(id x))predicate;</li><li>skipUntilBlock:(BOOL (^)(id x))predicate;</li><li>skipWhileBlock:(BOOL (^)(id x))predicate;</li></ol></li><li><p>数量判断，如果有值就发送</p><ol><li>any;</li><li>any:(BOOL (^)(id object))predicateBlock;</li><li>all:(BOOL (^)(id object))predicateBlock;</li></ol></li><li><p>重试</p><ol><li>retry</li><li>retry: Count</li><li>collect <code>汇聚</code> 信号必须有返回值</li></ol></li></ul><p>副作用：<br>– 对于信号值变化以外的一些操作</p><ul><li>doNext</li><li>doCompleted</li><li>doError</li></ul><p><code>折叠函数</code></p><p>不听对一个value 操作，使用折叠函数解决这个问题</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[sig10 aggregateWithStart:@<span class="number">0</span> reduce:^<span class="keyword">id</span>(<span class="keyword">id</span> running, <span class="keyword">id</span> next) &#123;</span><br><span class="line">  <span class="keyword">return</span> @([running intValue] + [next intValue]);</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure><ol><li>(RACSignal *)aggregateWithStart:(id)start reduce:(id (^)(id running, id next))reduceBlock;</li><li>(RACSignal *)aggregateWithStart:(id)start reduceWithIndex:(id (^)(id running, id next, NSUInteger index))reduceBlock;</li><li>(RACSignal *)aggregateWithStartFactory:(id (^)(void))startFactory reduce:(id (^)(id running, id next))reduceBlock;</li><li>(instancetype)scanWithStart:(id)startingValue reduce:(id (^)(id running, id next))reduceBlock;</li><li>(instancetype)scanWithStart:(id)startingValue reduceWithIndex:(id (^)(id running, id next, NSUInteger index))reduceBlock;</li></ol><h3 id="时间操作"><a class="markdownIt-Anchor" href="#时间操作"></a> 时间操作</h3><ol><li>+ (RACSignal *)interval:(NSTimeInterval)interval onScheduler:(RACScheduler *)scheduler;</li><li>+ (RACSignal *)interval:(NSTimeInterval)interval onScheduler:(RACScheduler *)scheduler withLeeway:(NSTimeInterval)leeway;</li><li>delay</li><li>throttle 阀门，在固定时间内没有新值发送的时候，会发送最后的值</li></ol><h3 id="多个信号组合"><a class="markdownIt-Anchor" href="#多个信号组合"></a> 多个信号组合</h3><p>问题：</p><ol><li>受哪个信号终止而终止？</li><li>错误传递？</li><li>各个信号何时开始开始订阅？</li><li>在哪个线程发出？</li></ol><ul><li>concat<ul><li>第一个结束后，订阅第二个</li><li>第一个error 后，就直接 error</li></ul></li><li>merge</li><li>zip</li><li>combineLatest</li><li>sample</li><li>takeUntil</li><li>takeUntilReplacement, 当 B 来了直接替换 A，开始订阅 B</li></ul><h3 id="信号的高阶操作升阶降阶"><a class="markdownIt-Anchor" href="#信号的高阶操作升阶降阶"></a> 信号的高阶操作（升阶降阶）</h3><ol><li>升阶 S(v) -&gt; S(s(v))</li><li>降阶 S(s(v)) -&gt; S(v)</li></ol><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">RACSignal *signal = @[@<span class="number">1</span>, @<span class="number">2</span>, @<span class="number">3</span>, @<span class="number">4</span>].rac_sequence.signal;</span><br><span class="line">RACSignal *signalB = [[signal map:^<span class="keyword">id</span>(<span class="keyword">id</span> value) &#123;</span><br><span class="line">  <span class="keyword">return</span> [[RACSignal <span class="keyword">return</span>:value] delay:<span class="number">1</span>];</span><br><span class="line">&#125;] concat];</span><br></pre></td></tr></table></figure><ul><li><p>降阶操作</p></li><li><p>switchToLatests</p></li></ul><p><img src="/img/switchToLatests.jpeg" alt="switchToLatests"></p><ul><li><p>if/then/else<br><img src="/img/if-then-else.jpeg" alt="if/then/else"></p></li><li><p>switch/cases/default</p></li><li><p>flatten</p></li></ul><p><img src="/img/flatten.jpeg" alt="flatten"></p><p>flatten 类似 merge 只不过一个是接收的 value是 signal，另一个接收的就是 value</p><ul><li>flatten:count 按个数展开信号，当信号个数 &gt; count 以后等待，如果有 sig completed，那么把等待中的sig 放入展开数组里面</li></ul><p><img src="/img/flatten-count.jpeg" alt="flatten-count"></p><p>flatten:1 == concat</p><ul><li>flattenMap</li></ul><p>满足 monad 的部分定义，绝大部分函数都可以使用 flattenMap 实现</p><ul><li>bind</li></ul><p>大部分函数都可以使用 bind 实现</p><h2 id="冷信号热信号"><a class="markdownIt-Anchor" href="#冷信号热信号"></a> 冷信号&amp;热信号</h2><h2 id="一些习题"><a class="markdownIt-Anchor" href="#一些习题"></a> 一些习题</h2><ol><li>如何获得无限递增的信号</li></ol><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">RACSignal *increment(<span class="keyword">int</span> inc) &#123;</span><br><span class="line">  RACSignal *repeat = [[RACSignal <span class="keyword">return</span>:@(inc)] repeat];</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> [[repeat scanWithStart:<span class="number">0</span> reduce:^<span class="keyword">id</span>(<span class="keyword">id</span> running, <span class="keyword">id</span> next) &#123;</span><br><span class="line">    <span class="keyword">return</span> @([running intValue] + [next intValue]);</span><br><span class="line">  &#125;]</span><br><span class="line">  delay:<span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>fibonacci</li></ol><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">RACSignal *fibonacci() &#123;</span><br><span class="line">  RACSignal *repeat = [[RACSignal <span class="keyword">return</span>:<span class="literal">nil</span>] repeat];</span><br><span class="line">  <span class="keyword">return</span> [repeat scanWithStart:RACTuplePack(@<span class="number">1</span>, @<span class="number">1</span>) reduce:^<span class="keyword">id</span>(RACTuple *running, <span class="keyword">id</span> _) &#123;</span><br><span class="line">    <span class="keyword">int</span> next = [running.first intValue] + [running.second intValue];</span><br><span class="line">    <span class="keyword">return</span> RACTuplePack(running.second, @(next));</span><br><span class="line">  &#125;];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> 第三方框架 </category>
          
          <category> ReactiveCocoa </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> objc </tag>
            
            <tag> RAC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>进程&amp;线程间通信</title>
      <link href="/2017/03/09/%E8%BF%9B%E7%A8%8B-%E7%BA%BF%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1/"/>
      <url>/2017/03/09/%E8%BF%9B%E7%A8%8B-%E7%BA%BF%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1/</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Jun 02 2020 17:35:51 GMT+0800 (CST) --><a id="more"></a><h2 id="一-进程间的通信方式"><a class="markdownIt-Anchor" href="#一-进程间的通信方式"></a> 一、进程间的通信方式</h2><h3 id="管道-pipe"><a class="markdownIt-Anchor" href="#管道-pipe"></a> 管道( pipe )</h3><ul><li>管道是一种半双工的通信方式，数据只能单向流动，而且只能在具有亲缘关系的进程间使用。进程的亲缘关系通常是指父子进程关系。</li></ul><h3 id="有名管道-namedpipe"><a class="markdownIt-Anchor" href="#有名管道-namedpipe"></a> 有名管道 (namedpipe)</h3><ul><li>有名管道也是半双工的通信方式，但是它允许无亲缘关系进程间的通信。</li></ul><h3 id="信号量semophore"><a class="markdownIt-Anchor" href="#信号量semophore"></a> 信号量(semophore )</h3><p>信号量是一个计数器，可以用来控制多个进程对共享资源的访问。它常作为一种锁机制，防止某进程正在访问共享资源时，其他进程也访问该资源。因此，主要作为进程间以及同一进程内不同线程之间的同步手段。</p><h3 id="消息队列-messagequeue"><a class="markdownIt-Anchor" href="#消息队列-messagequeue"></a> 消息队列( messagequeue )</h3><ul><li>消息队列是由消息的链表，存放在内核中并由消息队列标识符标识。消息队列克服了信号传递信息少、管道只能承载无格式字节流以及缓冲区大小受限等缺点。</li></ul><h3 id="信号-sinal"><a class="markdownIt-Anchor" href="#信号-sinal"></a> 信号 (sinal )</h3><ul><li>信号是一种比较复杂的通信方式，用于通知接收进程某个事件已经发生。</li></ul><h3 id="共享内存shared-memory"><a class="markdownIt-Anchor" href="#共享内存shared-memory"></a> 共享内存(shared memory )</h3><ul><li>共享内存就是映射一段能被其他进程所访问的内存，这段共享内存由一个进程创建，但多个进程都可以访问。共享内存是最快的 IPC 方式，它是针对其他进程间通信方式运行效率低而专门设计的。它往往与其他通信机制，如信号两，配合使用，来实现进程间的同步和通信。</li></ul><h3 id="套接字socket"><a class="markdownIt-Anchor" href="#套接字socket"></a> 套接字(socket )</h3><ul><li>套解口也是一种进程间通信机制，与其他通信机制不同的是，它可用于不同及其间的进程通信。</li></ul><h2 id="二-线程间的通信方式"><a class="markdownIt-Anchor" href="#二-线程间的通信方式"></a> 二、线程间的通信方式</h2><ul><li>锁机制：包括互斥锁、条件变量、读写锁</li><li>互斥锁提供了以排他方式防止数据结构被并发修改的方法。</li><li>读写锁允许多个线程同时读共享数据，而对写操作是互斥的。</li><li>条件变量可以以原子的方式阻塞进程，直到某个特定条件为真为止。对条件的测试是在互斥锁的保护下进行的。条件变量始终与互斥锁一起使用。</li><li>信号量机制(Semaphore)：包括无名线程信号量和命名线程信号量</li><li>信号机制(Signal)：类似进程间的信号处理</li></ul><p>线程间的通信目的主要是用于线程同步，所以线程没有像进程通信中的用于数据交换的通信机制。</p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> 计算机基础知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自定义控件[转载objccn]</title>
      <link href="/2017/01/13/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6/"/>
      <url>/2017/01/13/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Jun 02 2020 17:35:52 GMT+0800 (CST) --><p>可以直接看 <a href="http://objccn.io" target="_blank" rel="noopener">objccn.io</a> 的这篇<a href="https://objccn.io/issue-3-4/" target="_blank" rel="noopener">自定义控件</a></p><ol><li>控件渲染方式</li><li>控件交互方式</li><li>optional 数据源</li></ol><h2 id="视图层次概览"><a class="markdownIt-Anchor" href="#视图层次概览"></a> 视图层次概览</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">UIResponder</span><br><span class="line">    ↑</span><br><span class="line">  UIView</span><br><span class="line">    ↑</span><br><span class="line"> UIControl</span><br></pre></td></tr></table></figure><h3 id="uiresponder响应链"><a class="markdownIt-Anchor" href="#uiresponder响应链"></a> UIResponder(响应链)</h3><p>UIResponder 是 UIView 的父类。responder 能够处理触摸、手势、远程控制等事件。之所以它是一个单独的类而没有合并到 UIView 中，是因为 UIResponder 有更多的子类，最明显的就是 UIApplication 和 UIViewController。通过重写 UIResponder 的方法，可以决定一个类是否可以成为<font size="4" color="red">第一响应者 (first responder)</font>，例如当前输入焦点元素。</p><p>当 touches (触摸) 或 motion (指一系列运动传感器) 等交互行为发生时，它们被发送给第一响应者 (通常是一个视图)。如果第一响应者没有处理，则该行为沿着响应链到达视图控制器，如果行为仍然没有被处理，则继续传递给应用。如果想监测晃动手势，可以根据需要在这3层中的任意位置处理。</p><p>UIResponder 还允许自定义输入方法，从 inputAccessoryView 向键盘添加辅助视图到使用 inputView 提供一个完全自定义的键盘。</p><h3 id="uiview渲染layer宿主"><a class="markdownIt-Anchor" href="#uiview渲染layer宿主"></a> UIView(渲染layer宿主)</h3><p>UIView 子类处理所有跟内容绘制有关的事情以及触摸时间。<br>但我们重申一些技巧点:<br>一个普遍错误的概念：视图的区域是由它的 frame 定义的。实际上 <font color="red">frame 是一个派生属性，是由 center 和 bounds 合成而来</font>。不使用 Auto Layout 时，大多数人使用 frame 来改变视图的位置和大小。小心些，<a href="https://developer.apple.com/library/ios/#documentation/UIKit/Reference/UIView_Class/UIView/UIView.html#//apple_ref/occ/instp/UIView/frame" target="_blank" rel="noopener">官方文档</a>特别详细说明了一个注意事项:</p><blockquote><p>如果 transform 属性不是 identity transform 的话，那么这个属性的值是未定义的，因此应该将其忽略</p></blockquote><p>另一个允许向视图添加交互的方法是使用<font color="purple">手势识别。注意它们对 responders 并不起作用，而只对视图及其子类奏效</font>。</p><h3 id="uicontrol交互控件"><a class="markdownIt-Anchor" href="#uicontrol交互控件"></a> UIControl(交互控件)</h3><p>UIControl 建立在视图上，增加了更多的交互支持。最重要的是，<font color="purple">它增加了 target / action 模式</font>。看一下具体的子类，我们可以看一下按钮，日期选择器 (Date pickers)，文本框等等。创建交互控件时，你通常想要子类化一个 UIControl。一些常见的像 bar buttons (虽然也支持 target / action) 和 text view (这里需要你使用代理来获得通知) 的类其实并不是 UIControl。</p><h2 id="渲染"><a class="markdownIt-Anchor" href="#渲染"></a> 渲染</h2><p>现在，我们转向可见部分：自定义渲染。正如 Daniel 在他的<a href="http://www.objccn.io/issue-3-1/" target="_blank" rel="noopener">文章</a>中提到的，你可能想避免在 CPU 上做渲染而将其丢给 GPU。这里有一条经验：尽量避免 <code>drawRect:</code>，使用现有的视图构建自定义视图。</p><p><font color="purple">通常最快速的渲染方法是使用图片视图</font>。例如，假设你想画一个带有边框的圆形头像，像下面图片中这样:</p><div align="center"><img src="https://objccn.io/images/issues/issue-3/issue-3-rounded-corners@2x.png" alt="runloop" style="width:200px;height:376px"></div><p>为了实现这个，我们用以下的代码创建了一个图片视图的子类:</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// called from initializer</span></span><br><span class="line">- (<span class="keyword">void</span>)setupView &#123;</span><br><span class="line">  <span class="keyword">self</span>.clipsToBounds = <span class="literal">YES</span>;</span><br><span class="line">  <span class="keyword">self</span>.layer.cornerRadius = <span class="keyword">self</span>.bounds.size.width / <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">self</span>.layer.borderWidth = <span class="number">3</span>;</span><br><span class="line">  <span class="keyword">self</span>.layer.borderColor = [<span class="built_in">UIColor</span> darkGrayColor].CGColor;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我鼓励各位读者<font color="red">深入了解 CALayer 及其属性，因为你用它能实现的大多数事情会比用 Core Graphics 自己画要快</font>。然而一如既往，监测自己的代码的性能是十分重要的。</p><p>把可拉伸的图片和图片视图一起使用也可以极大的提高效率。在 <a href="http://robots.thoughtbot.com/post/33427366406/designing-for-ios-taming-uibutton" target="_blank" rel="noopener">Taming UIButton</a> 这个帖子中，Reda Lemeden 探索了几种不同的绘图方法。在文章结尾处有一个很有价值的<a href="https://news.ycombinator.com/item?id=4645585" target="_blank" rel="noopener">来自 UIKit 团队的工程师 Andy Matuschak 的回复</a>，解释了可拉伸图片是这些技术中最快的。原因是可拉伸图片在 CPU 和 GPU 之间的数据转移量最小，并且这些图片的绘制是经过高度优化的。</p><p>处理图片时，你也可以让 GPU 为你工作来代替使用 Core Graphics。<font color="red">使用 Core Image，你不必用 CPU 做任何的工作就可以在图片上建立复杂的效果</font>。你可以直接在 OpenGL 上下文上直接渲染，所有的工作都在 GPU 上完成。</p><h3 id="自定义绘制"><a class="markdownIt-Anchor" href="#自定义绘制"></a> 自定义绘制</h3><p>如果决定了采用自定义绘制，有几种不同的选项可供选择。如果可能的话，看看是否可以生成一张图片并在内存和磁盘上缓存起来。如果内容是动态的，也许你可以使用 Core Animation，如果还是行不通，使用 Core Graphics。如果你真的想要接近底层，使用 GLKit 和原生 OpenGL 也不是那么难，但是需要做很多工作。</p><p>如果你真的选择了重写 <code>drawRect:</code>，确保检查内容模式。默认的模式是将内容缩放以填充视图的范围，这在当视图的 frame 改变时并不会重新绘制。</p><h2 id="自定义交互"><a class="markdownIt-Anchor" href="#自定义交互"></a> 自定义交互</h2><p>自定义控件的时候，你几乎一定会扩展一个 UIControl 的子类。在你的子类里，可以使用 target action 机制触发事件，如下面的例子:</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="keyword">self</span> sendActionsForControlEvents:<span class="built_in">UIControlEventValueChanged</span>];</span><br></pre></td></tr></table></figure><p>为了响应触摸，你可能更倾向于使用手势识别。然而如果想要更接近底层，仍然可以重写 touchesBegan， touchesMoved 和 touchesEnded 方法来访问原始的触摸行为。<br>但虽说如此，<font color="purple">创建一个手势识别的子类来把手势处理相关的逻辑从你的视图或者视图控制器中分离出来，在很多情况下都是一种更合适的方式</font>。</p><p>创建自定义控件时所面对的<font color="red">一个普遍的设计问题是向拥有它们的类中回传返回值</font>。比如，假设你创建了一个绘制交互饼状图的自定义控件，想知道用户何时选择了其中一个部分。你可以用很多种不同的方法来解决这个问题，比如通过 target action 模式，代理，block 或者 KVO，甚至通知。</p><h3 id="使用-target-action"><a class="markdownIt-Anchor" href="#使用-target-action"></a> 使用 Target-Action</h3><p>通常也是最方便的做法是使用 target-action。在用户选择后你可以在自定义的视图中做类似这样的事情:</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="keyword">self</span> sendActionsForControlEvents:<span class="built_in">UIControlEventValueChanged</span>];</span><br></pre></td></tr></table></figure><p>如果有一个视图控制器在管理这个视图，需要这样做:</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)setupPieChart &#123;</span><br><span class="line">  [<span class="keyword">self</span>.pieChart addTarget:<span class="keyword">self</span> </span><br><span class="line">                action:<span class="keyword">@selector</span>(updateSelection:)</span><br><span class="line">      forControlEvents:<span class="built_in">UIControlEventValueChanged</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)updateSelection:(<span class="keyword">id</span>)sender&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, <span class="keyword">self</span>.pieChart.selectedSector);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这么做的好处是在自定义视图子类中需要做的事情很少，并且自动获得多目标支持</p><h3 id="使用代理"><a class="markdownIt-Anchor" href="#使用代理"></a> 使用代理</h3><p>如果你需要更多的控制从视图发送到视图控制器的消息，通常使用代理模式。在我们的饼状图中，代码看起来大概是这样:</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="keyword">self</span>.delegate pieChart:<span class="keyword">self</span> didSelectSector:<span class="keyword">self</span>.selectedSector];</span><br></pre></td></tr></table></figure><p>在视图控制器中，你要写如下代码:</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">MyViewController</span> &lt;<span class="title">PieChartDelegate</span>&gt;</span></span><br><span class="line"> ...</span><br><span class="line">- (<span class="keyword">void</span>)setupPieChart&#123;</span><br><span class="line">  <span class="keyword">self</span>.pieChart.delegate = <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)pieChart:(PieChart*)pieChart didSelectSector:(PieChartSector*)sector&#123;</span><br><span class="line">  <span class="comment">// 处理区块</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当你想要做更多复杂的工作而不仅仅是通知所有者值发生了变化时，这么做显然更合适。不过虽然大多数开发人员可以非常快速的实现自定义代理，但这种方式仍然有一些缺点：你必须检查代理是否实现了你想要调用的方法 (使用 respondsToSelector:)，最重要的，通常你只有一个代理 (或者需要创建一个代理数组)。也就是说，一旦视图所有者和视图之间的通信变得稍微复杂，我们几乎总是会采取这种模式。</p><h3 id="使用-block"><a class="markdownIt-Anchor" href="#使用-block"></a> 使用 Block</h3><p>另一个选择是使用 block。再一次用饼状图举例，代码看起来大概是这样:</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">PieChart</span> : <span class="title">UIControl</span> </span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>,<span class="keyword">copy</span>) <span class="keyword">void</span>(^selectionHandler)(PieChartSection* selectedSection); </span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><p>在选取行为的代码中，你只需要执行它。在此之前检查一下block是否被赋值非常重要，因为执行一个未被赋值的 block 会使程序崩溃。</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">self</span>.selectionHandler != <span class="literal">NULL</span>) &#123;</span><br><span class="line">  <span class="keyword">self</span>.selectionHandler(<span class="keyword">self</span>.selectedSection);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种方法的好处是可以把相关的代码整合在视图控制器中:</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)setupPieChart &#123;</span><br><span class="line">  <span class="keyword">self</span>.pieChart.selectionHandler = ^(PieChartSection* section) &#123;</span><br><span class="line">      <span class="comment">// 处理区块</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就像代理，每个动作通常只有一个 block。另一个重要的限制是不要形成引用循环。如果你的视图控制器持有饼状图的强引用，饼状图持有 block，block 又持有视图控制器，就形成了一个引用循环。只要在 block 中引用 self 就会造成这个错误。所以通常代码会写成这个样子：</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">__<span class="keyword">weak</span> <span class="keyword">id</span> weakSelf = <span class="keyword">self</span>;</span><br><span class="line"><span class="keyword">self</span>.pieChart.selectionHandler = ^(PieChartSection* section) &#123;</span><br><span class="line">  MyViewController* strongSelf = weakSelf;</span><br><span class="line">  [strongSelf handleSectionChange:section];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一旦 block 中的代码要失去控制 (比如 block 中要处理的事情太多，导致 block 中的代码过多)，你还应该将它们抽离成独立的方法，这种情况的话可能用代理会更好一些。</p><h3 id="使用-kvo"><a class="markdownIt-Anchor" href="#使用-kvo"></a> 使用 KVO</h3><p>如果喜欢 KVO，你也可以用它来观察。这有一点神奇而且没那么直接，但当应用中已经使用，<font color="red">它是很好的解耦设计模式</font>。在饼状图类中，编写代码:</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">self</span>.selectedSegment = theNewSelectedSegment;</span><br></pre></td></tr></table></figure><p>当使用合成属性，KVO 会拦截到该变化并发出通知。在视图控制器中，编写类似的代码:</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)setupPieChart&#123;</span><br><span class="line">   [<span class="keyword">self</span>.pieChart addObserver:<span class="keyword">self</span> forKeyPath:<span class="string">@"selectedSegment"</span> options:<span class="number">0</span> context:<span class="literal">NULL</span>];</span><br><span class="line">&#125;</span><br><span class="line">- (<span class="keyword">void</span>)observeValueForKeyPath:(<span class="built_in">NSString</span> *)keyPath ofObject:(<span class="keyword">id</span>)object change:(<span class="built_in">NSDictionary</span> *)change context:(<span class="keyword">void</span> *)context &#123;</span><br><span class="line">  <span class="keyword">if</span>(object == <span class="keyword">self</span>.pieChart &amp;&amp; [keyPath isEqualToString:<span class="string">@"selectedSegment"</span>]) &#123;</span><br><span class="line">      <span class="comment">// 处理改变</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据你的需要，在 viewWillDisappear: 或 dealloc 中，还需要移除观察者。对同一个对象设置多个观察者很容易造成混乱。有一些技术可以解决这个问题，比如 <a href="https://github.com/ReactiveCocoa/ReactiveCocoa" target="_blank" rel="noopener">ReactiveCocoa</a> 或者更轻量级的 THObserversAndBinders。</p><h3 id="使用通知"><a class="markdownIt-Anchor" href="#使用通知"></a> 使用通知</h3><p>作为最后一个选择，如果你想要一个非常松散的耦合，可以使用通知来使其他对象得知变化。对于饼状图来说你几乎肯定不想这样，不过为了讲解的完整，这里介绍如何去做。在饼状图的的头文件中：</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="built_in">NSString</span>* <span class="keyword">const</span> SelectedSegmentChangedNotification;</span><br></pre></td></tr></table></figure><p>在实现文件中：</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSString</span>* <span class="keyword">const</span> SelectedSegmentChangedNotification = <span class="string">@"selectedSegmentChangedNotification"</span>;</span><br><span class="line">...</span><br><span class="line">- (<span class="keyword">void</span>)notifyAboutChanges&#123;</span><br><span class="line">  [[<span class="built_in">NSNotificationCenter</span> defaultCenter] postNotificationName:SelectedSegmentChangedNotification object:<span class="keyword">self</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在订阅通知，在视图控制器中：</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)setupPieChart&#123;</span><br><span class="line">  [[<span class="built_in">NSNotificationCenter</span> defaultCenter] addObserver:<span class="keyword">self</span> </span><br><span class="line">                                       selector:<span class="keyword">@selector</span>(segmentChanged:) </span><br><span class="line">                                           name:SelectedSegmentChangedNotification</span><br><span class="line">                                          object:<span class="keyword">self</span>.pieChart];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)segmentChanged:(<span class="built_in">NSNotification</span>*)note&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当添加了观察者，你可以不将饼状图作为参数 object，而是传递 nil，以接收所有饼状图对象发出的通知。就像 KVO 通知，你也需要在恰当的地方退订这些通知。</p><p><font color="red">这项技术的好处是完全的解耦。另一方面，你失去了类型安全，因为在回调中你得到的是一个通知对象，而不像代理，编译器无法检查通知发送者和接受者之间的类型是否匹配</font>。</p><h2 id="辅助功能-accessibility"><a class="markdownIt-Anchor" href="#辅助功能-accessibility"></a> 辅助功能 (Accessibility)</h2><p>苹果官方提供的标准 iOS 控件均有辅助功能。这也是推荐用标准控件创建自定义控件的另一个原因。</p><p>这或许可以作为一整期的主题，但是如果你想编写自定义视图，Accessibility Programming Guide 说明了如何创建辅助控制器。最为值得注意的是，如果有一个视图中有多个需要辅助功能的元素，但它们并不是该视图的子视图，你可以让视图实现 UIAccessibilityContainer 协议。对于每一个元素，返回一个描述它的 UIAccessibilityElement 对象。</p><h2 id="本地化"><a class="markdownIt-Anchor" href="#本地化"></a> 本地化</h2><p>创建自定义视图时，本地化也同样重要。像辅助功能一样，这个可以作为一整期的话题。本地化自定义视图的最直接工作就是字符串内容。如果使用 NSString，你不必担心编码问题。如果在自定义视图中展示日期或数字，使用日期和数字格式化类来展示它们。使用 NSLocalizedString 本地化字符串。</p><p>另一个本地化过程中很有用的工具是 Auto Layout。例如，有在英文中很短的词在德语中可能会很长。如果根据英文单词的长度对视图的尺寸做硬编码，那么当翻译成德文的时候几乎一定会遇上麻烦。通过使用 Auto Layout，让标签控件自动调整为内容的尺寸，并向依赖元素添加一些其他的限制以确保重新设置尺寸，使这项工作变得非常简单。苹果为此提供了一个很好的<a href="http://developer.apple.com/library/ios/#referencelibrary/GettingStarted/RoadMapiOS/chapters/InternationalizeYourApp/InternationalizeYourApp/InternationalizeYourApp.html" target="_blank" rel="noopener">介绍</a>。另外，对于类似希伯来语这种顺序从右到左的语言，如果你使用了 leading 和 trailing 属性，整个视图会自动按照从右到左的顺序展示，而不是硬编码的从左至右。</p><h2 id="测试"><a class="markdownIt-Anchor" href="#测试"></a> 测试</h2><p>最后，让我们考虑测试视图的问题。对于单元测试，你可以使用 Xcode 自带的工具或者其它第三方框架。另外，可以使用 UIAutomation 或者其它基于它的工具。为此，你的视图完全支持辅助功能是必要的。UIAutomation 并未充分得到利用的一个功能是截图；你可以用它<a href="http://jeffkreeftmeijer.com/2011/comparing-images-and-creating-image-diffs/" target="_blank" rel="noopener">自动对比</a>视图和设计以确保两者每一个像素都分毫不差。(插一个无关的小提示：你还可以使用它来为应用上架 App Store <a href="http://www.smallte.ch/blog-read_en_29001.html" target="_blank" rel="noopener">自动生成截图</a>，这在你有多个多国语言的应用时会特别有用)。</p><p>引用</p><blockquote><p><a href="https://objccn.io/issue-3-4/" target="_blank" rel="noopener">自定义控件</a></p></blockquote><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> iOS Programming </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS 设备尺寸表</title>
      <link href="/2016/12/01/%E8%AE%BE%E5%A4%87%E5%B0%BA%E5%AF%B8/"/>
      <url>/2016/12/01/%E8%AE%BE%E5%A4%87%E5%B0%BA%E5%AF%B8/</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Jun 02 2020 17:35:51 GMT+0800 (CST) --><h2 id="尺寸要求"><a class="markdownIt-Anchor" href="#尺寸要求"></a> 尺寸要求</h2><p><a href="http://help.apple.com/itunes-connect/developer/#/devd274dd925" target="_blank" rel="noopener">Apple Doc</a></p><table><thead><tr><th style="text-align:center">屏幕尺寸</th><th style="text-align:center">横屏快照尺寸</th><th style="text-align:center">竖屏快照尺寸</th></tr></thead><tbody><tr><td style="text-align:center">3.5寸</td><td style="text-align:center">960 * 640</td><td style="text-align:center">640*960</td></tr><tr><td style="text-align:center">4寸</td><td style="text-align:center">1136*640</td><td style="text-align:center">640*1136</td></tr><tr><td style="text-align:center">4.7寸</td><td style="text-align:center">1334*750</td><td style="text-align:center">750*1334</td></tr><tr><td style="text-align:center">5.5寸</td><td style="text-align:center">2208*1242</td><td style="text-align:center">1242*2208</td></tr><tr><td style="text-align:center">5.8寸</td><td style="text-align:center">2436*1125</td><td style="text-align:center">1125*2436</td></tr><tr><td style="text-align:center">9.7寸(iPad)</td><td style="text-align:center">1024*768</td><td style="text-align:center">768*1024</td></tr><tr><td style="text-align:center">12.9寸(iPad)</td><td style="text-align:center">2732*2048</td><td style="text-align:center">2048*2732</td></tr></tbody></table><p>iTunesConnect 上架可使用 高尺寸代替低尺寸</p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> iOS Programming </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
